{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "navispowerbidata2"
		},
		"linkedService1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkedService1'"
		},
		"linkedService2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkedService2'"
		},
		"navispowerbidata-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'navispowerbidata-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:navispowerbidata.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"navispowerbidata2-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'navispowerbidata2-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:navispowerbidata2.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"powerbianalyticsdata-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'powerbianalyticsdata-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:powerbianalyticsdata.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"linkedService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://navispowerbidatastorage2.dfs.core.windows.net/"
		},
		"linkedService2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://navispowerbidatastorage2.dfs.core.windows.net/"
		},
		"navispowerbidata2-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://navispowerbidatastorage2.dfs.core.windows.net"
		},
		"powerbianalyticsdata-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://navispowerbidatastorage2.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Adhoc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "jobstepping_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-19T15:42:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ApmtAqaba')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_aqaba",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_within_Vessel_aqaba",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_aqaba",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_aqaba')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_aqaba')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Eurogate_CTB')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dual Cycling_SC",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_SC",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC Idle TIme",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "General Housekeeping_CTB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_CTB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_CTB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_CTB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_CTB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_CTB",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_CTB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_CTB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_CTB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GMPH_CTB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_CTB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GMPH_CTB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Straddle_Prod",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GMPH_CTB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Straddle_Prod",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_SC",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Straddle_Prod",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_SC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_CTB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC Idle TIme",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_CTB",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "General Housekeeping_CTB",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_SC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "General Housekeeping_CTB",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"customer": {
						"type": "string",
						"defaultValue": "eurogatectb"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_SC')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/GMPH_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/Straddle_Prod')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_SC')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_CTB')]",
				"[concat(variables('workspaceId'), '/dataflows/General Housekeeping_CTB')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPATruckTurnTime')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TrkVstStg_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TrkVstStg_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "FailToDeck_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/TrkVstStg_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA_AllDataFlow')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_MTY_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_fromMoves_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_fromMoves_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_fromMoves_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_MTY_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_MTY_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'valencia'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_fromMoves_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_MTY_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA_VslVisits')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Process Vsl Visits only",
				"activities": [
					{
						"name": "VesselVisits_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA_Yard')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "YardInventory_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "YardInventory_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"yardblock": {},
									"vsl": {},
									"invInYard": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/YardInventory_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA_rdsc_cycle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_railCycleTime_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_railCycleTime_gpa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"events": {},
									"rdscMoves": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_railCycleTime_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GPA_rehandle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Rehandle_export_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_export_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_rdsc_export_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_export_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_rdsc_export_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_stack_rdsc_export_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_rdsc_export_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_stack_rdsc_export_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_stack_recv_export_gpa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_within_stack_rdsc_export_gpa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_stack_recv_export_gpa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gpa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_export_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_rdsc_export_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_stack_rdsc_export_gpa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_stack_recv_export_gpa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GTI')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_GTI",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_GTI",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_GTI",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC Idle TIme",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_GTI",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_GTI",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'eurogatectb'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTViolation_gti",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTViolation_gti",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CMPH_GTI",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC Idle TIme",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CMPH_GTI",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_gti",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTViolation_gti",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_gti",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_GTI",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_GTI",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-06T13:02:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_GTI')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_GTI')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_GTI')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_GTI')]",
				"[concat(variables('workspaceId'), '/dataflows/TTViolation_gti')]",
				"[concat(variables('workspaceId'), '/dataflows/CMPH_GTI')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_gti')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_GTI')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MICT_stack_confirmity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "stack_confirmity_MICT",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stack_confirmity_MICT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StackConfirmity": {},
									"StackConformity": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/stack_confirmity_MICT')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MNHPI_stack_confirmity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "stack_confirmity_MNHPI",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stack_confirmity_MNHPI",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StackConfirmity": {},
									"StackConformity": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/stack_confirmity_MNHPI')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Onne')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_Onne",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_Onne",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gti'"
								},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_Onne",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_Onne",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_Onne",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'gti'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_Onne')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_Onne')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PTP')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-12-16T06:04:48Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RemoveDuplicates')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "RemoveDuplicates",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RemoveDuplicates",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Delta": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2021-11-24T21:36:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/RemoveDuplicates')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TEAGTL_stack_confirmity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "stack_confirmity_TEAGTL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "stack_confirmity_TEAGTL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StackConfirmity": {},
									"StackConformity": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/stack_confirmity_TEAGTL')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Valencia')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FailToDeck_MTY",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_MTY",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'valencia'"
								},
								"datasetParameters": {
									"CSV": {},
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Delays",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_MTY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Delays",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "\"valencia\""
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_Valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_valencia",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'valencia'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_Valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_Valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_Valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_Valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_Valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_Valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delays",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_Valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_Valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTViolation_Valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTViolation_Valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_Valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_Valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_Valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTViolation_Valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GMPH",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GMPH",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "GMPH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "General Housekeeping_valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "General Housekeeping_valencia",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'valencia'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_valencia",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "General Housekeeping_valencia",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_valencia",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"customer": {
						"type": "string",
						"defaultValue": "valencia"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_MTY')]",
				"[concat(variables('workspaceId'), '/dataflows/Delays')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_Valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_Valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_Valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/TTViolation_Valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_Valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling')]",
				"[concat(variables('workspaceId'), '/dataflows/GMPH')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen')]",
				"[concat(variables('workspaceId'), '/dataflows/General Housekeeping_valencia')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_valencia')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/apmtaarhus')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dual Cycling_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_aarhus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_aarhus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_aarhus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_aarhus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_aarhus",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_aarhus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_aarhus",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_aarhus')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_aarhus')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_aarhus')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_aarhus')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_aarhus')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_aarhus')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa-violations')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "cmsa_violations__upto_merge",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cmsa_violations__upto_merge",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"deckingfile": {},
									"MoveHistory": {},
									"DHSink": {},
									"MHSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/cmsa_violations__upto_merge')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa-violations_test_Dh6')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "cmsa_violations_test_DH6",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cmsa_violations_test_DH6",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"deckingfile": {},
									"MoveHistory": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/cmsa_violations_test_DH6')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dwell_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTWaitTime_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dwell_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dwell_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "jobstepping_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_cmsa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'cmsa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_within_Vessel_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Dwell_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_cmsa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_-violations-upto-merge')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "cmsa_violations__upto_merge",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cmsa_violations__upto_merge",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"deckingfile": {},
									"MoveHistory": {},
									"DHSink": {},
									"MHSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/cmsa_violations__upto_merge')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_ecevents')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTWaitTime_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_cmsa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_failToDeck')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "FailToDeck_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_cmsa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'cmsa'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_cmsa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_moves')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_cmsa",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'cmsa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TT_Productivity_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TT_Productivity_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Yard_che_productivity_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_cmsa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Yard_che_productivity_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T03:09:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/TT_Productivity_cmsa')]",
				"[concat(variables('workspaceId'), '/dataflows/Yard_che_productivity_cmsa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_moves_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_oldformat_cmsa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_oldformat_cmsa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_oldformat_cmsa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/haifa')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_haifa",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_haifa",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_haifa",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_haifa')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_haifa')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/kssp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "QC_Idle_Time_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_kssp",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'kssp'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTViolation_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTViolation_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTViolation_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_kssp",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "jobstepping_kssp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_kssp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/TTViolation_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_kssp')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_kssp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mict')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "FailToDeck_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_within_Vessel_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FailToDeck_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FailToDeck_mict",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'mict'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dwell_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTWaitTime_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dwell_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dwell_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/FailToDeck_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Dwell_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mict_ecevents_RTG')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_within_Vessel_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dwell_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTWaitTime_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dwell_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dwell_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Dwell_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mict_moves')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "TT_Productivity_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TT_Productivity_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_mict",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'mnhpi'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Yard_che_productivity_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mict",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Yard_che_productivity_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/TT_Productivity_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/Yard_che_productivity_mict')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mict_rehandle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Rehandle_new_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_new_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoveHistory": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_new_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mict_violations')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "violations_mict",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "violations_mict",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoveHistory": {},
									"DeckingHistory": {},
									"ShiftData": {},
									"ShiftInfo": {},
									"XpsEcUser": {},
									"violation": {},
									"decking": {},
									"move": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/violations_mict')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Manila North Harbor Port Inc",
				"activities": [
					{
						"name": "EcEvents_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TTWaitTime_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TTWaitTime_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dwell_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "TTWaitTime_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dwell_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dwell_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "jobstepping_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "jobstepping_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_within_Vessel_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_within_Vessel_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "jobstepping_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_mnhpi",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'cmsa'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/TTWaitTime_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/Dwell_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/jobstepping_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_within_Vessel_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi_moves')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Manila North Harbor Port Inc",
				"activities": [
					{
						"name": "Rehandle_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_mnhpi",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'mnhpi'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TT_Productivity_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TT_Productivity_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Yard_che_productivity_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_mnhpi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Yard_che_productivity_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/TT_Productivity_mnhpi')]",
				"[concat(variables('workspaceId'), '/dataflows/Yard_che_productivity_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi_rehandle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Rehandle_new_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_new_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoveHistory": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_new_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi_tt_productivity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "tt_productivity_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TT_Productivity_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/TT_Productivity_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi_violations')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "violations_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "violations_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoveHistory": {},
									"DeckingHistory": {},
									"ShiftData": {},
									"ShiftInfo": {},
									"XpsEcUser": {},
									"violation": {},
									"decking": {},
									"move": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/violations_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mnhpi_yard_che_productivity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Yard_che_productivity_mnhpi",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Yard_che_productivity_mnhpi",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Yard_che_productivity_mnhpi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "EcEvents_plipdeco",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_plipdeco",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveSrc_plipdeco",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_plipdeco",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_plipdeco",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_plipdeco",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_plipdeco",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_plipdeco",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "RTG EcEvents_plipdeco",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_plipdeco",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RTG EcEvents_plipdeco",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"RTG": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_plipdeco",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RTG EcEvents_plipdeco",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_plipdeco",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_plipdeco')]",
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_plipdeco')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_plipdeco')]",
				"[concat(variables('workspaceId'), '/dataflows/RTG EcEvents_plipdeco')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_plipdeco')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tdt')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "VesselVisits_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "EcEvents_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VesselVisits_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "QC_Idle_Time_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "VesselVisits_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "QC_Idle_Time_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Dual Cycling_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "QC_Idle_Time_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Laden_Unladen_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Laden_Unladen_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Laden_Unladen_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/VesselVisits_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/QC_Idle_Time_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/Laden_Unladen_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_tdt')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tdt_exportRehandle')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Rehandle_ufv_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Rehandle_export_tdt",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_ufv_tdt",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'tdt'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Rehandle_export_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Rehandle_export_tdt",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'tdt'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_ufv_tdt')]",
				"[concat(variables('workspaceId'), '/dataflows/Rehandle_export_tdt')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tdt_moves')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "to process moves data alone",
				"activities": [
					{
						"name": "MoveSrc_tdt",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_tdt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_tdt')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/transnet_baseData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "MoveSrc_transnet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoveSrc_transnet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSV": {},
									"vslvisit": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "EcEvents_transnet",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveSrc_transnet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcEvents_transnet",
								"type": "DataFlowReference",
								"parameters": {
									"customer": "'transnet'"
								},
								"datasetParameters": {
									"CSV": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/MoveSrc_transnet')]",
				"[concat(variables('workspaceId'), '/dataflows/EcEvents_transnet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/transnet_silverLevel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Dual Cycling_transnet",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dual Cycling_transnet",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ITV EcEvents_transnet_ctct",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Dual Cycling_transnet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ITV EcEvents_transnet_ctct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"ITV": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SC EcEvents_transnet_dct",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ITV EcEvents_transnet_ctct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SC EcEvents_transnet_dct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"SC": {},
									"workhours": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Dual Cycling_transnet')]",
				"[concat(variables('workspaceId'), '/dataflows/ITV EcEvents_transnet_ctct')]",
				"[concat(variables('workspaceId'), '/dataflows/SC EcEvents_transnet_dct')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Congo RVM')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "e7ebb428-b726-46e9-b50f-5da90c81c2a1",
					"tenantID": "b354a388-081f-4fa2-a05b-33a065dbfc75"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkedService1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService2')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkedService2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkedService2_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/navispowerbidata-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('navispowerbidata-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/navispowerbidata2-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('navispowerbidata2-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/navispowerbidata2-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('navispowerbidata2-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/powerbianalyticsdata-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('powerbianalyticsdata-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/powerbianalyticsdata-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('powerbianalyticsdata-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CMPH_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Event_Type_Id==\"UNIT_DISCH\" || Event_Type_Id == \"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\", iifNull(t_put,t_carry_complete),iifNull(t_fetch,t_discharge))) ~> DerivedColumn1\nDerivedColumn1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carrier_Visit_Key,\n\t\tpow,\n\t\tDate),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Date),0),\n\t\tMonth = iifNull(month(Date),0),\n\t\tWeek = iifNull(weekOfYear(Date),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/qc_cmph',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key','pow','Date'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delays')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string (\"valencia\")\n}\nsource(output(\n\t\tFacilityId as string,\n\t\t{Yard Id} as string,\n\t\tCarrierVisitId as string,\n\t\tCarrierVisitKey as integer,\n\t\tCraneServiceGkey as short,\n\t\t{Crane DelayTypeId} as string,\n\t\tDelayCategory as string,\n\t\tDelayDurationSec as integer,\n\t\tDelayStartTime as string,\n\t\tCraneDelayGkey as integer,\n\t\tCHEId as short,\n\t\tCHEShortName as string,\n\t\tSrcTable as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/cranedelay','/bronze/cranedelay/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'valencia',\n\tfolderPath: 'bronze/cranedelay',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nSelect1 aggregate(groupBy(CraneDelayGkey),\n\teach(match(name!='CraneDelayGkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/cranedelays',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['CraneDelayGkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delays_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Select2"
						}
					],
					"script": "source(output(\n\t\t{date of gang} as string,\n\t\t{gang (1st/2nd/3rd/4th)} as short,\n\t\t{Call Sign} as string,\n\t\t{Vessel name} as string,\n\t\t{Imp Voy} as string,\n\t\t{Exp Voy} as string,\n\t\t{Quay Crane} as short,\n\t\t{vessel Ops} as string,\n\t\tZeile as short,\n\t\tCategory as string,\n\t\t{Category description} as string,\n\t\tSite as string,\n\t\tID as integer,\n\t\t{von Call Sign} as string,\n\t\t{von Brücke} as short,\n\t\tTeam as string,\n\t\tCode as string,\n\t\tStart as string,\n\t\tStop as string,\n\t\tAccounting as string,\n\t\t{Aktiv Stunden} as double,\n\t\tZeitsteuerung as string,\n\t\tVerz as string,\n\t\t{Labour No} as integer,\n\t\tDuration as double,\n\t\tTDR as string,\n\t\t{Operation Report} as integer,\n\t\tSystem as string,\n\t\tReise as integer,\n\t\t{aktiv von} as string,\n\t\t{aktiv bis} as string,\n\t\tStatus as string,\n\t\t{Stapler B} as boolean,\n\t\t{Std Stapler B} as boolean,\n\t\t{Letzte Änderung} as string,\n\t\tVA as short,\n\t\tAR as short,\n\t\tCB as boolean,\n\t\tVC as short,\n\t\tZM as boolean,\n\t\tST as boolean,\n\t\tRS as boolean,\n\t\tSpr as short,\n\t\t{Std VA} as double,\n\t\t{Std AR} as double,\n\t\t{Std CB} as double,\n\t\t{Std VC} as double,\n\t\t{Std ZM} as boolean,\n\t\t{Std RS} as boolean,\n\t\t{ST Std} as boolean,\n\t\t{Std Spr} as double,\n\t\tBemerkung as string,\n\t\t{Brutto Zeit} as short,\n\t\t{Netto Zeit} as boolean,\n\t\tStammcode as string,\n\t\tTerminal as string,\n\t\t{Dokument Nr} as boolean,\n\t\t{new category} as string,\n\t\t{desription of activity} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'bronze/delays',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nSelect2 derive(Start = toString(toTimestamp(Start,'HH:mm'),'HH:mm:ss'),\n\t\tStop = toString(toTimestamp(Stop,'HH:mm'),'HH:mm:ss'),\n\t\tYear = year(toDate(date_of_gang, 'dd.MM.yyyy')),\n\t\tMonth = month(toDate(date_of_gang, 'dd.MM.yyyy')),\n\t\tWeek = weekOfYear(toDate(date_of_gang, 'dd.MM.yyyy')),\n\t\tdate_of_gang = toDate(date_of_gang, 'dd.MM.yyyy')) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 select(mapColumn(\n\t\tdate_of_gang,\n\t\tGang = {gang_(1st/2nd/3rd/4th)},\n\t\tCall_Sign,\n\t\tVessel_name,\n\t\tImp_Voy,\n\t\tExp_Voy,\n\t\tQuay_Crane,\n\t\tvessel_Ops,\n\t\tZeile,\n\t\tCategory,\n\t\tCategory_description,\n\t\tSite,\n\t\tID,\n\t\tvon_Call_Sign,\n\t\t{von_Brücke},\n\t\tTeam,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tAccounting,\n\t\tAktiv_Stunden,\n\t\tZeitsteuerung,\n\t\tVerz,\n\t\tLabour_No,\n\t\tDuration,\n\t\tTDR,\n\t\tOperation_Report,\n\t\tSystem,\n\t\tReise,\n\t\taktiv_von,\n\t\taktiv_bis,\n\t\tStatus,\n\t\tStapler_B,\n\t\tStd_Stapler_B,\n\t\t{Letzte_Änderung},\n\t\tVA,\n\t\tAR,\n\t\tCB,\n\t\tVC,\n\t\tZM,\n\t\tST,\n\t\tRS,\n\t\tSpr,\n\t\tStd_VA,\n\t\tStd_AR,\n\t\tStd_CB,\n\t\tStd_VC,\n\t\tStd_ZM,\n\t\tStd_RS,\n\t\tST_Std,\n\t\tStd_Spr,\n\t\tBemerkung,\n\t\tBrutto_Zeit,\n\t\tNetto_Zeit,\n\t\tStammcode,\n\t\tTerminal,\n\t\tDokument_Nr,\n\t\tnew_category,\n\t\tdesription_of_activity\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/delays',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Double Cycling_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nderivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'gold/double_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Double Cycling_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nderivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'gold/double_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_DSCHTOLOAD')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false())) ~> filter1\nfilter1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: 1L,\n\tendRowOffset: 1L,\n\tCarry_CHE_Id_nxt = lead(Carry_CHE_Id),\n\t\tEvent_Type_Id_nxt = lead(Event_Type_Id)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_nxt,iif(Event_Type_Id=='UNIT_LOAD',iif(Event_Type_Id_nxt=='UNIT_LOAD','Half Load Cycle',iif(Event_Type_Id_nxt=='UNIT_DISCH','Other Cycle','Other Cycle')),iif(Event_Type_Id=='UNIT_DISCH',iif(Event_Type_Id_nxt=='UNIT_DISCH','Half Discharge Cycle',iif(Event_Type_Id_nxt=='UNIT_LOAD','Disch to Load Cycle','Other Cycle')),'Other Cycle')),'Other Cycle')) ~> derivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nderivedColumn1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/dual_cycling_dtol',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nderivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_SC')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('eurogatectb')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: ($customer),\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Carry_CHE_Kind,'SC') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false())) ~> Filter1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nFilter1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id)) ~> Window1\nWindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV,\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD',\r\n'Half Load Cycle',\r\niif(Event_Type_Id_PREV=='UNIT_DISCH',\r\n'Full Cycle','Other Cycle')),\r\niif(Event_Type_Id=='UNIT_DISCH',\r\niif(Event_Type_Id_PREV=='UNIT_DISCH',\r\n'Half Discharge Cycle',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD',\r\n'Full Cycle','Other Cycle')),\r\n'Other Cycle')),'Other Cycle')) ~> DerivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_SC_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('apmtaarhus')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: ($customer),\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Carry_CHE_Kind,'SC') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false())) ~> Filter1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nFilter1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id)) ~> Window1\nWindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV,\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD',\r\n'Half Load Cycle',\r\niif(Event_Type_Id_PREV=='UNIT_DISCH',\r\n'Full Cycle','Other Cycle')),\r\niif(Event_Type_Id=='UNIT_DISCH',\r\niif(Event_Type_Id_PREV=='UNIT_DISCH',\r\n'Half Discharge Cycle',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD',\r\n'Full Cycle','Other Cycle')),\r\n'Other Cycle')),'Other Cycle')) ~> DerivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'gold/dual_cycling',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tpow,\n\t\tufv_gkey,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tATD,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual Cycling_transnet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(equals(Carry_CHE_Kind,'ITV') && equals(isNull(Carry_CHE_Id),false()) && equals(isNull(t_carry_complete),false()) && (Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_DISCH')) ~> filter1\naggregate1 window(asc(Carry_CHE_Id, true),\n\tasc(t_carry_complete, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tCarry_CHE_Id_PREV = lag(Carry_CHE_Id),\n\t\tEvent_Type_Id_PREV = lag(Event_Type_Id),\n\t\tt_carry_complete_PREV = lag(t_carry_complete)) ~> window1\nwindow1 derive(Cycle_Type = iif(Carry_CHE_Id==Carry_CHE_Id_PREV && dayOfYear(t_carry_complete)==dayOfYear(t_carry_complete_PREV),\r\n(\r\niif(Event_Type_Id=='UNIT_LOAD',\r\niif(Event_Type_Id_PREV=='UNIT_LOAD','Half Load Cycle','Discharge to Load Cycle'),\r\niif(Event_Type_Id_PREV=='UNIT_DISCH','Half Discharge Cycle','Load to Discharge Cycle'))\r\n),\r\niif(Event_Type_Id=='UNIT_LOAD','Half Load Cycle','Half Discharge Cycle'))) ~> derivedColumn1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATD,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tCarry_CHE_Id_PREV,\n\t\tEvent_Type_Id_PREV,\n\t\tCycle_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dual_Cycling_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Carry_CHE_Kind,'ITV')) ~> Filter1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/dual_cycling',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dwell_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "dwell time of import full cntrs",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/moves') ~> source1",
						"source1 filter(Category_Id=='IMPRT'&&Freight_Kind_Id=='FCL'&&(Event_Type_Id=='UNIT_DISCH' || Event_Type_Id=='UNIT_DELIVER')) ~> filter1",
						"filter1 window(asc(Unit_Nbr, true),",
						"     asc(t_put, true),",
						"     Unit_Nbr_prev = lag(Unit_Nbr),",
						"          Event_Type_Id_prev = lag(Event_Type_Id),",
						"          t_put_prev = lag(t_put)) ~> window1",
						"window1 derive(Dwell_Time = iif(Unit_Nbr==Unit_Nbr_prev && Event_Type_Id=='UNIT_DELIVER' && Event_Type_Id_prev=='UNIT_DISCH',dayOfYear(t_put)-dayOfYear(t_put_prev),toInteger(null()))) ~> derivedColumn1",
						"filter3 derive(Dwell_Range = iif(Dwell_Time<=6, '0 to 6 Days', '> 6 Days')) ~> derivedColumn2",
						"derivedColumn1 filter(isNull(Dwell_Time)==false()) ~> filter3",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'gold/dwell',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dwell_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/moves') ~> source1",
						"source1 filter(Category_Id=='IMPRT'&&Freight_Kind_Id=='FCL'&&(Event_Type_Id=='UNIT_DISCH' || Event_Type_Id=='UNIT_DELIVER')) ~> filter1",
						"filter1 window(asc(Unit_Nbr, true),",
						"     asc(t_put, true),",
						"     Unit_Nbr_prev = lag(Unit_Nbr),",
						"          Event_Type_Id_prev = lag(Event_Type_Id),",
						"          t_put_prev = lag(t_put)) ~> window1",
						"window1 derive(Dwell_Time = iif(Unit_Nbr==Unit_Nbr_prev && Event_Type_Id=='UNIT_DELIVER' && Event_Type_Id_prev=='UNIT_DISCH',dayOfYear(t_put)-dayOfYear(t_put_prev),toInteger(null()))) ~> derivedColumn1",
						"filter3 derive(Dwell_Range = iif(Dwell_Time<=6, '0 to 6 Days', '> 6 Days')) ~> derivedColumn2",
						"derivedColumn1 filter(isNull(Dwell_Time)==false()) ~> filter3",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/dwell',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Dwell_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "dwell time of import full cntrs",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filter3"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/moves') ~> source1",
						"source1 filter(Category_Id=='IMPRT'&&Freight_Kind_Id=='FCL'&&(Event_Type_Id=='UNIT_DISCH' || Event_Type_Id=='UNIT_DELIVER')) ~> filter1",
						"filter1 window(asc(Unit_Nbr, true),",
						"     asc(t_put, true),",
						"     Unit_Nbr_prev = lag(Unit_Nbr),",
						"          Event_Type_Id_prev = lag(Event_Type_Id),",
						"          t_put_prev = lag(t_put)) ~> window1",
						"window1 derive(Dwell_Time = iif(Unit_Nbr==Unit_Nbr_prev && Event_Type_Id=='UNIT_DELIVER' && Event_Type_Id_prev=='UNIT_DISCH',dayOfYear(t_put)-dayOfYear(t_put_prev),toInteger(null()))) ~> derivedColumn1",
						"filter3 derive(Dwell_Range = iif(Dwell_Time<=6, '0 to 6 Days', '> 6 Days')) ~> derivedColumn2",
						"derivedColumn1 filter(isNull(Dwell_Time)==false()) ~> filter3",
						"derivedColumn2 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/dwell',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as integer,\n\t\tYARDID as string,\n\t\tFCYID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as long,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'malta',\n\tfolderPath: 'bronze/ecevents',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYARDID,\n\t\tFCYID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwin,\n\t\tstartDistance,\n\t\tworkAssignment,\n\t\tunitRef,\n\t\ttran_ID,\n\t\tlocType,\n\t\tlocID,\n\t\tlocSlot,\n\t\topsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocID,\n\t\tladen_LocSlot,\n\t\tEcEventTime,\n\t\tcheID,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'malta',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID = YARDID,\n\t\tFcyID = FCYID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "aggregateEcEventGkey"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as short,\n\t\tYARDID as string,\n\t\tFCYID as string,\n\t\tcheKind as string,\n\t\tcheShortName as string,\n\t\tcheID as short,\n\t\tEcEventTime as string,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as long,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nsource1 derive(EcEventTime = coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(EcEventTime,'.',3),right(EcEventTime, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(cheID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(EcEventTime,'.',3),right(EcEventTime, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(EcEventTime,'.',3),right(EcEventTime, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(EcEventTime,'.',3),right(EcEventTime, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\naggregateEcEventGkey alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID = YARDID,\n\t\tFcyID = FCYID,\n\t\tcheKind,\n\t\tcheName = cheShortName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregateEcEventGkey\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as short,\n\t\tYARDID as string,\n\t\tFCYID as string,\n\t\tcheKind as string,\n\t\tcheShortName as string,\n\t\tcheID as short,\n\t\tEcEventTime as string,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gti',\n\tfolderPath: 'bronze/ecevents',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(cheID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID = YARDID,\n\t\tFcyID = FCYID,\n\t\tcheKind,\n\t\tcheName = cheShortName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nSelect1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_SLPA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheShortName as string,\n\t\tcheID as short,\n\t\tEcEventTime as string,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as long,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'slpa',\n\tfolderPath: 'bronze/ecevents',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(cheID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = cheShortName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'slpa',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_Valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "removeDupEcEventGkey"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'valencia',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nremoveDupEcEventGkey alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> removeDupEcEventGkey\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as boolean,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as boolean,\n\t\tstartDistance as short,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gpa',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'haifa',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('kssp')\n}\nsource(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as string,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as boolean,\n\t\tstartDistance as short,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'kssp',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nderivedColumn1 derive(EcEventTime = toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = year(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tMonth = month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss')))) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwin,\n\t\tstartDistance,\n\t\tunitRef,\n\t\ttran_ID,\n\t\tlocType,\n\t\tlocID,\n\t\tlocSlot,\n\t\topsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocID,\n\t\tladen_LocSlot,\n\t\tEcEventTime,\n\t\tcheID,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nCSV derive(TimeStamp = substring(TimeStamp,1,23)) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as long,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mict',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "aggregate1",
							"description": "Aggregating data by 'ecEventGkey' producing columns 'yardGkey, YardID, FcyID, cheKind, cheName, cheID, EcEventTime, type, subType, typeDescription, fromCheIdName, ToCheIdName, unitIdName, powName, poolName, workQueue, travelDistance, moveKind, isTwinMove, startDistance, unitReference, tranId, locType, locId, locSlot, opsPosId, unladenLoctype, unladenLocid, unladenLocSlot, ladenLoctype, ladenLocid, ladenLocSlot, Year, Month, Week'"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as string,\n\t\tTimeStamp as string,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as string,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce( toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'yyyy/MM/dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\ttravelDistance = toInteger(travelDistance),\n\t\tstartDistance = toInteger(startDistance)) ~> DataTypeConversion\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as boolean,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheShortName as string,\n\t\tcheID as short,\n\t\tEcEventTime as string,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as long,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'pdports',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'MM/dd/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(cheID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'MM/dd/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'MM/dd/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(EcEventTime,'dd-MM-yy HH:mm:ss'),toTimestamp(EcEventTime,'dd.MM.yy HH:mm:ss'),toTimestamp(EcEventTime,'MM/dd/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(EcEventTime,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(EcEventTime,'dd/MM/yyyy HH:mm:ss'),toTimestamp(EcEventTime,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = cheShortName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Optimal',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_railCycleTime_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "events"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "rdscMoves"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "select1"
						},
						{
							"name": "filterRDSC"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/ecevents') ~> events\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves') ~> rdscMoves\nevents filter((FcyID=='GCT' && ( (cheKind =='ITV' && moveKind=='YARD' && typeDescription =='TYDR') || ( cheKind =='RTG' && (moveKind=='YARD' || moveKind=='DLVR') && (typeDescription =='LIFT' || typeDescription =='CMPL'||typeDescription =='DROP') ) ) )) ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(EcEventDate = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tEcEventTimeStr = toString(EcEventTime,'HH:mm:ss'),\n\t\tBlock = left(locSlot,3),\n\t\tunitIdName = rtrim(ltrim(unitIdName))) ~> DerivedColumn3\nSort1 window(asc(unitIdName, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\teventTypeDescription_PREV = lag(typeDescription),\n\t\teventTypeDescription_NXT = lead(typeDescription),\n\t\tunit_PREV = lag(unitIdName),\n\t\tunit_NXT = lead(unitIdName),\n\t\tcheKind_PREV = lag(cheKind),\n\t\tcheKind_NXT = lead(cheKind),\n\t\teventTypeDescription_NXT2 = lead(typeDescription,2),\n\t\tcheKind_NXT2 = lead(cheKind,2),\n\t\tunit_NXT2 = lead(unitIdName,2),\n\t\tTimestamp_NXT2 = lead(EcEventTime,2),\n\t\tCHE_ID_NXT2 = lead(cheID,2)) ~> Window1\nWindow1 derive(Cycle_Time = toDouble(case( (unitIdName==unit_NXT) && (typeDescription=='TYDR') && (cheKind_NXT=='RTG') && (eventTypeDescription_NXT=='DROP'||eventTypeDescription_NXT=='CMPL'), TimeStamp_NXT-EcEventTime,toLong(0)) /3600000 ),\n\t\tCycleTime2 = case( (unitIdName==unit_NXT) && (typeDescription=='TYDR') && (cheKind_NXT=='RTG') && (eventTypeDescription_NXT=='DROP'||eventTypeDescription_NXT=='CMPL'), TimeStamp_NXT-EcEventTime,toLong(0)),\n\t\tCycleTime_Minute = toDouble(case( (unitIdName==unit_NXT) && (typeDescription=='TYDR') && (cheKind_NXT=='RTG') && (eventTypeDescription_NXT=='DROP'||eventTypeDescription_NXT=='CMPL'), TimeStamp_NXT-EcEventTime,toLong(0)) /60000 )) ~> DerivedColumn4\nselect2 sort(asc(unitIdName, true),\n\tasc(EcEventTime, true)) ~> Sort1\nDerivedColumn4 filter(CycleTime2>0) ~> Filter7\nFilter7 alterRow(upsertIf(true())) ~> alterRow2\nrdscMoves select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tService_Id,\n\t\tt_fetch\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nselect1 filter((Facility_Id=='GCT' && Move_Kind=='RDSC' && Category_Id=='EXPRT' && Freight_Kind_Id=='FCL' && (Unit_Nbr=='MRKU7614004' || Unit_Nbr=='CAIU7987177' || Unit_Nbr=='TRHU4433395' || Unit_Nbr=='GLDU7308510')  )) ~> filterRDSC\nDerivedColumn3, derivedColumn1 join(unitIdName == Unit_Nbr\n\t&& EcEventTime >= eventStartTime\n\t&& EcEventTime <= maxEventTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> join1\njoin1 select(mapColumn(\n\t\tecEventGkey,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tunitIdName,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tEcEventDate,\n\t\tEcEventTimeStr,\n\t\tBlock,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tCarrier_Visit_Key,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tOOG_Flag,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tService_Id,\n\t\tt_fetch,\n\t\tmaxEventTime,\n\t\teventStartTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilterRDSC derive(maxEventTime = addDays(t_put,1),\n\t\teventStartTime = iif(isNull(t_fetch),t_put,t_fetch),\n\t\tufv_gkey = toLong(ufv_gkey),\n\t\tUnit_Nbr = ltrim(rtrim(Unit_Nbr))) ~> derivedColumn1\nalterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rdsc_cycle_time_test',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tFcyID,\n\t\tcheKind = cheKind_NXT2,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tunitIdName,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tEcEventDate,\n\t\tEcEventTimeStr,\n\t\tBlock,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tCarrier_Visit_Key,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tOOG_Flag,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tService_Id,\n\t\tt_fetch,\n\t\tmaxEventTime,\n\t\teventStartTime,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tunit_PREV,\n\t\tunit_NXT,\n\t\tcheKind_PREV,\n\t\tcheKind_NXT,\n\t\tCycle_Time,\n\t\tCycleTime2,\n\t\tCycleTime_Minute\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_railCycleTime_test_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "events"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "rdscMoves"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filterRDSC"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/ecevents') ~> events\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves') ~> rdscMoves\nevents filter((FcyID=='GCT' && ( (cheKind =='ITV' && typeDescription =='TYDR') || ( cheKind =='RTG' && (typeDescription =='CMPL'||typeDescription =='DROP') ) )  &&(unitIdName =='OOLU8572843'||unitIdName=='FSCU5045054' ||unitIdName=='TEMU8530430'))) ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(EcEventDate = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tEcEventTimeStr = toString(EcEventTime,'HH:mm:ss'),\n\t\tBlock = left(locSlot,3),\n\t\tunitIdName = rtrim(ltrim(unitIdName))) ~> DerivedColumn3\nSort1 window(asc(unitIdName, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\teventTypeDescription_PREV = lag(typeDescription),\n\t\teventTypeDescription_NXT = lead(typeDescription),\n\t\tunit_PREV = lag(unitIdName),\n\t\tunit_NXT = lead(unitIdName),\n\t\tcheKind_PREV = lag(cheKind),\n\t\tcheKind_NXT = lead(cheKind)) ~> Window1\nselect2 sort(asc(unitIdName, true),\n\tasc(EcEventTime, true)) ~> Sort1\nrdscMoves select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tService_Id,\n\t\tt_fetch,\n\t\tPOW\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nselect1 filter((Facility_Id=='GCT' && Move_Kind=='RDSC' && Category_Id=='EXPRT' && (Unit_Nbr =='OOLU8572843'|| Unit_Nbr=='FSCU5045054' || Unit_Nbr=='TEMU8530430') )) ~> filterRDSC\nDerivedColumn3, derivedColumn1 join(unitIdName == Unit_Nbr\n\t&& EcEventTime >= eventStartTime\n\t&& EcEventTime <= maxEventTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> join1\njoin1 select(mapColumn(\n\t\tecEventGkey,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\topsPosId,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tEcEventDate,\n\t\tEcEventTimeStr,\n\t\tBlock,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tOOG_Flag,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tService_Id,\n\t\tt_fetch,\n\t\tmaxEventTime,\n\t\teventStartTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilterRDSC derive(maxEventTime = addDays(t_put,1),\n\t\teventStartTime = iif(isNull(t_fetch),addDays(t_put,-1),t_fetch),\n\t\tufv_gkey = toLong(ufv_gkey),\n\t\tUnit_Nbr = ltrim(rtrim(Unit_Nbr))) ~> derivedColumn1\nWindow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rdsc_cycle_time_test',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as long,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'salalah',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Optimal',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as short,\n\t\tworkAssignment as double,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'tdt',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(EcEventTime = coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss')),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tcheID = toLong(CHE_ID),\n\t\tYear = iifNull(year(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tMonth = iifNull(month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0),\n\t\tWeek = iifNull(weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd.MM.yy HH:mm:ss'),toTimestamp(TimeStamp,'MM/dd/yyyy HH:mm:ss'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),0)) ~> DataTypeConversion\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName = CHE_Name,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype = eventType,\n\t\tsubType = eventSubType,\n\t\ttypeDescription = eventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName = unit,\n\t\tpowName = pow,\n\t\tpoolName = pool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove = isTwin,\n\t\tstartDistance,\n\t\tworkAssignmentId = workAssignment,\n\t\tunitReference = unitRef,\n\t\ttranId = tran_ID,\n\t\tlocType,\n\t\tlocId = locID,\n\t\tlocSlot,\n\t\topsPosId = opsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocid = unladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid = ladenLocID,\n\t\tladenLocSlot = laden_LocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EcEvents_transnet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('transnet')\n}\nsource(output(\n\t\tecEventGkey as string,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as string,\n\t\tTimeStamp as string,\n\t\teventType as short,\n\t\teventSubType as short,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwin as boolean,\n\t\tstartDistance as short,\n\t\tunitRef as string,\n\t\ttran_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/ecevents/load','bronze/ecevents/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'transnet',\n\tfolderPath: 'bronze/ecevents/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nderivedColumn1 derive(EcEventTime = toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tecEventGkey = toInteger(ecEventGkey),\n\t\tcheID = toInteger(CHE_ID),\n\t\tYear = year(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tMonth = month(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd-MM-yy HH:mm:ss'),toTimestamp(TimeStamp,'dd-MM-yyyy HH:mm'),toTimestamp(TimeStamp,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(TimeStamp,'dd/MM/yyyy HH:mm:ss')))) ~> DataTypeConversion\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDataTypeConversion select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwin,\n\t\tstartDistance,\n\t\tunitRef,\n\t\ttran_ID,\n\t\tlocType,\n\t\tlocID,\n\t\tlocSlot,\n\t\topsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocID,\n\t\tladen_LocSlot,\n\t\tEcEventTime,\n\t\tcheID,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 filter(isNull(ecEventGkey)==false()) ~> Filter1\nCSV derive(TimeStamp = substring(TimeStamp,1,23)) ~> derivedColumn1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'silver/ecevents',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwin,\n\t\tstartDistance,\n\t\tunitRef,\n\t\ttran_ID,\n\t\tlocType,\n\t\tlocID,\n\t\tlocSlot,\n\t\topsPosID,\n\t\tunladenLoctype,\n\t\tunladenLocID,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocID,\n\t\tladen_LocSlot,\n\t\tEcEventTime,\n\t\tcheID,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('valencia')\n}\nsource(output(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as string,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(TIME_STAMP = toTimestamp(time_stamp,'dd.MM.yy HH:mm:ss'),\n\t\tYear = year(toTimestamp(time_stamp,'dd.MM.yy HH:mm:ss')),\n\t\tMonth = month(toTimestamp(time_stamp,'dd.MM.yy HH:mm:ss')),\n\t\tWeek = weekOfYear(toTimestamp(time_stamp,'dd.MM.yy HH:mm:ss'))) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(GKEY = gkey),\n\teach(match(name!='GKEY'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/failtodeck',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['GKEY'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('eurogatectb')\n}\nsource(output(\n\t\tGKEY as long,\n\t\tUYV_GKEY as long,\n\t\tUNIT_ID as string,\n\t\tTIME_STAMP as string,\n\t\tDECKING_TYPE as string,\n\t\tNODE_ID as string,\n\t\tYARD as short,\n\t\tFROM_POS_LOCTYPE as string,\n\t\tFROM_POS_LOCID as string,\n\t\tFROM_POS_LOC_GKEY as long,\n\t\tFROM_POS_SLOT as string,\n\t\tFROM_POS_NAME as string,\n\t\tFROM_POS_BIN as integer,\n\t\tFROM_POS_TIER as short,\n\t\tTO_POS_LOCTYPE as string,\n\t\tTO_POS_LOCID as string,\n\t\tTO_POS_LOC_GKEY as short,\n\t\tTO_POS_SLOT as string,\n\t\tTO_POS_NAME as string,\n\t\tTO_POS_BIN as short,\n\t\tTO_POS_TIER as boolean,\n\t\tTOTAL_SCORE as short,\n\t\tEXECUTION_TIME as short,\n\t\tDETAILS as string,\n\t\tPHASE as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/failtodeck/load','bronze/failtodeck/archive'],\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(TIME_STAMP = toTimestamp(TIME_STAMP,'dd.MM.yy HH:mm:ss'),\n\t\tYear = year(toTimestamp(TIME_STAMP,'dd.MM.yy HH:mm:ss')),\n\t\tMonth = month(toTimestamp(TIME_STAMP,'dd.MM.yy HH:mm:ss')),\n\t\tWeek = weekOfYear(toTimestamp(TIME_STAMP,'dd.MM.yy HH:mm:ss'))) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(GKEY),\n\teach(match(name!='GKEY'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/failtodeck',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['GKEY'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_MTY')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "aggregate2"
						}
					],
					"script": "parameters{\n\tcustomer as string ('valencia')\n}\nsource(output(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as timestamp,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/failtodeck') ~> CSV\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves') ~> source1\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nsource1 filter(Freight_Kind_Id=='MTY') ~> filter1\nCSV, aggregate2 join(unit_id == Unit_Nbr\n\t&& time_stamp >= ATA\n\t&& time_stamp <= ATD,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> join1\njoin1 select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nfilter1 select(mapColumn(\n\t\tUnit_Nbr,\n\t\tFreight_Kind_Id,\n\t\tATA,\n\t\tATD\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 aggregate(groupBy(Unit_Nbr,\n\t\tFreight_Kind_Id,\n\t\tATA,\n\t\tATD),\n\teach(match(name!='Unit_Nbr'&&name!='ATD'&&name!='ATA'&&name!='Freight_Kind_Id'), $$ = first($$))) ~> aggregate2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/failtodeck_mty',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_MTY_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "AlterRow1"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tGKEY as long,\n\t\tCATEGORY as string,\n\t\tFREIGHT_KIND as string,\n\t\tBASIC_LENGTH as string,\n\t\tEQUIPMENT_TYPE_ID as string,\n\t\tISO_GROUP as string,\n\t\tUNIT_ID as string,\n\t\tTIME_STAMP as timestamp,\n\t\tDECKING_TYPE as string,\n\t\tNODE_ID as string,\n\t\tYARD as string,\n\t\tFROM_POS_LOCTYPE as string,\n\t\tFROM_POS_LOCID as string,\n\t\tFROM_POS_LOC_GKEY as string,\n\t\tFROM_POS_SLOT as string,\n\t\tFROM_POS_NAME as string,\n\t\tFROM_POS_BIN as integer,\n\t\tFROM_POS_TIER as string,\n\t\tTO_POS_LOCTYPE as string,\n\t\tTO_POS_LOCID as string,\n\t\tTO_POS_LOC_GKEY as string,\n\t\tTO_POS_SLOT as string,\n\t\tTO_POS_NAME as string,\n\t\tTO_POS_BIN as string,\n\t\tTO_POS_TIER as string,\n\t\tTOTAL_SCORE as short,\n\t\tEXECUTION_TIME as short,\n\t\tDETAILS as string,\n\t\tPHASE as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/failtodeck') ~> CSV\nselect1 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 select(skipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nCSV filter(FREIGHT_KIND=='MTY') ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/failtodeck_mty',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_bySvc_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ftd joined to moves",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "mvs"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as long,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as long,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as string,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as long,",
						"          dist_start as long,",
						"          Twin_Fetch as boolean,",
						"          Twin_Carry as boolean,",
						"          Twin_Put as boolean,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          Restow_Reason as string,",
						"          POW as string,",
						"          ufv_gkey as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          Requires_Power_Flag as boolean,",
						"          OOG_Flag as boolean,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as long,",
						"          Complex_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ETA as string,",
						"          ETD as string,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as string,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'silver/moves') ~> mvs",
						"mvs select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          POW,",
						"          ufv_gkey,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          ATD,",
						"          Carrier_Visit_Id,",
						"          Carrier_Mode,",
						"          Service_Id,",
						"          Service_Name,",
						"          Carrier_Name,",
						"          Year,",
						"          Month,",
						"          Week,",
						"          MvDt = t_put",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> select1",
						"select1 cast(output(",
						"          MvDt as date",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'gold/failtodecksvc',",
						"     truncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tcategory as string,\n\t\tfreight_Kind as string,\n\t\tbasic_length as string,\n\t\tEquipment_Type_Id as string,\n\t\tiso_group as string,\n\t\tgkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as string,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as short,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as integer,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as short,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tphase as string,\n\t\trequires_power as short,\n\t\tufv_gkey as integer,\n\t\tis_oog as short,\n\t\tHazardous_Flag as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/failtodeck/load','bronze/failtodeck/archive'],\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(time_stamp = toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tYear = year(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tMonth = month(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tWeek = weekOfYear(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tgkey = toLong(gkey),\n\t\tufv_gkey = toLong(ufv_gkey)) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nselect1 aggregate(groupBy(gkey),\n\teach(match(name!='gkey'), $$ = first($$))) ~> aggregate1\nDerivedColumn1 select(mapColumn(\n\t\tcategory,\n\t\tfreight_Kind,\n\t\tbasic_length,\n\t\tEquipment_Type_Id,\n\t\tiso_group,\n\t\tgkey,\n\t\tunit_id,\n\t\ttime_stamp,\n\t\tdecking_type,\n\t\tnode_id,\n\t\tyard,\n\t\tfrom_pos_loctype,\n\t\tfrom_pos_locid,\n\t\tfrom_pos_loc_gkey,\n\t\tfrom_pos_slot,\n\t\tfrom_pos_name,\n\t\tfrom_pos_bin,\n\t\tfrom_pos_tier,\n\t\tto_pos_loctype,\n\t\tto_pos_locid,\n\t\tto_pos_loc_gkey,\n\t\tto_pos_slot,\n\t\tto_pos_name,\n\t\tto_pos_bin,\n\t\tto_pos_tier,\n\t\ttotal_score,\n\t\texecution_time,\n\t\tphase,\n\t\trequires_power,\n\t\tufv_gkey,\n\t\tis_oog,\n\t\tHazardous_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/failtodeck',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tgkey,\n\t\tcategory,\n\t\tfreight_Kind,\n\t\tbasic_length,\n\t\tEquipment_Type_Id,\n\t\tiso_group,\n\t\tunit_id,\n\t\ttime_stamp,\n\t\tdecking_type,\n\t\tnode_id,\n\t\tyard,\n\t\tfrom_pos_loctype,\n\t\tfrom_pos_locid,\n\t\tfrom_pos_loc_gkey,\n\t\tfrom_pos_slot,\n\t\tfrom_pos_name,\n\t\tfrom_pos_bin,\n\t\tfrom_pos_tier,\n\t\tto_pos_loctype,\n\t\tto_pos_locid,\n\t\tto_pos_loc_gkey,\n\t\tto_pos_slot,\n\t\tto_pos_name,\n\t\tto_pos_bin,\n\t\tto_pos_tier,\n\t\ttotal_score,\n\t\texecution_time,\n\t\tphase,\n\t\trequires_power,\n\t\tufv_gkey,\n\t\tis_oog,\n\t\tHazardous_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tCATEGORY as string,\n\t\tFREIGHT_KIND as string,\n\t\tBASIC_LENGHT as string,\n\t\tEQUIPMENT_TYPE_ID as string,\n\t\tISO_GROUP as string,\n\t\tGKEY as long,\n\t\tUNIT_ID as string,\n\t\tTIME_STAMP as string,\n\t\tDECKING_TYPE as string,\n\t\tNODE_ID as string,\n\t\tYARD as integer,\n\t\tFROM_POS_LOCTYPE as string,\n\t\tFROM_POS_LOCID as string,\n\t\tFROM_POS_LOC_GKEY as long,\n\t\tFROM_POS_SLOT as string,\n\t\tFROM_POS_NAME as string,\n\t\tFROM_POS_BIN as long,\n\t\tFROM_POS_TIER as short,\n\t\tTO_POS_LOCTYPE as string,\n\t\tTO_POS_LOCID as string,\n\t\tTO_POS_LOC_GKEY as integer,\n\t\tTO_POS_SLOT as string,\n\t\tTO_POS_NAME as string,\n\t\tTO_POS_BIN as string,\n\t\tTO_POS_TIER as string,\n\t\tTOTAL_SCORE as short,\n\t\tEXECUTION_TIME as short,\n\t\tDETAILS as string,\n\t\tPHASE as string,\n\t\tREQUIRES_POWER as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/failtodeck/load','bronze/failtodeck/archive'],\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(TIME_STAMP = toTimestamp(TIME_STAMP,'MM/dd/yyyy HH:mm'),\n\t\tYear = year(toTimestamp(TIME_STAMP,'MM/dd/yyyy HH:mm')),\n\t\tMonth = month(toTimestamp(TIME_STAMP,'MM/dd/yyyy HH:mm')),\n\t\tWeek = weekOfYear(toTimestamp(TIME_STAMP,'MM/dd/yyyy HH:mm'))) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nselect1 aggregate(groupBy(GKEY),\n\teach(match(name!='GKEY'), $$ = first($$))) ~> aggregate1\nDerivedColumn1 select(mapColumn(\n\t\tCATEGORY,\n\t\tFREIGHT_KIND,\n\t\tBASIC_LENGTH = BASIC_LENGHT,\n\t\tEQUIPMENT_TYPE_ID,\n\t\tISO_GROUP,\n\t\tGKEY,\n\t\tUNIT_ID,\n\t\tTIME_STAMP,\n\t\tDECKING_TYPE,\n\t\tNODE_ID,\n\t\tYARD,\n\t\tFROM_POS_LOCTYPE,\n\t\tFROM_POS_LOCID,\n\t\tFROM_POS_LOC_GKEY,\n\t\tFROM_POS_SLOT,\n\t\tFROM_POS_NAME,\n\t\tFROM_POS_BIN,\n\t\tFROM_POS_TIER,\n\t\tTO_POS_LOCTYPE,\n\t\tTO_POS_LOCID,\n\t\tTO_POS_LOC_GKEY,\n\t\tTO_POS_SLOT,\n\t\tTO_POS_NAME,\n\t\tTO_POS_BIN,\n\t\tTO_POS_TIER,\n\t\tTOTAL_SCORE,\n\t\tEXECUTION_TIME,\n\t\tDETAILS,\n\t\tPHASE,\n\t\tREQUIRES_POWER,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/failtodeck',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['GKEY'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tGKEY,\n\t\tCATEGORY,\n\t\tFREIGHT_KIND,\n\t\tBASIC_LENGTH,\n\t\tEQUIPMENT_TYPE_ID,\n\t\tISO_GROUP,\n\t\tUNIT_ID,\n\t\tTIME_STAMP,\n\t\tDECKING_TYPE,\n\t\tNODE_ID,\n\t\tYARD,\n\t\tFROM_POS_LOCTYPE,\n\t\tFROM_POS_LOCID,\n\t\tFROM_POS_LOC_GKEY,\n\t\tFROM_POS_SLOT,\n\t\tFROM_POS_NAME,\n\t\tFROM_POS_BIN,\n\t\tFROM_POS_TIER,\n\t\tTO_POS_LOCTYPE,\n\t\tTO_POS_LOCID,\n\t\tTO_POS_LOC_GKEY,\n\t\tTO_POS_SLOT,\n\t\tTO_POS_NAME,\n\t\tTO_POS_BIN,\n\t\tTO_POS_TIER,\n\t\tTOTAL_SCORE,\n\t\tEXECUTION_TIME,\n\t\tDETAILS,\n\t\tPHASE,\n\t\tREQUIRES_POWER,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('mict')\n}\nsource(output(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as string,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/failtodeck','bronze/failtodeck/archive'],\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(time_stamp = toTimestamp(time_stamp,'M/d/yyyy hh:mm:ss a'),\n\t\tYear = year(toTimestamp(time_stamp,'M/d/yyyy hh:mm:ss a')),\n\t\tMonth = month(toTimestamp(time_stamp,'M/d/yyyy hh:mm:ss a')),\n\t\tWeek = weekOfYear(toTimestamp(time_stamp,'M/d/yyyy hh:mm:ss a'))) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(gkey),\n\teach(match(name!='gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as timestamp,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/failtodeck',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tgkey,\n\t\tuyv_gkey,\n\t\tunit_id,\n\t\ttime_stamp,\n\t\tdecking_type,\n\t\tnode_id,\n\t\tyard,\n\t\tfrom_pos_loctype,\n\t\tfrom_pos_locid,\n\t\tfrom_pos_loc_gkey,\n\t\tfrom_pos_slot,\n\t\tfrom_pos_name,\n\t\tfrom_pos_bin,\n\t\tfrom_pos_tier,\n\t\tto_pos_loctype,\n\t\tto_pos_locid,\n\t\tto_pos_loc_gkey,\n\t\tto_pos_slot,\n\t\tto_pos_name,\n\t\tto_pos_bin,\n\t\tto_pos_tier,\n\t\ttotal_score,\n\t\texecution_time,\n\t\tdetails,\n\t\tphase,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FailToDeck_valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('valencia')\n}\nsource(output(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as string,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/failtodeck','bronze/failtodeck/archive'],\n\tformat: 'delimited',\n\tfileSystem: ($customer),\n\tfolderPath: 'bronze/failtodeck',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> CSV\nCSV derive(time_stamp = toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tYear = year(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tMonth = month(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tWeek = weekOfYear(toTimestamp(time_stamp,'yyyy-MM-dd HH:mm:ss.SSS'))) ~> DerivedColumn1\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(gkey),\n\teach(match(name!='gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tgkey as integer,\n\t\tuyv_gkey as integer,\n\t\tunit_id as string,\n\t\ttime_stamp as timestamp,\n\t\tdecking_type as string,\n\t\tnode_id as string,\n\t\tyard as string,\n\t\tfrom_pos_loctype as string,\n\t\tfrom_pos_locid as string,\n\t\tfrom_pos_loc_gkey as integer,\n\t\tfrom_pos_slot as string,\n\t\tfrom_pos_name as string,\n\t\tfrom_pos_bin as string,\n\t\tfrom_pos_tier as short,\n\t\tto_pos_loctype as string,\n\t\tto_pos_locid as string,\n\t\tto_pos_loc_gkey as string,\n\t\tto_pos_slot as string,\n\t\tto_pos_name as string,\n\t\tto_pos_bin as string,\n\t\tto_pos_tier as string,\n\t\ttotal_score as short,\n\t\texecution_time as short,\n\t\tdetails as string,\n\t\tphase as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/failtodeck',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['GKEY'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tgkey,\n\t\tuyv_gkey,\n\t\tunit_id,\n\t\ttime_stamp,\n\t\tdecking_type,\n\t\tnode_id,\n\t\tyard,\n\t\tfrom_pos_loctype,\n\t\tfrom_pos_locid,\n\t\tfrom_pos_loc_gkey,\n\t\tfrom_pos_slot,\n\t\tfrom_pos_name,\n\t\tfrom_pos_bin,\n\t\tfrom_pos_tier,\n\t\tto_pos_loctype,\n\t\tto_pos_locid,\n\t\tto_pos_loc_gkey,\n\t\tto_pos_slot,\n\t\tto_pos_name,\n\t\tto_pos_bin,\n\t\tto_pos_tier,\n\t\ttotal_score,\n\t\texecution_time,\n\t\tdetails,\n\t\tphase,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GMPH')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Event_Type_Id==\"UNIT_DISCH\" || Event_Type_Id == \"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\", iifNull(t_put,t_carry_complete),iifNull(t_fetch,t_discharge))) ~> DerivedColumn1\nDerivedColumn1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carrier_Visit_Key,\n\t\tpow,\n\t\tDate),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Date),0),\n\t\tMonth = iifNull(month(Date),0),\n\t\tWeek = iifNull(weekOfYear(Date),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/qc_gmph',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key','pow','Date'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GMPH_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select3"
						},
						{
							"name": "aggregate2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/vessel_visits') ~> source2\nsource(output(\n\t\tdate_of_gang as date,\n\t\tGang as short,\n\t\tCall_Sign as string,\n\t\tVessel_name as string,\n\t\tImp_Voy as string,\n\t\tExp_Voy as string,\n\t\tQuay_Crane as short,\n\t\tvessel_Ops as string,\n\t\tZeile as short,\n\t\tCategory as string,\n\t\tCategory_description as string,\n\t\tSite as string,\n\t\tID as integer,\n\t\tvon_Call_Sign as string,\n\t\t{von_Brücke} as short,\n\t\tTeam as string,\n\t\tCode as string,\n\t\tStart as string,\n\t\tStop as string,\n\t\tAccounting as string,\n\t\tAktiv_Stunden as double,\n\t\tZeitsteuerung as string,\n\t\tVerz as string,\n\t\tLabour_No as integer,\n\t\tDuration as double,\n\t\tTDR as string,\n\t\tOperation_Report as integer,\n\t\tSystem as string,\n\t\tReise as integer,\n\t\taktiv_von as string,\n\t\taktiv_bis as string,\n\t\tStatus as string,\n\t\tStapler_B as boolean,\n\t\tStd_Stapler_B as boolean,\n\t\t{Letzte_Änderung} as string,\n\t\tVA as short,\n\t\tAR as short,\n\t\tCB as boolean,\n\t\tVC as short,\n\t\tZM as boolean,\n\t\tST as boolean,\n\t\tRS as boolean,\n\t\tSpr as short,\n\t\tStd_VA as double,\n\t\tStd_AR as double,\n\t\tStd_CB as double,\n\t\tStd_VC as double,\n\t\tStd_ZM as boolean,\n\t\tStd_RS as boolean,\n\t\tST_Std as boolean,\n\t\tStd_Spr as double,\n\t\tBemerkung as string,\n\t\tBrutto_Zeit as short,\n\t\tNetto_Zeit as boolean,\n\t\tStammcode as string,\n\t\tTerminal as string,\n\t\tDokument_Nr as boolean,\n\t\tnew_category as string,\n\t\tdesription_of_activity as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/delays') ~> source3\nsource1 filter(Event_Type_Id==\"UNIT_DISCH\" || Event_Type_Id == \"UNIT_LOAD\") ~> Filter1\nFilter1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id = source1@Facility_Id,\n\t\tComplex_Id = source1@Complex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA = source1@ATA,\n\t\tATD = source1@ATD,\n\t\tRehandles,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tOperator_Line_Id,\n\t\tOperator_Line_Name,\n\t\tService_Name,\n\t\tVessel_Id,\n\t\tCarrier_Name,\n\t\tVessel_Class,\n\t\tVessel_Classification,\n\t\tVisit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\", iifNull(t_put,t_carry_complete),iifNull(t_fetch,t_discharge))) ~> DerivedColumn1\nDerivedColumn1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn6 derive(Shift_Start_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','12:00:00')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','18:00:00')),\r\n                toTimestamp(concat(toString(subDays(Date,1)),' ','24:00:00'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','14:00:00')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','22:00:00')),\r\n\t\t\t\ttoTimestamp(concat(toString(subDays(Date,1)),' ','22:00:00')))))),\n\t\tShift_End_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','11:59:59')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','17:59:59')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','23:59:59')),\r\n                toTimestamp(concat(toString(Date),' ','05:59:59'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','13:59:59')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','21:59:59')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(addDays(Date,1)),' ','05:59:59')),\r\n\t\t\t\ttoTimestamp(concat(toString(Date),' ','05:59:59'))))))) ~> DerivedColumn3\nDerivedColumn5 aggregate(groupBy(pow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nFilter4 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Shift_Date),0),\n\t\tMonth = iifNull(month(Shift_Date),0),\n\t\tWeek = iifNull(weekOfYear(Shift_Date),0),\n\t\tPow_No = toInteger(iif(left(pow,2)=='SK',substring(pow, 3),iif(left(pow,1)=='M',substring(pow, 2),'0')))) ~> DerivedColumn4\nDerivedColumn3 derive(Shift = iif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('06:00:00'),1,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('14:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('12:00:00'),2,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('22:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> DerivedColumn5\nDerivedColumn2 derive(Day_Of_Week = dayOfWeek(iif(Time<toString('06:00:00'),subDays(Date,1),Date)),\n\t\tShift_Date = iif(Time<toString('06:00:00'),subDays(Date,1),Date)) ~> DerivedColumn6\nsource3 filter(Code=='BKO' || Code=='MTG'|| Code=='OFF'||Code=='AIT'||Code=='BBK'||Code=='LBR'||Code=='AIL' || Code=='COS'|| Code=='DTW'||Code=='INC'||Code=='LCA'||Code=='MTW'\r\n|| Code=='OTL'||Code=='WCC'||Code=='WEA'||Code=='WTG'||Code=='WVL') ~> Filter3\nAggregate1 filter(pow!='') ~> Filter4\nFilter3 derive(Start_datetime = toTimestamp(concat(toString(date_of_gang),' ',Start)),\n\t\tStop_datetime = iif(Stop<Start,toTimestamp(concat(toString(addDays(date_of_gang,1)),' ',Stop)),toTimestamp(concat(toString(date_of_gang),' ',Stop)))) ~> DerivedColumn7\nFilter5, Select2 join(Pow_No == Quay_Crane\n\t&& First_Lift <= Start_datetime\n\t&& Last_Lift >= Stop_datetime,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join2\nDerivedColumn7 derive(Delay = Stop_datetime-Start_datetime) ~> DerivedColumn8\naggregate2 derive(Final_WorkTime = WorkTime-iifNull(Delay,0)) ~> DerivedColumn9\nDerivedColumn8 select(mapColumn(\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn4 filter(Pow_No!=0) ~> Filter5\nJoin2 select(mapColumn(\n\t\tpow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear = DerivedColumn4@Year,\n\t\tMonth = DerivedColumn4@Month,\n\t\tWeek = DerivedColumn4@Week,\n\t\tPow_No,\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 aggregate(groupBy(pow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tPow_No),\n\tDelay = sum(Delay)) ~> aggregate2\nDerivedColumn9 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/GMPH',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GMPH_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select3"
						},
						{
							"name": "aggregate2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/vessel_visits') ~> source2\nsource(output(\n\t\tdate_of_gang as date,\n\t\tGang as short,\n\t\tCall_Sign as string,\n\t\tVessel_name as string,\n\t\tImp_Voy as string,\n\t\tExp_Voy as string,\n\t\tQuay_Crane as short,\n\t\tvessel_Ops as string,\n\t\tZeile as short,\n\t\tCategory as string,\n\t\tCategory_description as string,\n\t\tSite as string,\n\t\tID as integer,\n\t\tvon_Call_Sign as string,\n\t\t{von_Brücke} as short,\n\t\tTeam as string,\n\t\tCode as string,\n\t\tStart as string,\n\t\tStop as string,\n\t\tAccounting as string,\n\t\tAktiv_Stunden as double,\n\t\tZeitsteuerung as string,\n\t\tVerz as string,\n\t\tLabour_No as integer,\n\t\tDuration as double,\n\t\tTDR as string,\n\t\tOperation_Report as integer,\n\t\tSystem as string,\n\t\tReise as integer,\n\t\taktiv_von as string,\n\t\taktiv_bis as string,\n\t\tStatus as string,\n\t\tStapler_B as boolean,\n\t\tStd_Stapler_B as boolean,\n\t\t{Letzte_Änderung} as string,\n\t\tVA as short,\n\t\tAR as short,\n\t\tCB as boolean,\n\t\tVC as short,\n\t\tZM as boolean,\n\t\tST as boolean,\n\t\tRS as boolean,\n\t\tSpr as short,\n\t\tStd_VA as double,\n\t\tStd_AR as double,\n\t\tStd_CB as double,\n\t\tStd_VC as double,\n\t\tStd_ZM as boolean,\n\t\tStd_RS as boolean,\n\t\tST_Std as boolean,\n\t\tStd_Spr as double,\n\t\tBemerkung as string,\n\t\tBrutto_Zeit as short,\n\t\tNetto_Zeit as boolean,\n\t\tStammcode as string,\n\t\tTerminal as string,\n\t\tDokument_Nr as boolean,\n\t\tnew_category as string,\n\t\tdesription_of_activity as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/delays') ~> source3\nsource1 filter(Event_Type_Id==\"UNIT_DISCH\" || Event_Type_Id == \"UNIT_LOAD\") ~> Filter1\nFilter1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id = source1@Facility_Id,\n\t\tComplex_Id = source1@Complex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA = source1@ATA,\n\t\tATD = source1@ATD,\n\t\tRehandles,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tOperator_Line_Id,\n\t\tOperator_Line_Name,\n\t\tService_Name,\n\t\tVessel_Id,\n\t\tCarrier_Name,\n\t\tVessel_Class,\n\t\tVessel_Classification,\n\t\tVisit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\", iifNull(t_put,t_carry_complete),iifNull(t_fetch,t_discharge))) ~> DerivedColumn1\nDerivedColumn1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn6 derive(Shift_Start_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','12:00:00')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','18:00:00')),\r\n                toTimestamp(concat(toString(subDays(Date,1)),' ','24:00:00'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','14:00:00')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','22:00:00')),\r\n\t\t\t\ttoTimestamp(concat(toString(subDays(Date,1)),' ','22:00:00')))))),\n\t\tShift_End_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','11:59:59')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','17:59:59')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','23:59:59')),\r\n                toTimestamp(concat(toString(Date),' ','05:59:59'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','13:59:59')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','21:59:59')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(addDays(Date,1)),' ','05:59:59')),\r\n\t\t\t\ttoTimestamp(concat(toString(Date),' ','05:59:59'))))))) ~> DerivedColumn3\nDerivedColumn5 aggregate(groupBy(pow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nFilter4 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Shift_Date),0),\n\t\tMonth = iifNull(month(Shift_Date),0),\n\t\tWeek = iifNull(weekOfYear(Shift_Date),0),\n\t\tPow_No = toInteger(iif(left(pow,2)=='SK',substring(pow, 3),iif(left(pow,1)=='M',substring(pow, 2),'0')))) ~> DerivedColumn4\nDerivedColumn3 derive(Shift = iif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('06:00:00'),1,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('14:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('12:00:00'),2,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('22:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> DerivedColumn5\nDerivedColumn2 derive(Day_Of_Week = dayOfWeek(iif(Time<toString('06:00:00'),subDays(Date,1),Date)),\n\t\tShift_Date = iif(Time<toString('06:00:00'),subDays(Date,1),Date)) ~> DerivedColumn6\nsource3 filter(Code=='BKO' || Code=='MTG'|| Code=='OFF'||Code=='AIT'||Code=='BBK'||Code=='LBR'||Code=='AIL' || Code=='COS'|| Code=='DTW'||Code=='INC'||Code=='LCA'||Code=='MTW'\r\n|| Code=='OTL'||Code=='WCC'||Code=='WEA'||Code=='WTG'||Code=='WVL') ~> Filter3\nAggregate1 filter(pow!='') ~> Filter4\nFilter3 derive(Start_datetime = toTimestamp(concat(toString(date_of_gang),' ',Start)),\n\t\tStop_datetime = iif(Stop<Start,toTimestamp(concat(toString(addDays(date_of_gang,1)),' ',Stop)),toTimestamp(concat(toString(date_of_gang),' ',Stop)))) ~> DerivedColumn7\nFilter5, Select2 join(Pow_No == Quay_Crane\n\t&& First_Lift <= Start_datetime\n\t&& Last_Lift >= Stop_datetime,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join2\nDerivedColumn7 derive(Delay = Stop_datetime-Start_datetime) ~> DerivedColumn8\naggregate2 derive(Final_WorkTime = WorkTime-iifNull(Delay,0)) ~> DerivedColumn9\nDerivedColumn8 select(mapColumn(\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn4 filter(Pow_No!=0) ~> Filter5\nJoin2 select(mapColumn(\n\t\tpow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear = DerivedColumn4@Year,\n\t\tMonth = DerivedColumn4@Month,\n\t\tWeek = DerivedColumn4@Week,\n\t\tPow_No,\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 aggregate(groupBy(pow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tPow_No),\n\tDelay = sum(Delay)) ~> aggregate2\nDerivedColumn9 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/GMPH',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/General Housekeeping')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: ($customer),\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 derive(Yard_Move = iif(Event_Type_Id=='UNIT_YARD_MOVE' || Event_Type_Id=='UNIT_PAYLOAD_YARD_MOVE', 1, 0),\n\t\tVessel_Move = iif(Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_PAYLOAD_LOAD', 1, 0),\n\t\tRail_Move = iif(Event_Type_Id=='UNIT_RAMP', 1, 0),\n\t\tDeliver_Move = iif(Event_Type_Id=='UNIT_DELIVER' || Event_Type_Id=='UNIT_PAYLOAD_DELIVER', 1, 0)) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tWeek,\n\t\tYear,\n\t\tMonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: '$customer',\n\tfolderPath: 'gold/general_housekeeping',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/General Housekeeping_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('eurogatectb')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 derive(Yard_Move = iif(Event_Type_Id=='UNIT_YARD_MOVE' || Event_Type_Id=='UNIT_PAYLOAD_YARD_MOVE', 1, 0),\n\t\tVessel_Move = iif(Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_PAYLOAD_LOAD', 1, 0),\n\t\tRail_Move = iif(Event_Type_Id=='UNIT_RAMP', 1, 0),\n\t\tDeliver_Move = iif(Event_Type_Id=='UNIT_DELIVER' || Event_Type_Id=='UNIT_PAYLOAD_DELIVER', 1, 0)) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tWeek,\n\t\tYear,\n\t\tMonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/general_housekeeping',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/General Housekeeping_valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('valencia')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: ($customer),\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 derive(Yard_Move = iif(Event_Type_Id=='UNIT_YARD_MOVE' || Event_Type_Id=='UNIT_PAYLOAD_YARD_MOVE', 1, 0),\n\t\tVessel_Move = iif(Event_Type_Id=='UNIT_LOAD' || Event_Type_Id=='UNIT_PAYLOAD_LOAD', 1, 0),\n\t\tRail_Move = iif(Event_Type_Id=='UNIT_RAMP', 1, 0),\n\t\tDeliver_Move = iif(Event_Type_Id=='UNIT_DELIVER' || Event_Type_Id=='UNIT_PAYLOAD_DELIVER', 1, 0)) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tWeek,\n\t\tYear,\n\t\tMonth\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/general_housekeeping',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "for TT Productivity report",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_transnet_ctct')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "for TT Productivity report",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL' && FcyID == 'CTCT') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV'&& FcyID == 'CTCT') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'gold/itv_ecevents_ctct',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'gold/itv_workhours_ctct',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV EcEvents_valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "ITV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='ITV' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'ITV') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/itv_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> ITV\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/itv_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nFilter1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_SC')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/vessel_visits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'SC') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nAggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/laden_unladen',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_fromMoves_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "carry and start distance respectively on  ITV moves",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "carry and start distance respectively on  ITV moves",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Laden_Unladen_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as integer,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/vesselvisits') ~> source2\nSelect1 filter(equals(Carry_CHE_Kind,'ITV') && (equals(Event_Type_Id,'UNIT_LOAD') || equals(Event_Type_Id, 'UNIT_DISCH'))) ~> Filter1\nJoin1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tmve_gkey,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tUnladen = dist_start,\n\t\tLaden = dist_carry,\n\t\tCarrier_Name,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nsource1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nFilter1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/laden_unladen',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "select2"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as short,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as string,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string,\n\t\t{_c55} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'arica',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nSelect1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nselect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nCSV select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id},\n\t\t{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{   } as short,\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as short,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as short,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as short,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as short,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as string,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as string,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as long,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'bronze/vessel_visits/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'dd.MM.yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_carry_complete,'.',3),right(t_carry_complete, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_put,'.',3),right(t_put, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_fetch,'.',3),right(t_fetch, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_discharge,'.',3),right(t_discharge, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_put,'.',3),right(t_put, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_put,'.',3),right(t_put, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_put,'.',3),right(t_put, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_dispatch,'.',3),right(t_dispatch, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_carry_dispatch,'.',3),right(t_carry_dispatch, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_carry_fetch_ready,'.',3),right(t_carry_fetch_ready, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(t_carry_put_ready,'.',3),right(t_carry_put_ready, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(ATD,'.',3),right(ATD, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(concatWS(' ',substringIndex(ATA,'.',3),right(ATA, 2)),'dd-MMM-yy hh.mm.ss a'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tmve_gkey = toLong(mve_gkey)) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATA,\n\t\tATD = CSV@ATD,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as short,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as short,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as short,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as short,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as short,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as double,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as string,\n\t\t{OOG Flag} as string,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gti',\n\tfolderPath: 'bronze/moves',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'gti',\n\tfolderPath: 'bronze/vessel_visits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATA,\n\t\tATD = CSV@ATD,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_Onne')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as short,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as short,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as short,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as short,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as short,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as double,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as string,\n\t\t{OOG Flag} as string,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'onne',\n\tfolderPath: 'bronze/moves',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'onne',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH24:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATA,\n\t\tATD = CSV@ATD,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'onne',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_SLPA')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'slpa',\n\tfolderPath: 'bronze/moves',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'slpa',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'slpa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_Valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'valencia',\n\tfolderPath: 'bronze/moves',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'valencia',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/moves',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/moves',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV",
							"description": "Import data from linkedService2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as string,\n\t\tufv_gkey as string,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as string,\n\t\tactive_ufv as string,\n\t\t{Requires Power Flag} as string,\n\t\t{OOG Flag} as string,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as string,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\tATD = CSV@ATD,\n\t\tATA = source2@ATA,\n\t\t{Service Id}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as string,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as string,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as string,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as string,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as string,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as string,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gpa',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(t_put),\n\t\tMonth = month(t_put),\n\t\tWeek = weekOfYear(t_put),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce( toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tmve_gkey = toLong(mve_gkey),\n\t\tCarrier_Visit_Key = toLong(Carrier_Visit_Key),\n\t\tRehandles = toLong(Rehandles)) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nderivedColumn1 select(mapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nCSV derive(Carrier_Visit_Key = toLong(Carrier_Visit_Key),\n\t\tmve_gkey = toLong(mve_gkey),\n\t\tRehandles = toLong(Rehandles),\n\t\tt_put = toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),\n\t\tt_fetch = toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),\n\t\tufv_gkey = toLong(ufv_gkey)) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tRestow_Reason,\n\t\tPOW,\n\t\tufv_gkey,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_gpa_old')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Moves joined to Vessel Visits",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "vesselVisits"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as string,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as string,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as string,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as string,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as string,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as string,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gpa',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/vesselvisits') ~> vesselVisits\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(t_put),\n\t\tMonth = month(t_put),\n\t\tWeek = weekOfYear(t_put),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce( toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tmve_gkey = toLong(mve_gkey),\n\t\tCarrier_Visit_Key = toLong(Carrier_Visit_Key),\n\t\tRehandles = toLong(Rehandles)) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nderivedColumn1, vesselVisits join(Carrier_Visit_Key == Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join1\nJoin1 select(mapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nCSV derive(Carrier_Visit_Key = toLong(Carrier_Visit_Key),\n\t\tmve_gkey = toLong(mve_gkey),\n\t\tRehandles = toLong(Rehandles),\n\t\tt_put = toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),\n\t\tt_fetch = toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss')) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tRestow_Reason,\n\t\tPOW,\n\t\tufv_gkey,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as string,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'haifa',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'haifa',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_carry_complete,'dd/MM/yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as string,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as short,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as string,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as string,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tPOW as string,\n\t\tufv_gkey as integer,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'kssp',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Carrier Visit Key} as integer\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'kssp',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(Carrier_Visit_Key == {Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tPOW,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\t{Facility Id},\n\t\t{Carrier Visit Id},\n\t\tPhase,\n\t\t{Visit Nbr},\n\t\t{Carrier Mode},\n\t\tATA,\n\t\tATD,\n\t\t{Time First Availabilty},\n\t\t{Time Discharge Complete},\n\t\t{Service Id},\n\t\t{Service Name},\n\t\t{Vessel Id},\n\t\t{IB VYG},\n\t\t{OB VYG},\n\t\t{Carrier Name},\n\t\t{Vessel Class},\n\t\t{Published ETA},\n\t\t{Published ETD},\n\t\t{Start Work},\n\t\t{End Work},\n\t\t{Carrier Visit Key}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tpow = POW,\n\t\tufv_gkey,\n\t\tATA,\n\t\tATD,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as string,\n\t\tufv_gkey as string,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as string,\n\t\tactive_ufv as string,\n\t\t{Requires Power Flag} as string,\n\t\t{OOG Flag} as string,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mict',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as string,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'mict',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA = source2@ATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as short,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as short,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as short,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as short,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/movehistory/load','bronze/movehistory/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'bronze/movehistory/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nCSV select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_oldformat_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "2022 files are missing some extracted fields",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV",
							"description": "Import data from linkedService2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as short,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as double,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tHazardous_Flag = false()) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\tATD = CSV@ATD,\n\t\tATA = source2@ATA,\n\t\t{Service Id}\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'pdports',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'pdports',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as short,\n\t\t{Fetch CHE Operator Id} as short,\n\t\t{Put CHE Operator Id} as short,\n\t\t{Fetch CHE Id} as long,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as long,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as long,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as long,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_put as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_fetch as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_dispatch as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_discharge as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_carry_dispatch as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_carry_fetch_ready as timestamp 'M/dd/yyyy HH:mm',\n\t\tt_carry_put_ready as timestamp 'M/dd/yyyy HH:mm',\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as timestamp 'M/dd/yyyy HH:mm',\n\t\tRehandles as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'salalah',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'salalah',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATA,\n\t\tATD = CSV@ATD,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nderivedColumn1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAggregate1 derive(Year = year(t_put),\n\t\tMonth = month(t_put),\n\t\tWeek = weekOfYear(t_put)) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tcompressionType: 'snappy',\n\tcompressionLevel: 'Optimal',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as string,\n\t\t{Twin Carry} as string,\n\t\t{Twin Put} as string,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATD as string,\n\t\tRehandles as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'tdt',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'tdt',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source2\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tdist_start = toLong(dist_start),\n\t\tdist_carry = toLong(dist_carry)) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, source2 join(CSV@{Carrier Visit Key} == source2@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id} = CSV@{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tRehandles,\n\t\tATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MoveSrc_transnet')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "vslvisit"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as string,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\t{Rehandles,} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'transnet',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nsource(output(\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Carrier Visit Key} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'transnet',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> vslvisit\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tFetch_CHE_Id = toLong(Fetch_CHE_Id),\n\t\tQC_CHE_Id = toLong(QC_CHE_Id),\n\t\tPut_CHE_Id = toLong(Put_CHE_Id),\n\t\tCarry_CHE_Id = toLong(Carry_CHE_Id),\n\t\tYear = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss'),toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATA = coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss'))) ~> DataTypeConversion\nSelect2 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nCSV, vslvisit join(CSV@{Carrier Visit Key} == vslvisit@{Carrier Visit Key},\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Facility Id} = CSV@{Facility Id},\n\t\t{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key} = CSV@{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{From Location},\n\t\t{To Location},\n\t\t{From Position Name},\n\t\t{To Position Name},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Twin Fetch},\n\t\t{Twin Carry},\n\t\t{Twin Put},\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\t{Restow Reason},\n\t\t{Container Line Id},\n\t\t{Container Line Role},\n\t\tpow,\n\t\tmve_gkey,\n\t\tufv_gkey,\n\t\t{Berth Id},\n\t\t{Goods And Ctr Wt Kg},\n\t\tactive_ufv,\n\t\t{Requires Power Flag},\n\t\t{OOG Flag},\n\t\t{Shipper Id},\n\t\t{Consignee Id},\n\t\t{Commodity Id},\n\t\tATD = CSV@ATD,\n\t\tATA = vslvisit@ATA\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'silver/moves',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PTP_EcEvents')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as integer,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as short,\n\t\tTimeStamp as string,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as string,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as string,\n\t\tworkAssignment as string,\n\t\tunitRef as string,\n\t\ttrain_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['PTP/bronze','PTP/bronze/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/bronze',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nCSV derive(TimeStamp = toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'),\n\t\tecEventGkey = toLong(ecEventGkey),\n\t\tCHE_ID = toLong(CHE_ID),\n\t\tYear = year(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tMonth = month(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS')),\n\t\tWeek = weekOfYear(toTimestamp(TimeStamp,'yyyy-MM-dd HH:mm:ss.SSS'))) ~> DataTypeConversion\nDataTypeConversion aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as string,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as string,\n\t\tworkAssignment as string,\n\t\tunitRef as string,\n\t\ttrain_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/silver/EcEvents_v2',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetToDelta')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as string,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as string,\n\t\tworkAssignment as string,\n\t\tunitRef as string,\n\t\ttrain_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'RawData/EcEvents/2021/202110',\n\tfileName: 'part-00000-tid-2874371059126942969-3ceea6c0-94b1-488f-82fe-a7a21d733ccb-14-1-c000.snappy.parquet') ~> source1\nsource1 derive(Year = year(TimeStamp),\n\t\tMonth = month(TimeStamp),\n\t\tWeek = weekOfYear(TimeStamp)) ~> DerivedColumn1\nDerivedColumn1 alterRow(updateIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'RawData/EcEvents/Delta',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: true,\n\tupsertable: false,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'gold/qc_idle_time',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/qc_idle_time',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"Upto 2 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=1000,\"> 30 min\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_Onne')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'onne',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"Upto 2 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=1000,\"> 30 min\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'onne',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_Valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "filterOutNullMoveCompleteTime"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nfilterOutNullMoveCompleteTime window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nDerivedColumn1 filter(length(toString(Move_Complete_Date, 'yyyy-mm-dd') )>1) ~> filterOutNullMoveCompleteTime\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_Valencia_testDec6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "filterOutNullMoveCompleteDate"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nfilterOutNullMoveCompleteDate window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nDerivedColumn1 filter(isNull(Move_Complete_Date)==false()) ~> filterOutNullMoveCompleteDate\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow = POW,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "filterOutNullMoveCompleteTime"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', coalesce(t_carry_complete,t_put), coalesce(t_discharge,t_fetch)),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', coalesce(t_carry_complete,t_put), coalesce(t_discharge,t_fetch)),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', coalesce(t_carry_complete,t_put), coalesce(t_discharge,t_fetch)),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nfilterOutNullMoveCompleteTime window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nDerivedColumn1 filter(length(toString(Move_Complete_Date, 'yyyy-mm-dd') )>1) ~> filterOutNullMoveCompleteTime\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/qc_idle_time',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/QC_Idle_Time_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nSelect1 filter(equals(Event_Type_Id,'UNIT_DISCH') || equals(Event_Type_Id,'UNIT_LOAD')) ~> Filter1\nFilter1 derive(Move_Completion_Date_Time = iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),\n\t\tMove_Complete_Date = toDate(toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'yyyy-MM-dd'),'yyyy-MM-dd'),\n\t\tMove_Complete_Time = toString(iif(Event_Type_Id=='UNIT_LOAD', t_carry_complete, t_discharge),'HH:mm:ss'),\n\t\tVessel_Code = iif(Event_Type_Id=='UNIT_LOAD',left(substring(To_Position_Name,3),instr(substring(To_Position_Name,3), '-')),left(substring(From_Position_Name,3),instr(substring(From_Position_Name,3), '-')))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tmve_gkey,\n\t\tUnit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nDerivedColumn2 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 window(asc(pow, true),\n\tasc(Move_Completion_Date_Time, true),\n\tstartRowOffset: -1L,\n\tendRowOffset: -1L,\n\tMove_Completion_Date_Time_PREV = lag(Move_Completion_Date_Time),\n\t\tPOW_PREV = lag(pow),\n\t\tVessel_PREV = iif(lag(Event_Type_Id)=='UNIT_LOAD',left(substring(lag(To_Position_Name),3),instr(substring(lag(To_Position_Name),3), '-')),left(substring(lag(From_Position_Name),3),instr(substring(lag(From_Position_Name),3), '-')))) ~> Window1\nWindow1 derive(Idle_Time_Min = iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0)),\n\t\tIdle_Time_Range = case(iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>0 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=2,\"0 to 02 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>2 \r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=5,\"02 to 05 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>5\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=10,\"05 to 10 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>10\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=15,\"10 to 15 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>15\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=20,\"15 to 20 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>20\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=25,\"20 to 25 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>25\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=30,\"25 to 30 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>30\r\n&& iif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))<=60,\"30 to 60 min\",\r\niif(POW_PREV==pow && Vessel_Code==Vessel_PREV,minus(Move_Completion_Date_Time,Move_Completion_Date_Time_PREV)/60000,toLong(0))>60,\"60 & more\")) ~> DerivedColumn2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/qc_idle_time',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "Filter8"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as string,\n\t\tmoveKind as string,\n\t\tisTwin as string,\n\t\tstartDistance as string,\n\t\tworkAssignment as string,\n\t\tunitRef as string,\n\t\ttrain_ID as string,\n\t\tlocType as string,\n\t\tlocID as string,\n\t\tlocSlot as string,\n\t\topsPosID as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocID as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocID as string,\n\t\tladen_LocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/silver/EcEvents_v2') ~> source1\nFilter8 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL' && (CHE_Name!='CFSG1' && CHE_Name!='CFSG2' && CHE_Name!='DPT01' && CHE_Name!='DUMRTG' && CHE_Name!='RAIL01')) ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:00:00')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:00:00')),toTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'19:00:00')))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'18:59:59')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'06:59:59')),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'06:59:59')))),\n\t\tShift = iif(toString(iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'18:59:59')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'06:59:59')),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'06:59:59')))),'HH:mm:ss') == toString('07:00:00'),1,2),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('07:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('07:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG' && (CHE_Name != 'CFSG1' && CHE_Name != 'CFSG2' && CHE_Name != 'DPT01' && CHE_Name != 'DUMRTG' && CHE_Name != 'RAIL01')) ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('07:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:00:00')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:00:00')),toTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'19:00:00')))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'18:59:59')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'06:59:59')),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'06:59:59')))),\n\t\tShift = iif(toString(iif(toString(TimeStamp,'HH:mm:ss')>=toString('07:00:00') && toString(TimeStamp,'HH:mm:ss')< toString('19:00:00'),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'18:59:59')),iif(toString(TimeStamp,'HH:mm:ss') >= toString('19:00:00'),toTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'06:59:59')),toTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'06:59:59')))),'HH:mm:ss') == toString('07:00:00'),1,2),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('07:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nsource1 filter(Week==49 || Week==50) ~> Filter8\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_ecevents_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_workhours_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RTG EcEvents_valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "RTG"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='RTG' && eventTypeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(laden_LocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'RTG') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tRTGIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/rtg_ecevents',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tRTGIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/rtg_workhours',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('valencia')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: ($customer),\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> Filter3\nFilter3 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_Unproductive_moves_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves for RECV and RDSC Full Export, IMPRT, TRSHP ctrs that are loaded on a vessel",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "IBandOBAndUnproductiveMoves"
						},
						{
							"name": "IBFull"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter((Freight_Kind_Id=='FCL' && ( Move_Kind=='LOAD'||Move_Kind=='RECV' ||Move_Kind=='RDSC' || Move_Kind=='YARD' || Move_Kind=='SHFT'|| Move_Kind=='DSCH') && (Category_Id=='EXPRT'||Category_Id=='TRSHP' ||Category_Id=='IMPRT') )) ~> IBandOBAndUnproductiveMoves\nsource1 filter((Freight_Kind_Id=='FCL'  &&  (Move_Kind=='RECV' || Move_Kind=='RDSC'|| Move_Kind=='DSCH') && (Category_Id=='EXPRT'||Category_Id=='TRSHP' ||Category_Id=='IMPRT') )) ~> IBFull\nIBFull derive(Max_T_Put = addDays(t_put,14),\n\t\tufv_gkey = toLong(ufv_gkey)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tIB_mve_gkey = mve_gkey,\n\t\tIB_Unit_Nbr = Unit_Nbr,\n\t\tIB_Facility_Id = Facility_Id,\n\t\tIB_Move_Kind = Move_Kind,\n\t\tIB_t_put = t_put,\n\t\tIB_Category_Id = Category_Id,\n\t\tIB_ufv_gkey = ufv_gkey,\n\t\tIB_Requires_Power_Flag = Requires_Power_Flag,\n\t\tIB_OOG_Flag = OOG_Flag,\n\t\tIB_Year = Year,\n\t\tIB_Month = Month,\n\t\tIB_Week = Week,\n\t\tIB_Max_T_Put = Max_T_Put\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nselect2, Select1 join(ufv_gkey == IB_ufv_gkey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join1\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nJoin1 window(over(IB_ufv_gkey),\n\tasc(IB_t_put, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFrom_Position_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nIBandOBAndUnproductiveMoves derive(ufv_gkey = toLong(ufv_gkey)) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rehandle_uprod_moves',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFrom_Position_Name,\n\t\tIB_mve_gkey,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_t_put,\n\t\tIB_Category_Id,\n\t\tIB_ufv_gkey,\n\t\tIB_Requires_Power_Flag,\n\t\tIB_OOG_Flag,\n\t\tIB_Year,\n\t\tIB_Month,\n\t\tIB_Week,\n\t\tIB_Max_T_Put,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Tier = iif(length(From_Position_Name)==13 || length(From_Position_Name)==13, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==13 || length(From_Position_Name)==13, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> Filter3\nFilter3 derive(Tier = iif(length(From_Position_Name)==13 || length(From_Position_Name)==13, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==13 || length(From_Position_Name)==13, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_export_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves for RECV and RDSC Full Export ctrs in GCT facility",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "IBAndUnproductiveMoves"
						},
						{
							"name": "IBExprtFull"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter((Category_Id=='EXPRT' && Freight_Kind_Id=='FCL' && Facility_Id=='GCT' && ( Move_Kind=='LOAD'||Move_Kind=='RECV' ||Move_Kind=='RDSC' || (( Move_Kind=='YARD' || Move_Kind=='SHFT') && To_Position_Name!='Y-GCT-???') ))) ~> IBAndUnproductiveMoves\nsource1 filter((Category_Id=='EXPRT' && Freight_Kind_Id=='FCL' && Facility_Id=='GCT' &&  (Move_Kind=='RECV' || Move_Kind=='RDSC') )) ~> IBExprtFull\nIBExprtFull derive(Max_T_Put = addDays(t_put,14),\n\t\tufv_gkey = toLong(ufv_gkey)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tIB_mve_gkey = mve_gkey,\n\t\tIB_Unit_Nbr = Unit_Nbr,\n\t\tIB_Facility_Id = Facility_Id,\n\t\tIB_Move_Kind = Move_Kind,\n\t\tIB_t_put = t_put,\n\t\tIB_Category_Id = Category_Id,\n\t\tIB_ufv_gkey = ufv_gkey,\n\t\tIB_Requires_Power_Flag = Requires_Power_Flag,\n\t\tIB_OOG_Flag = OOG_Flag,\n\t\tIB_Year = Year,\n\t\tIB_Month = Month,\n\t\tIB_Week = Week,\n\t\tIB_Max_T_Put = Max_T_Put\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nselect2, Select1 join(ufv_gkey == IB_ufv_gkey\n\t&& Facility_Id == IB_Facility_Id,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join1\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nJoin1 window(over(IB_ufv_gkey),\n\tasc(IB_t_put, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nderivedColumn1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFrom_Position_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nIBAndUnproductiveMoves derive(ufv_gkey = toLong(ufv_gkey)) ~> derivedColumn1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_export',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFrom_Position_Name,\n\t\tIB_mve_gkey,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_t_put,\n\t\tIB_Category_Id,\n\t\tIB_ufv_gkey,\n\t\tIB_Requires_Power_Flag,\n\t\tIB_OOG_Flag,\n\t\tIB_Year,\n\t\tIB_Month,\n\t\tIB_Week,\n\t\tIB_Max_T_Put,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_export_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Grouping by UFV; no filter for export; it is  misnamed !",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						}
					],
					"script": "parameters{\n\tcustomer as string ('tdt')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nselect2 sort(asc(ufv_gkey, true),\n\tasc(t_put, true)) ~> Sort2\nwindow1 alterRow(upsertIf(true())) ~> AlterRow1\nSort2 window(over(ufv_gkey,\n\t\tFacility_Id),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerFcyVisit = count(mve_gkey),\n\t\tRehandlePerFcyVisit = countAll(Move_Kind==\"SHFT\" || Move_Kind==\"YARD\")) ~> window1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tufv_gkey\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/rehandle_export',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tufv_gkey,\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tRNumber,\n\t\tMovesPerFcyVisit,\n\t\tRehandlePerFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "GetLoads"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "GetSHFTs"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> GetLoads\nGetLoads derive(Tier = iif(length(From_Position_Name)==17 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==17 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> GetSHFTs\nGetSHFTs derive(Tier = iif(length(From_Position_Name)==17 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==17 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA,\n\t\tATD,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tTier,\n\t\tSlot = DerivedColumn1@Slot\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> Filter3\nFilter3 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'kssp',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find Shift Moves within Stack for a LOAD ctr",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "GetLoadMoves"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "GetShiftMoves"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('mict')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> GetLoadMoves\nGetLoadMoves derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> GetShiftMoves\nGetShiftMoves derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find Shift Moves within Stack for a LOAD ctr",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "GetLoadMoves"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "GetShiftMoves"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('mnhpi')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> GetLoadMoves\nGetLoadMoves derive(Tier = iif(length(From_Position_Name)==14 || length(From_Position_Name)==14, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==14 || length(From_Position_Name)==14, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> GetShiftMoves\nGetShiftMoves derive(Tier = iif(length(From_Position_Name)==14 || length(From_Position_Name)==14, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==14 || length(From_Position_Name)==14, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_new_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "filter1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mict',\n\tfolderPath: 'bronze/moves/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> MoveHistory\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm')),\n\t\tt_fetch = coalesce(toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_fetch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_discharge = coalesce(toTimestamp(t_discharge,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yy HH:mm:ss'),toTimestamp(t_discharge,'dd.MM.yy HH:mm:ss'),toTimestamp(t_discharge,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_discharge,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_discharge,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_discharge,'dd-MM-yyyy HH:mm:ss')),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tt_dispatch = coalesce(toTimestamp(t_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_dispatch = coalesce(toTimestamp(t_carry_dispatch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_dispatch,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_dispatch,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_dispatch,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_fetch_ready = coalesce(toTimestamp(t_carry_fetch_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_fetch_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_fetch_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_fetch_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_carry_put_ready = coalesce(toTimestamp(t_carry_put_ready,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd.MM.yy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_put_ready,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_put_ready,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_put_ready,'dd-MM-yyyy HH:mm:ss')),\n\t\tDate = toDate(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tYear_Week = (year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))) * 100) + weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm')))) ~> DataTypeConversion\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nMoveHistory select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Complex Id},\n\t\t{Yard Id},\n\t\t{Carrier Visit Key},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\t{Carry CHE Operator Id},\n\t\t{Fetch CHE Operator Id},\n\t\t{Put CHE Operator Id},\n\t\t{Fetch CHE Id},\n\t\t{Fetch CHE Kind},\n\t\t{Carry CHE Id},\n\t\t{Carry CHE Kind},\n\t\t{Put CHE Id},\n\t\t{Put CHE Kind},\n\t\t{QC CHE Id},\n\t\t{QC CHE Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tpow,\n\t\tmve_gkey,\n\t\tactive_ufv,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect2 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion filter(!isNull(mve_gkey) && !isNull(t_put)) ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tpow,\n\t\tactive_ufv,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tYear_Week\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_new_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DataTypeConversion"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "filter1"
						}
					],
					"script": "source(output(\n\t\t{Unit Nbr} as string,\n\t\t{Facility Id} as string,\n\t\t{Complex Id} as string,\n\t\t{Yard Id} as string,\n\t\t{Carrier Visit Key} as string,\n\t\t{Event Type Id} as string,\n\t\t{Move Kind} as string,\n\t\t{From Location} as string,\n\t\t{To Location} as string,\n\t\t{From Position Name} as string,\n\t\t{To Position Name} as string,\n\t\t{Carry CHE Operator Id} as string,\n\t\t{Fetch CHE Operator Id} as string,\n\t\t{Put CHE Operator Id} as string,\n\t\t{Fetch CHE Id} as string,\n\t\t{Fetch CHE Kind} as string,\n\t\t{Carry CHE Id} as string,\n\t\t{Carry CHE Kind} as string,\n\t\t{Put CHE Id} as string,\n\t\t{Put CHE Kind} as string,\n\t\t{QC CHE Id} as string,\n\t\t{QC CHE Kind} as string,\n\t\tt_carry_complete as string,\n\t\tt_put as string,\n\t\tt_fetch as string,\n\t\tt_dispatch as string,\n\t\tt_discharge as string,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\t{Twin Fetch} as boolean,\n\t\t{Twin Carry} as boolean,\n\t\t{Twin Put} as boolean,\n\t\t{Category Id} as string,\n\t\t{Freight Kind Id} as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\t{Restow Reason} as string,\n\t\t{Container Line Id} as string,\n\t\t{Container Line Role} as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\t{Berth Id} as string,\n\t\t{Goods And Ctr Wt Kg} as integer,\n\t\tactive_ufv as integer,\n\t\t{Requires Power Flag} as boolean,\n\t\t{OOG Flag} as boolean,\n\t\t{Shipper Id} as string,\n\t\t{Consignee Id} as string,\n\t\t{Commodity Id} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tRehandles as short\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/moves/load','bronze/moves/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'bronze/movehistory/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> MoveHistory\nAggregate1 derive(t_carry_complete = coalesce(toTimestamp(t_carry_complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yy HH:mm:ss'),toTimestamp(t_carry_complete,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_carry_complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_carry_complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_carry_complete,'dd-MM-yyyy HH:mm:ss')),\n\t\tt_put = coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm')),\n\t\tYear = year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tMonth = month(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tWeek = weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tDate = toDate(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))),\n\t\tYear_Week = (year(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm'))) * 100) + weekOfYear(coalesce(toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'),toTimestamp(t_put,'dd MM yy HH:mm')))) ~> DataTypeConversion\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nMoveHistory select(mapColumn(\n\t\t{Unit Nbr},\n\t\t{Yard Id},\n\t\t{Event Type Id},\n\t\t{Move Kind},\n\t\tt_carry_complete,\n\t\tt_put,\n\t\t{Category Id},\n\t\t{Freight Kind Id},\n\t\tpow,\n\t\tmve_gkey,\n\t\tactive_ufv,\n\t\tRehandles\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect2 alterRow(upsertIf(true())) ~> AlterRow1\nfilter1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDataTypeConversion filter(!isNull(mve_gkey) && !isNull(t_put)) ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: false,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tYard_Id,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tpow,\n\t\tactive_ufv,\n\t\tRehandles,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tYear_Week\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter2"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nsource1 filter(Move_Kind!=\"DSCH\" && Event_Type_Id==\"UNIT_LOAD\") ~> Filter1\nFilter1 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn1\nDerivedColumn1 filter(Tier!='') ~> Filter2\nsource1 filter(Move_Kind!='DSCH' && Event_Type_Id=='UNIT_YARD_SHIFT') ~> Filter3\nFilter3 derive(Tier = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, right(From_Position_Name, 1),''),\n\t\tSlot = iif(length(From_Position_Name)==15 || length(From_Position_Name)==15, dropRight(From_Position_Name, 1),'')) ~> DerivedColumn2\nDerivedColumn2 filter(Tier!='') ~> Filter4\nFilter4 sort(asc(t_put, true)) ~> Sort1\nSort1 select(mapColumn(\n\t\tSlot\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 aggregate(groupBy(Slot),\n\teach(match(name!='Slot'), $$ = first($$))) ~> Aggregate1\nFilter2, Aggregate1 join(DerivedColumn1@Slot == Aggregate1@Slot,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 sort(asc(t_put, true)) ~> Sort2\nSort2 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'gold/rehandle',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_rdsc_export_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves for RDSC Full Export ctrs in GCT facility",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "IBAndUnproductiveMoves"
						},
						{
							"name": "IBExprtFull"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Select1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select3"
						},
						{
							"name": "filter1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as long,\n\t\tdist_start as long,\n\t\tTwin_Fetch as boolean,\n\t\tTwin_Carry as boolean,\n\t\tTwin_Put as boolean,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tRestow_Reason as string,\n\t\tPOW as string,\n\t\tufv_gkey as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as long,\n\t\tComplex_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as string,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nderivedColumn3 filter((FromEB_WB==0 && ( Move_Kind=='LOAD'||Move_Kind=='RDSC' || ( (Move_Kind=='YARD' || Move_Kind=='SHFT') && To_Position_Name!='Y-GCT-???') ) )) ~> IBAndUnproductiveMoves\nsource1 filter((Category_Id=='EXPRT' && Freight_Kind_Id=='FCL'  && Facility_Id=='GCT' && Move_Kind=='RDSC'  )) ~> IBExprtFull\nIBExprtFull derive(Max_T_Put = addDays(t_put,14),\n\t\tufv_gkey = toLong(ufv_gkey)) ~> DerivedColumn2\nDerivedColumn2 select(mapColumn(\n\t\tIB_mve_gkey = mve_gkey,\n\t\tIB_t_put = t_put,\n\t\tIB_ufv_gkey = ufv_gkey,\n\t\tIB_Max_T_Put = Max_T_Put,\n\t\tIB_Unit_Nbr = Unit_Nbr,\n\t\tIB_Facility_Id = Facility_Id,\n\t\tIB_Move_Kind = Move_Kind,\n\t\tIB_Requires_Power_Flag = Requires_Power_Flag\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nselect2, Select1 join(ufv_gkey == IB_ufv_gkey,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join1\nJoin1 sort(asc(IB_ufv_gkey, true),\n\tasc(IB_t_put, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true)) ~> Sort2\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nSort2 window(over(IB_ufv_gkey),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nIBAndUnproductiveMoves select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilter1 derive(ufv_gkey = toLong(ufv_gkey),\n\t\tFromEB_WB = iif( ( (Move_Kind=='YARD'|| Move_Kind=='SHFT') && like(From_Position_Name,'Y-GCT-EB%')), 1, iif( ( (Move_Kind=='YARD'|| Move_Kind=='SHFT') && like(From_Position_Name,'Y-GCT-WB%')), 1, 0) )) ~> derivedColumn3\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tt_fetch,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select3\nselect3 filter((Category_Id=='EXPRT' && Freight_Kind_Id=='FCL' && Facility_Id=='GCT')) ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_rdsc_export',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_ufv_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Grouping by UFV;  exclude YARD Moves;",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('tdt')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nfilter1 sort(asc(ufv_gkey, true),\n\tasc(t_put, true)) ~> Sort2\nwindow1 alterRow(upsertIf(true())) ~> AlterRow1\nSort2 window(over(ufv_gkey,\n\t\tFacility_Id),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerFcyVisit = count(mve_gkey)) ~> window1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tufv_gkey,\n\t\tEvent_Type_Id\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nselect2 filter(Event_Type_Id!='UNIT_YARD_MOVE') ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'gold/rehandle_ufv',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tCategory_Id,\n\t\tUnit_Nbr,\n\t\tMove_Kind,\n\t\tt_put,\n\t\tRequires_Power_Flag,\n\t\tFacility_Id,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tufv_gkey,\n\t\tEvent_Type_Id,\n\t\tRNumber,\n\t\tMovesPerFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaarhus',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaarhus',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaarhus',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaarhus',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'plipdeco',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'plipdeco',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'plipdeco',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'plipdeco',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_Vessel_valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/moves') ~> source1",
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/ecevents') ~> source2",
						"source(output(",
						"          Carrier_Visit_Key as integer,",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as string,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          ETA as timestamp,",
						"          ETD as timestamp,",
						"          Operator_Line_Id as string,",
						"          Operator_Line_Role as string,",
						"          Operator_Line_Name as string,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as string,",
						"          Published_ETD as string,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          Begin_Receive_Date as string,",
						"          Cargo_Cutoff_Date as string,",
						"          Hazard_Cutoff_Date as string,",
						"          Reefer_Cutoff_Date as string,",
						"          Labor_On_Board_Date as string,",
						"          Labor_Off_Board_Date as string,",
						"          Off_Port_Arrival_Date as string,",
						"          Off_Port_Departure as string,",
						"          Pilot_On_Board_Date as string,",
						"          Pilot_Off_Board_Date as string,",
						"          Est_BBK_Discharge as string,",
						"          Est_BBK_Load as string,",
						"          Est_Load as string,",
						"          Est_Discharge as string,",
						"          Est_Restow as string,",
						"          Est_Shift as string,",
						"          vvFlexString01 as string,",
						"          vvFlexString02 as string,",
						"          vvFlexString03 as string,",
						"          vvFlexString04 as string,",
						"          vvFlexString05 as string,",
						"          vvFlexString06 as string,",
						"          vvFlexString07 as string,",
						"          vvFlexString08 as string,",
						"          vvFlexDate01 as string,",
						"          vvFlexDate02 as string,",
						"          vvFlexDate03 as string,",
						"          vvFlexDate04 as string,",
						"          vvFlexDate05 as string,",
						"          vvFlexDate06 as string,",
						"          vvFlexDate07 as string,",
						"          vvFlexDate08 as string,",
						"          Vessel_Classification as string,",
						"          Vessel_Class_Length_Overall_cm as integer,",
						"          Vessel_Class_Beam_cm as short,",
						"          Vessel_TEU_Capacity as string,",
						"          Lloyds_Code as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/vesselvisits') ~> source3",
						"source2 filter(typeDescription=='MNRH' && (powName!='GATE'&&powName!='RAIL'&&powName!='RAIL 2'&&powName!='REHANDLES'&&powName!='UNASSIGNED'&&powName!='VGM'&&powName!='YARD')) ~> filter1",
						"filter1 derive(Vessel_Id = split(workQueue,'-')[1]) ~> derivedColumn1",
						"source1 filter(Event_Type_Id=='UNIT_LOAD'||Event_Type_Id=='UNIT_PAYLOAD_LOAD') ~> filter2",
						"filter2, source3 lookup(source1@Carrier_Visit_Key == source3@Carrier_Visit_Key,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          mve_gkey,",
						"          Unit_Nbr,",
						"          Facility_Id = source1@Facility_Id,",
						"          Complex_Id = source1@Complex_Id,",
						"          Yard_Id,",
						"          Carrier_Visit_Key = source1@Carrier_Visit_Key,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Location,",
						"          To_Location,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Carry_CHE_Operator_Id,",
						"          Fetch_CHE_Operator_Id,",
						"          Put_CHE_Operator_Id,",
						"          Fetch_CHE_Id,",
						"          Fetch_CHE_Kind,",
						"          Carry_CHE_Id,",
						"          Carry_CHE_Kind,",
						"          Put_CHE_Id,",
						"          Put_CHE_Kind,",
						"          QC_CHE_Id,",
						"          QC_CHE_Kind,",
						"          t_carry_complete,",
						"          t_put,",
						"          t_fetch,",
						"          t_dispatch,",
						"          t_discharge,",
						"          t_carry_dispatch,",
						"          t_carry_fetch_ready,",
						"          t_carry_put_ready,",
						"          dist_carry,",
						"          dist_start,",
						"          Twin_Fetch,",
						"          Twin_Carry,",
						"          Twin_Put,",
						"          Category_Id,",
						"          Freight_Kind_Id,",
						"          to_pos_gkey,",
						"          fm_pos_gkey,",
						"          Restow_Reason,",
						"          Container_Line_Id,",
						"          Container_Line_Role,",
						"          pow,",
						"          ufv_gkey,",
						"          Berth_Id,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          active_ufv,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Shipper_Id,",
						"          Consignee_Id,",
						"          Commodity_Id,",
						"          ATA = source1@ATA,",
						"          ATD = source1@ATD,",
						"          Rehandles,",
						"          Year = source1@Year,",
						"          Month = source1@Month,",
						"          Week = source1@Week,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1, select1 join(unitIdName == Unit_Nbr",
						"     && derivedColumn1@Vessel_Id == select1@Vessel_Id",
						"     && EcEventTime >= ATA",
						"     && EcEventTime <= ATD,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> join1",
						"join1 select(mapColumn(",
						"          ecEventGkey,",
						"          yardGkey,",
						"          YardID,",
						"          FcyID,",
						"          cheKind,",
						"          cheName,",
						"          cheID,",
						"          EcEventTime,",
						"          type,",
						"          subType,",
						"          typeDescription,",
						"          fromCheIdName,",
						"          ToCheIdName,",
						"          unitIdName,",
						"          powName,",
						"          poolName,",
						"          workQueue,",
						"          travelDistance,",
						"          moveKind,",
						"          isTwinMove,",
						"          startDistance,",
						"          workAssignmentId,",
						"          unitReference,",
						"          tranId,",
						"          locType,",
						"          locId,",
						"          locSlot,",
						"          opsPosId,",
						"          unladenLoctype,",
						"          unladenLocid,",
						"          unladenLocSlot,",
						"          ladenLoctype,",
						"          ladenLocid,",
						"          ladenLocSlot,",
						"          lastEstMoveTime,",
						"          Year = source2@Year,",
						"          Month = source2@Month,",
						"          Week = source2@Week,",
						"          Vessel_Id = derivedColumn1@Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate1 alterRow(upsertIf(true())) ~> AlterRow1",
						"select2 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'gold/rehandle_vessel',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_stack_export_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves within same block, bay for RECV,RDSC Full Export, TRSHP ctrs ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filterRECVRDSC"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tt_put as timestamp,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tufv_gkey as long,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tFromEB_WB as integer,\n\t\tIB_mve_gkey as long,\n\t\tIB_t_put as timestamp,\n\t\tIB_ufv_gkey as long,\n\t\tIB_Max_T_Put as timestamp,\n\t\tIB_Unit_Nbr as string,\n\t\tIB_Facility_Id as string,\n\t\tIB_Move_Kind as string,\n\t\tIB_Requires_Power_Flag as boolean,\n\t\tRNumber as integer,\n\t\tMovesPerUnitFcyVisit as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rehandle_uprod_moves',\n\tmode: 'read') ~> source1\nselect2 sort(asc(ufv_gkey, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true)) ~> Sort2\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nSort2 window(over(IB_ufv_gkey),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nderivedColumn3 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tStack_Move\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilterRECVRDSC derive(Stack_Move = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&&(left(From_Position_Name,14)==left(To_Position_Name,14))),1,0)) ~> derivedColumn3\nsource1 filter((IB_Move_Kind=='RECV' || IB_Move_Kind=='RDSC')) ~> filterRECVRDSC\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/rehandle_export_within_stack',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tStack_Move,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_stack_rdsc_export_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves within same block, bay for RDSC Full Export ctrs in GCT facility",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tt_put as timestamp,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tufv_gkey as long,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tFromEB_WB as integer,\n\t\tIB_mve_gkey as long,\n\t\tIB_t_put as timestamp,\n\t\tIB_ufv_gkey as long,\n\t\tIB_Max_T_Put as timestamp,\n\t\tIB_Unit_Nbr as string,\n\t\tIB_Facility_Id as string,\n\t\tIB_Move_Kind as string,\n\t\tIB_Requires_Power_Flag as boolean,\n\t\tRNumber as integer,\n\t\tMovesPerUnitFcyVisit as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_rdsc_export',\n\tmode: 'read') ~> source1\nfilter1 sort(asc(ufv_gkey, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true)) ~> Sort2\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nSort2 window(over(IB_ufv_gkey),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nderivedColumn3 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tIncomplete_To_Position,\n\t\tIncomplete_From_Position,\n\t\tStack_Move\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nsource1 derive(Incomplete_To_Position = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&&length(To_Position_Name)<13),1,0),\n\t\tIncomplete_From_Position = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&& length(From_Position_Name)<13),1,0),\n\t\tStack_Move = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&&(left(From_Position_Name,14)==left(To_Position_Name,14))),1,0)) ~> derivedColumn3\nselect2 filter(Incomplete_To_Position==0) ~> filter1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_rdsc_export_within_stack',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tIncomplete_To_Position,\n\t\tIncomplete_From_Position,\n\t\tStack_Move,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Rehandle_within_stack_recv_export_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Find unproductive moves within same block, bay for RECV Full Export ctrs in GCT facility",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filterRECV"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gpa')\n}\nsource(output(\n\t\tmve_gkey as long,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tt_put as timestamp,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tufv_gkey as long,\n\t\tRequires_Power_Flag as boolean,\n\t\tOOG_Flag as boolean,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tFromEB_WB as integer,\n\t\tIB_mve_gkey as long,\n\t\tIB_t_put as timestamp,\n\t\tIB_ufv_gkey as long,\n\t\tIB_Max_T_Put as timestamp,\n\t\tIB_Unit_Nbr as string,\n\t\tIB_Facility_Id as string,\n\t\tIB_Move_Kind as string,\n\t\tIB_Requires_Power_Flag as boolean,\n\t\tRNumber as integer,\n\t\tMovesPerUnitFcyVisit as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_export',\n\tmode: 'read') ~> source1\nfilter1 sort(asc(ufv_gkey, true),\n\tasc(t_put, true),\n\tasc(mve_gkey, true)) ~> Sort2\nwindow1 alterRow(insertIf(true())) ~> AlterRow1\nSort2 window(over(IB_ufv_gkey),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerUnitFcyVisit = count(mve_gkey)) ~> window1\nderivedColumn3 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tIncomplete_To_Position,\n\t\tIncomplete_From_Position,\n\t\tStack_Move\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nfilterRECV derive(Incomplete_To_Position = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&&length(To_Position_Name)<13),1,0),\n\t\tIncomplete_From_Position = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&& length(From_Position_Name)<13),1,0),\n\t\tStack_Move = iif(((Move_Kind=='SHFT'||Move_Kind=='YARD')&&(left(From_Position_Name,14)==left(To_Position_Name,14))),1,0)) ~> derivedColumn3\nselect2 filter(Incomplete_To_Position==0) ~> filter1\nsource1 filter(IB_Move_Kind=='RECV') ~> filterRECV\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'gold/rehandle_recv_export_within_stack',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tFromEB_WB,\n\t\tIB_mve_gkey,\n\t\tIB_t_put,\n\t\tIB_ufv_gkey,\n\t\tIB_Max_T_Put,\n\t\tIB_Unit_Nbr,\n\t\tIB_Facility_Id,\n\t\tIB_Move_Kind,\n\t\tIB_Requires_Power_Flag,\n\t\tIncomplete_To_Position,\n\t\tIncomplete_From_Position,\n\t\tStack_Move,\n\t\tRNumber,\n\t\tMovesPerUnitFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RemoveDuplicates')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "Delta"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						}
					],
					"script": "source(output(\n\t\tUnitNbr as string,\n\t\tFacilityId as string,\n\t\tComplexId as string,\n\t\tYardId as string,\n\t\tCarrierVisitKey as string,\n\t\tEventTypeId as string,\n\t\tMoveKind as string,\n\t\tFromLocation as string,\n\t\tToLocation as string,\n\t\tFromPositionName as string,\n\t\tToPositionName as string,\n\t\tCarryCHEOperatorId as string,\n\t\tFetchCHEOperatorId as string,\n\t\tPutCHEOperatorId as string,\n\t\tFetchCHEId as long,\n\t\tFetchCHEKind as string,\n\t\tCarryCHEId as long,\n\t\tCarryCHEKind as string,\n\t\tPutCHEId as long,\n\t\tPutCHEKind as string,\n\t\tQCCHEId as long,\n\t\tQCCHEKind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as string,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as string,\n\t\tt_carry_fetch_ready as string,\n\t\tt_carry_put_ready as string,\n\t\tdist_carry as string,\n\t\tdist_start as string,\n\t\tTwinFetch as string,\n\t\tTwinCarry as string,\n\t\tTwinPut as string,\n\t\tCategoryId as string,\n\t\tFreightKindId as string,\n\t\tto_pos_gkey as string,\n\t\tfm_pos_gkey as string,\n\t\tRestowReason as string,\n\t\tContainerLineId as string,\n\t\tContainerLineRole as string,\n\t\tpow as string,\n\t\tmve_gkey as integer,\n\t\tufv_gkey as integer,\n\t\tBerthId as string,\n\t\tGoodsAndCtrWtKg as string,\n\t\tactive_ufv as integer,\n\t\tRequiresPowerFlag as string,\n\t\tOOGFlag as string,\n\t\tShipperId as string,\n\t\tConsigneeId as string,\n\t\tCommodityId as string,\n\t\tATD as string,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves') ~> Delta\nDelta aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves',\n\toverwrite: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SC EcEvents_transnet_dct')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "for TT Productivity report",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "SC"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as string,\n\t\tToCheIdName as string,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as string,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name = cheName,\n\t\tCHE_ID = cheID,\n\t\tTimeStamp = EcEventTime,\n\t\teventType = type,\n\t\teventSubType = subType,\n\t\teventTypeDescription = typeDescription,\n\t\tunit = unitIdName,\n\t\tpow = powName,\n\t\tpool = poolName,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot = ladenLocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='SC' && eventTypeDescription=='CMPL' && FcyID == 'DCT') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tMoveCount = 1,\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(TimeStamp, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((eventTypeDescription == 'LGOF' || eventTypeDescription == 'LGON') && cheKind == 'SC'&& FcyID == 'DCT') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(TimeStamp,'yyyy-MM-dd')),\n\t\tTime = toString(TimeStamp,'HH:mm:ss'),\n\t\tShiftStartTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'02:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'08:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'14:00:00')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'20:00:00')),\r\ntoTimestamp(concat(concat(toString(subDays(TimeStamp,1),'yyyy-MM-dd'),' '),'20:00:00'))\r\n)\r\n))),\n\t\tShiftEndTime = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'07:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'13:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'19:59:59')),\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('20:00:00'),\r\ntoTimestamp(concat(concat(toString(addDays(TimeStamp,1),'yyyy-MM-dd'),' '),'01:59:59')),\r\ntoTimestamp(concat(concat(toString(TimeStamp,'yyyy-MM-dd'),' '),'01:59:59'))\r\n)\r\n))),\n\t\tShift = iif(toString(TimeStamp,'HH:mm:ss')>=toString('02:00:00') \r\n&& toString(TimeStamp,'HH:mm:ss')< toString('08:00:00'),\r\n1,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('08:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('14:00:00'),\r\n2,\r\niif(toString(TimeStamp,'HH:mm:ss') >= toString('14:00:00')\r\n&& toString(TimeStamp,'HH:mm:ss')< toString('20:00:00'),\r\n3,\r\n4\r\n))),\n\t\tShiftDate = iif(toString(TimeStamp,'HH:mm:ss')<toString('02:00:00'),toDate(toString(subDays(TimeStamp,1),'yyyy-MM-dd')),toDate(toString(TimeStamp,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3)) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\teventTypeDescription_PREV = lag(eventTypeDescription),\n\t\teventTypeDescription_NXT = lead(eventTypeDescription)) ~> Window1\nWindow1 derive(LGOF = case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(eventTypeDescription=='LGON',TimeStamp),\n\t\tWorkTime = toDouble((case(CHE_ID==CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV),case(eventTypeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(CHE_ID!=CHE_ID_NXT && (CHE_ID==CHE_ID_PREV || CHE_ID!=CHE_ID_PREV)),case(eventTypeDescription=='LGON', ShiftEndTime))-case(eventTypeDescription=='LGON',TimeStamp))/3600000)) ~> DerivedColumn4\nDerivedColumn3 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(CHE_ID, true),\n\tasc(TimeStamp, true),\n\tCHE_ID_PREV = lag(CHE_ID),\n\t\tCHE_ID_NXT = lead(CHE_ID),\n\t\tTimeStamp_PREV = lag(TimeStamp),\n\t\tTimeStamp_NXT = lead(TimeStamp),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nDerivedColumn1, Filter7 join(Aggregate1@CHE_ID == Aggregate3@CHE_ID\n\t&& DerivedColumn1@ShiftStartTime == DerivedColumn3@ShiftStartTime\n\t&& DerivedColumn1@ShiftEndTime == DerivedColumn3@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tecEventGkey = Aggregate1@ecEventGkey,\n\t\tyardGkey = Aggregate1@yardGkey,\n\t\tYardID = Aggregate1@YardID,\n\t\tFcyID = Aggregate1@FcyID,\n\t\tcheKind = Aggregate1@cheKind,\n\t\tCHE_Name = Aggregate1@CHE_Name,\n\t\tCHE_ID = Aggregate1@CHE_ID,\n\t\tTimeStamp = Aggregate1@TimeStamp,\n\t\teventType = Aggregate1@eventType,\n\t\teventSubType = Aggregate1@eventSubType,\n\t\teventTypeDescription = Aggregate1@eventTypeDescription,\n\t\tunit = Aggregate1@unit,\n\t\tpow = Aggregate1@pow,\n\t\tpool = Aggregate1@pool,\n\t\tworkQueue = Aggregate1@workQueue,\n\t\tmoveKind = Aggregate1@moveKind,\n\t\tlocSlot = Aggregate1@locSlot,\n\t\tunladenLocSlot = Aggregate1@unladenLocSlot,\n\t\tladen_LocSlot = Aggregate1@laden_LocSlot,\n\t\tYear = Aggregate1@Year,\n\t\tMonth = Aggregate1@Month,\n\t\tWeek = Aggregate1@Week,\n\t\tDate = DerivedColumn1@Date,\n\t\tTime = DerivedColumn1@Time,\n\t\tShiftStartTime = DerivedColumn1@ShiftStartTime,\n\t\tShiftEndTime = DerivedColumn1@ShiftEndTime,\n\t\tShift = DerivedColumn1@Shift,\n\t\tShiftDate = DerivedColumn1@ShiftDate,\n\t\tMoveCount,\n\t\tBlock = DerivedColumn1@Block,\n\t\tHour,\n\t\tWeekofYear = DerivedColumn1@WeekofYear,\n\t\t{ecEventGkey.1} = Aggregate3@ecEventGkey,\n\t\t{ShiftDate.1} = DerivedColumn3@ShiftDate,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(TimeStamp>=LGON && TimeStamp<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp),\n\t\tLastMove = case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp),\n\t\tIdleTimeFL = case(isNull(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp))==false(),(case(CHE_ID!=CHE_ID_PREV,TimeStamp,LGON!=LGON_PREV,TimeStamp)-LGON)/3600000,isNull(case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))==false(),(LGOF-case(CHE_ID!=CHE_ID_NXT,TimeStamp,LGOF!=LGOF_NXT,TimeStamp))/3600000),\n\t\tITVIdleTime = iif(CHE_ID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-TimeStamp)<0,0.0,toFloat((TimeStamp_NXT-TimeStamp)/3600000)),0.0),\n\t\tBayChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0),\n\t\tBayChangeCount = iif(isNull(locSlot_NXT)==true(),0,iif(iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)==left(locSlot_NXT,3),iif(left(locSlot,5)!=left(locSlot_NXT,5),1,0),0),0),0),0)==1,\r\niif(toInteger(substring(locSlot,4,2))>toInteger(substring(locSlot_NXT,4,2)),iif( \r\ntoInteger(substring(locSlot,4,2))%2==0,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2))-1)-(toInteger(substring(locSlot_NXT,4,2)))), \r\niif(toInteger(substring(locSlot_NXT,4,2))%2==0,toInteger(substring(locSlot,4,2))-(toInteger(substring(locSlot_NXT,4,2))+1),\r\n(toInteger(substring(locSlot,4,2)))-(toInteger(substring(locSlot_NXT,4,2)))))\r\n,iif(toInteger(substring(locSlot_NXT,4,2))%2==0,iif(\r\n    toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2))-1)-(toInteger(substring(locSlot,4,2)))) \r\n,iif(toInteger(substring(locSlot,4,2))%2==0,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2))+1) \r\n,(toInteger(substring(locSlot_NXT,4,2)))-(toInteger(substring(locSlot,4,2)))))),0)),\n\t\tBlockChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,3)!=left(locSlot_NXT,3),1,0),0),0),0),\n\t\tLaneChangeInstance = iif(CHE_ID==CHE_ID_NXT,iif(ecEventGkey!=ecEventGkey_NXT,iif(ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif(left(locSlot,2)!=left(locSlot_NXT,2),1,0),0),0),0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'gold/sc_ecevents_dct',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tMoveCount,\n\t\tBlock,\n\t\tHour,\n\t\tWeekofYear,\n\t\t{ecEventGkey.1},\n\t\t{ShiftDate.1},\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime,\n\t\tValid,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\tlocSlot_PREV,\n\t\tlocSlot_NXT,\n\t\tecEventGkey_PREV,\n\t\tecEventGkey_NXT,\n\t\tShiftDate_PREV,\n\t\tShiftDate_NXT,\n\t\tLGON_PREV,\n\t\tLGON_NXT,\n\t\tLGOF_PREV,\n\t\tLGOF_NXT,\n\t\tFirstMove,\n\t\tLastMove,\n\t\tIdleTimeFL,\n\t\tITVIdleTime,\n\t\tBayChangeInstance,\n\t\tBayChangeCount,\n\t\tBlockChangeInstance,\n\t\tLaneChangeInstance\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> SC\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'transnet',\n\tfolderPath: 'gold/sc_workhours_dct',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tCHE_Name,\n\t\tCHE_ID,\n\t\tTimeStamp,\n\t\teventType,\n\t\teventSubType,\n\t\teventTypeDescription,\n\t\tunit,\n\t\tpow,\n\t\tpool,\n\t\tworkQueue,\n\t\tmoveKind,\n\t\tlocSlot,\n\t\tunladenLocSlot,\n\t\tladen_LocSlot,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tWeekofYear,\n\t\tDate,\n\t\tTime,\n\t\tShiftStartTime,\n\t\tShiftEndTime,\n\t\tShift,\n\t\tShiftDate,\n\t\tBlock,\n\t\tCHE_ID_PREV,\n\t\tCHE_ID_NXT,\n\t\tTimeStamp_PREV,\n\t\tTimeStamp_NXT,\n\t\teventTypeDescription_PREV,\n\t\teventTypeDescription_NXT,\n\t\tLGOF,\n\t\tLGON,\n\t\tWorkTime\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SC_GMPH')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "RTG",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "workhours"
						}
					],
					"transformations": [
						{
							"name": "select"
						},
						{
							"name": "Filter1"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Aggregate3"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Window1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "Sort1"
						},
						{
							"name": "Sort2"
						},
						{
							"name": "Window2"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "Filter6"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter7"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "derivedColumn10"
						},
						{
							"name": "derivedColumn11"
						},
						{
							"name": "derivedColumn12"
						},
						{
							"name": "derivedColumn13"
						}
					],
					"script": "source(output(\n\t\tecEventGkey as long,\n\t\tyardGkey as short,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tcheName as string,\n\t\tcheID as long,\n\t\tEcEventTime as timestamp,\n\t\ttype as short,\n\t\tsubType as short,\n\t\ttypeDescription as string,\n\t\tfromCheIdName as boolean,\n\t\tToCheIdName as boolean,\n\t\tunitIdName as string,\n\t\tpowName as string,\n\t\tpoolName as string,\n\t\tworkQueue as string,\n\t\ttravelDistance as short,\n\t\tmoveKind as string,\n\t\tisTwinMove as boolean,\n\t\tstartDistance as short,\n\t\tworkAssignmentId as double,\n\t\tunitReference as string,\n\t\ttranId as string,\n\t\tlocType as string,\n\t\tlocId as string,\n\t\tlocSlot as string,\n\t\topsPosId as string,\n\t\tunladenLoctype as string,\n\t\tunladenLocid as string,\n\t\tunladenLocSlot as string,\n\t\tladenLoctype as string,\n\t\tladenLocid as string,\n\t\tladenLocSlot as string,\n\t\tlastEstMoveTime as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/ecevents') ~> source1\nsource1 select(mapColumn(\n\t\tecEventGkey,\n\t\tyardGkey,\n\t\tYardID,\n\t\tFcyID,\n\t\tcheKind,\n\t\tcheName,\n\t\tcheID,\n\t\tEcEventTime,\n\t\ttype,\n\t\tsubType,\n\t\ttypeDescription,\n\t\tfromCheIdName,\n\t\tToCheIdName,\n\t\tunitIdName,\n\t\tpowName,\n\t\tpoolName,\n\t\tworkQueue,\n\t\ttravelDistance,\n\t\tmoveKind,\n\t\tisTwinMove,\n\t\tstartDistance,\n\t\tworkAssignmentId,\n\t\tunitReference,\n\t\ttranId,\n\t\tlocType,\n\t\tlocId,\n\t\tlocSlot,\n\t\topsPosId,\n\t\tunladenLoctype,\n\t\tunladenLocid,\n\t\tunladenLocSlot,\n\t\tladenLoctype,\n\t\tladenLocid,\n\t\tladenLocSlot,\n\t\tlastEstMoveTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nselect filter(cheKind=='SC' && typeDescription=='CMPL') ~> Filter1\nFilter1 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate1\nAggregate1 derive(Date = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tTime = toString(EcEventTime,'HH:mm:ss'),\n\t\tShiftDate = iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd'))),\n\t\tMoveCount = iif(moveKind=='YARD',iif(left(locSlot,5)==left(ladenLocSlot,5),2,1),1),\n\t\tBlock = left(locSlot,3),\n\t\tHour = toString(EcEventTime, 'HH'),\n\t\tWeekofYear = weekOfYear(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd')))),\n\t\tDay_Of_Week = dayOfWeek(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),subDays(toDate(toString(EcEventTime,'yyyy-MM-dd')),1),toDate(toString(EcEventTime,'yyyy-MM-dd'))))) ~> DerivedColumn1\nselect filter((typeDescription == 'LGOF' || typeDescription == 'LGON') && cheKind == 'SC') ~> Filter5\nFilter5 aggregate(groupBy(ecEventGkey),\n\teach(match(name!='ecEventGkey'), $$ = first($$))) ~> Aggregate3\nAggregate3 derive(WeekofYear = weekOfYear(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd')))),\n\t\tDate = toDate(toString(EcEventTime,'yyyy-MM-dd')),\n\t\tTime = toString(EcEventTime,'HH:mm:ss'),\n\t\tShiftDate = iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),toDate(toString(subDays(EcEventTime,1),'yyyy-MM-dd')),toDate(toString(EcEventTime,'yyyy-MM-dd'))),\n\t\tBlock = left(locSlot,3),\n\t\tDay_Of_Week = dayOfWeek(iif(toString(EcEventTime,'HH:mm:ss')<toString('06:00:00'),subDays(toDate(toString(EcEventTime,'yyyy-MM-dd')),1),toDate(toString(EcEventTime,'yyyy-MM-dd'))))) ~> DerivedColumn3\nSort1 window(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\teventTypeDescription_PREV = lag(typeDescription),\n\t\teventTypeDescription_NXT = lead(typeDescription)) ~> Window1\nWindow1 derive(LGOF = case(cheID==CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV),case(typeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(cheID!=CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV)),case(typeDescription=='LGON', ShiftEndTime)),\n\t\tLGON = case(typeDescription=='LGON',EcEventTime),\n\t\tWorkTime = toDouble((case(cheID==CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV),case(typeDescription=='LGON',case(eventTypeDescription_NXT=='LGOF',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT),eventTypeDescription_NXT=='LGON',iif(TimeStamp_NXT>ShiftEndTime,ShiftEndTime,TimeStamp_NXT-seconds(1)))),(cheID!=CHE_ID_NXT && (cheID==CHE_ID_PREV || cheID!=CHE_ID_PREV)),case(typeDescription=='LGON', ShiftEndTime))-case(typeDescription=='LGON',EcEventTime))/3600000)) ~> DerivedColumn4\nderivedColumn11 sort(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true)) ~> Sort1\nFilter6 sort(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true)) ~> Sort2\nSort2 window(asc(yardGkey, true),\n\tasc(cheID, true),\n\tasc(EcEventTime, true),\n\tCHE_ID_PREV = lag(cheID),\n\t\tCHE_ID_NXT = lead(cheID),\n\t\tTimeStamp_PREV = lag(EcEventTime),\n\t\tTimeStamp_NXT = lead(EcEventTime),\n\t\tlocSlot_PREV = lag(locSlot),\n\t\tlocSlot_NXT = lead(locSlot),\n\t\tecEventGkey_PREV = lag(ecEventGkey),\n\t\tecEventGkey_NXT = lead(ecEventGkey),\n\t\tShiftDate_PREV = lag(ShiftDate),\n\t\tShiftDate_NXT = lead(ShiftDate),\n\t\tLGON_PREV = lag(LGON),\n\t\tLGON_NXT = lead(LGON),\n\t\tLGOF_PREV = lag(LGOF),\n\t\tLGOF_NXT = lead(LGOF)) ~> Window2\nderivedColumn13, Filter7 join(Aggregate1@cheID == Aggregate3@cheID\n\t&& derivedColumn12@ShiftStartTime == derivedColumn10@ShiftStartTime\n\t&& derivedColumn12@ShiftEndTime == derivedColumn10@ShiftEndTime,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Valid = iif(EcEventTime>=LGON && EcEventTime<=LGOF,1,0)) ~> DerivedColumn5\nDerivedColumn5 filter(Valid==1) ~> Filter6\nWindow2 derive(FirstMove = case(cheID!=CHE_ID_PREV,EcEventTime,LGON!=LGON_PREV,EcEventTime),\n\t\tLastMove = case(cheID!=CHE_ID_NXT,EcEventTime,LGOF!=LGOF_NXT,EcEventTime),\n\t\tIdleTimeFL = case(isNull(case(cheID!=CHE_ID_PREV,EcEventTime,LGON!=LGON_PREV,EcEventTime))==false(),(case(cheID!=CHE_ID_PREV,EcEventTime,LGON!=LGON_PREV,EcEventTime)-LGON)/3600000,isNull(case(cheID!=CHE_ID_NXT,Time,LGOF!=LGOF_NXT,Time))==false(),(LGOF- case(cheID!=CHE_ID_NXT,EcEventTime,LGOF!=LGOF_NXT,EcEventTime))/3600000),\n\t\tRTGIdleTime = iif(cheID==CHE_ID_NXT && ecEventGkey!=ecEventGkey_NXT && ShiftDate==ShiftDate_NXT && LGON==LGON_NXT && LGOF==LGOF_NXT,iif((TimeStamp_NXT-EcEventTime)<0,0.0,toFloat((TimeStamp_NXT-EcEventTime)/3600000)),0.0)) ~> DerivedColumn6\nDerivedColumn4 filter(isNull(WorkTime)==false()) ~> Filter7\nDerivedColumn6 alterRow(upsertIf(true())) ~> AlterRow1\nFilter7 alterRow(upsertIf(true())) ~> AlterRow2\nDerivedColumn3 derive(ShiftStartTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','12:00:00')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','18:00:00')),                toTimestamp(concat(toString(ShiftDate),' ','24:00:00'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','14:00:00')),            toTimestamp(concat(toString(ShiftDate),' ','22:00:00'))            ))),\n\t\tShiftEndTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','11:59:59')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','17:59:59')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','23:59:59')),                toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','13:59:59')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','21:59:59')),toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))            )))) ~> derivedColumn10\nderivedColumn10 derive(Shift = iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('06:00:00'),1,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('14:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('12:00:00'),2,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('22:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> derivedColumn11\nDerivedColumn1 derive(ShiftStartTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','12:00:00')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','18:00:00')),                toTimestamp(concat(toString(ShiftDate),' ','24:00:00'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','06:00:00')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','14:00:00')),            toTimestamp(concat(toString(ShiftDate),' ','22:00:00'))            ))),\n\t\tShiftEndTime = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','11:59:59')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','17:59:59')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(ShiftDate),' ','23:59:59')),                toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(ShiftDate),' ','13:59:59')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(ShiftDate),' ','21:59:59')),toTimestamp(concat(toString(ShiftDate),' ','05:59:59'))            )))) ~> derivedColumn12\nderivedColumn12 derive(Shift = iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('06:00:00'),1,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('14:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('12:00:00'),2,iif(toString(ShiftStartTime, 'HH:mm:ss')==toString('22:00:00')||toString(ShiftStartTime, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> derivedColumn13\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_ecevents_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0767,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> RTG\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tecEventGkey as long,\n\t\tyardGkey as string,\n\t\tYardID as string,\n\t\tFcyID as string,\n\t\tcheKind as string,\n\t\tCHE_Name as string,\n\t\tCHE_ID as long,\n\t\tTimeStamp as timestamp,\n\t\teventType as string,\n\t\teventSubType as string,\n\t\teventTypeDescription as string,\n\t\tunit as string,\n\t\tpow as string,\n\t\tpool as string,\n\t\tworkQueue as string,\n\t\tmoveKind as string,\n\t\tlocSlot as string,\n\t\tunladenLocSlot as string,\n\t\tladen_LocSlot as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer,\n\t\tWeekofYear as integer,\n\t\tDate as date,\n\t\tTime as string,\n\t\tShiftStartTime as timestamp,\n\t\tShiftEndTime as timestamp,\n\t\tShift as integer,\n\t\tShiftDate as date,\n\t\tBlock as string,\n\t\tCHE_ID_PREV as long,\n\t\tCHE_ID_NXT as long,\n\t\tTimeStamp_PREV as timestamp,\n\t\tTimeStamp_NXT as timestamp,\n\t\teventTypeDescription_PREV as string,\n\t\teventTypeDescription_NXT as string,\n\t\tLGOF as timestamp,\n\t\tLGON as timestamp,\n\t\tWorkTime as double\n\t),\n\tformat: 'delta',\n\tfileSystem: 'ptpbianalyticsdata',\n\tfolderPath: 'PTP/gold/rtg_workhours_v2',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['ecEventGkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\teach(match(/* All input columns */true()),\n\t\t\t/* Input name */$$ = $$)\n\t),\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> workhours"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Straddle_Prod')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "filter1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn10"
						},
						{
							"name": "sort1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "aggregate10"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id,\n\t\tComplex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tpow,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\naggregate10 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\" || Event_Type_Id==\"UNIT_PAYLOAD_LOAD\",iif(Carry_CHE_Kind==\"SC\",t_carry_complete,iif(Fetch_CHE_Kind==\"SC\",t_fetch,iif(Put_CHE_Kind==\"SC\",t_put,toTimestamp(null())))),iif(Put_CHE_Kind==\"SC\",t_put,iif(Carry_CHE_Kind==\"SC\",iifNull(t_carry_complete,t_fetch),iif(Fetch_CHE_Kind==\"SC\",t_fetch,toTimestamp(null()))))),\n\t\tSC_Che_Id = iif(Event_Type_Id== \"UNIT_LOAD\" || Event_Type_Id==\"UNIT_PAYLOAD_LOAD\",iif(Carry_CHE_Kind==\"SC\",Carry_CHE_Id,iif(Fetch_CHE_Kind==\"SC\",Fetch_CHE_Id,iif(Put_CHE_Kind==\"SC\",Put_CHE_Id,toLong(null())))),iif(Put_CHE_Kind==\"SC\",Put_CHE_Id,iif(Carry_CHE_Kind==\"SC\",Carry_CHE_Id,iif(Fetch_CHE_Kind==\"SC\",Fetch_CHE_Id,toLong(null())))))) ~> DerivedColumn1\nfilter1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn6 derive(Shift_Start_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(Date),' ','06:00:00')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(Date),' ','12:00:00')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(Date),' ','18:00:00')),                toTimestamp(concat(toString(subDays(Date,1)),' ','24:00:00'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(Date),' ','06:00:00')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(Date),' ','14:00:00')),            iif(Time>=toString('22:00:00'),                toTimestamp(concat(toString(Date),' ','22:00:00')),\t\t\t\ttoTimestamp(concat(toString(subDays(Date,1)),' ','22:00:00')))))),\n\t\tShift_End_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),        toTimestamp(concat(toString(Date),' ','11:59:59')),        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),            toTimestamp(concat(toString(Date),' ','17:59:59')),            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),                toTimestamp(concat(toString(Date),' ','23:59:59')),                toTimestamp(concat(toString(Date),' ','05:59:59'))))),    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),        toTimestamp(concat(toString(Date),' ','13:59:59')),        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),            toTimestamp(concat(toString(Date),' ','21:59:59')),            iif(Time>=toString('22:00:00'),                toTimestamp(concat(toString(addDays(Date,1)),' ','05:59:59')),\t\t\t\ttoTimestamp(concat(toString(Date),' ','05:59:59'))))))) ~> DerivedColumn3\nDerivedColumn5 aggregate(groupBy(SC_Che_Id,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = count(mve_gkey)) ~> Aggregate1\nFilter4 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Shift_Date),0),\n\t\tMonth = iifNull(month(Shift_Date),0),\n\t\tWeek = iifNull(weekOfYear(Shift_Date),0)) ~> DerivedColumn4\nDerivedColumn3 derive(Shift = iif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('06:00:00'),1,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('14:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('12:00:00'),2,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('22:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> DerivedColumn5\nDerivedColumn2 derive(Day_Of_Week = dayOfWeek(iif(Time<toString('06:00:00'),subDays(Date,1),Date)),\n\t\tShift_Date = iif(Time<toString('06:00:00'),subDays(Date,1),Date)) ~> DerivedColumn6\nAggregate1 filter(isNull(SC_Che_Id)==false()) ~> Filter4\nDerivedColumn1 filter(isNull(SC_Che_Id)==false()) ~> filter1\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nsort1 window(asc(SC_Che_Id, true),\n\tasc(Time_Completed_Date_Time, true),\n\tstartRowOffset: 1L,\n\tendRowOffset: 1L,\n\tSC_Che_Id_nxt = lead(SC_Che_Id),\n\t\tShift_Date_nxt = lead(Shift_Date),\n\t\tShift_nxt = lead(Shift),\n\t\tTime_Completed_Date_Time_nxt = lead(Time_Completed_Date_Time)) ~> window1\nwindow1 derive(SC_Idle_Time = iif(SC_Che_Id==SC_Che_Id_nxt && Shift_Date==Shift_Date_nxt && Shift==Shift_nxt,iif((Time_Completed_Date_Time_nxt-Time_Completed_Date_Time)<0,toLong(0),(Time_Completed_Date_Time_nxt-Time_Completed_Date_Time)),toLong(0))) ~> derivedColumn10\nDerivedColumn5 sort(asc(SC_Che_Id, true),\n\tasc(Time_Completed_Date_Time, true)) ~> sort1\nderivedColumn10 alterRow(upsertIf(true())) ~> AlterRow2\nSelect1 aggregate(groupBy(mve_gkey),\n\teach(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate10\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/sc_prod',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['pow','Shift','Shift_Date'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1\nAlterRow2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/sc_idle_time',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['mve_gkey'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTViolation_Valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "filter2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"filter1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          cheID_nxt = lead(cheID),",
						"          powName_nxt = lead(powName),",
						"          moveKind_nxt = lead(moveKind)) ~> window1",
						"window1 derive(Violation1 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TYDR' && moveKind=='DSCH' && moveKind_nxt=='DSCH' && powName!=powName_nxt,1,0),",
						"          Violation2 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TVDR' && moveKind=='DSCH' && moveKind_nxt=='LOAD',1,0)) ~> derivedColumn1",
						"source1 filter(cheKind=='ITV') ~> filter1",
						"filter2 alterRow(upsertIf(true())) ~> AlterRow1",
						"derivedColumn1 filter(Violation1==1 || Violation2==1) ~> filter2",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'valencia',",
						"     folderPath: 'gold/ttviolation',",
						"     truncate: true,",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTViolation_gti')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"aggregate1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          cheID_nxt = lead(cheID),",
						"          powName_nxt = lead(powName),",
						"          moveKind_nxt = lead(moveKind)) ~> window1",
						"window1 derive(Violation1 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TYDR' && moveKind=='DSCH' && moveKind_nxt=='DSCH' && powName!=powName_nxt,1,0),",
						"          Violation2 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TVDR' && moveKind=='DSCH' && moveKind_nxt=='LOAD',1,0)) ~> derivedColumn1",
						"source1 filter(cheKind=='ITV') ~> filter1",
						"filter2 alterRow(upsertIf(true())) ~> AlterRow1",
						"derivedColumn1 filter(Violation1==1 || Violation2==1) ~> filter2",
						"filter1 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'gold/ttviolation',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTViolation_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as string,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as string,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'kssp',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"aggregate1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          cheID_nxt = lead(cheID),",
						"          powName_nxt = lead(powName),",
						"          moveKind_nxt = lead(moveKind)) ~> window1",
						"window1 derive(Violation1 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TYDR' && moveKind=='DSCH' && moveKind_nxt=='DSCH' && powName!=powName_nxt,1,0),",
						"          Violation2 = iif(cheID==cheID_nxt && typeDescription=='TVCO' && typeDescription_nxt=='TVDR' && moveKind=='DSCH' && moveKind_nxt=='LOAD',1,0)) ~> derivedColumn1",
						"source1 filter(cheKind=='ITV') ~> filter1",
						"filter2 alterRow(insertIf(true())) ~> AlterRow1",
						"derivedColumn1 filter(Violation1==1 || Violation2==1) ~> filter2",
						"filter1 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'kssp',",
						"     folderPath: 'gold/ttviolation',",
						"     deltaTruncate: true,",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTWaitTime_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" ||typeDescription==\"AVDR\" || typeDescription==\"TVDR\"|| typeDescription==\"CMPL\") && (moveKind==\"DSCH\" || moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          cheID_nxt2 = lead(cheID,2),",
						"          EcEventTime_nxt = lead(EcEventTime),",
						"          typeDescription_nxt2 = lead(typeDescription,2),",
						"          EcEventTime_nxt2 = lead(EcEventTime,2),",
						"          unitIdName_nxt2 = lead(unitIdName,2)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(TTWaitTime = iif(cheID==cheID_nxt && cheID_nxt2==cheID_nxt && unitIdName==unitIdName_nxt \r",
						"&& unitIdName_nxt2==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') && (typeDescription_nxt=='AYDR'||typeDescription_nxt=='AVDR') \r",
						"&& typeDescription_nxt2=='CMPL', minus(EcEventTime_nxt2,EcEventTime_nxt)/60000,\r",
						"iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') \r",
						"&& typeDescription_nxt=='CMPL',(minus(EcEventTime_nxt,(EcEventTime+toInteger((travelDistance/(1000*20))*3600000)))/60000),toLong(0)))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'apmtaqaba',",
						"     folderPath: 'gold/ttwaittime',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTWaitTime_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" ||typeDescription==\"AVDR\" || typeDescription==\"TVDR\"|| typeDescription==\"CMPL\") && (moveKind==\"DSCH\" || moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          cheID_nxt2 = lead(cheID,2),",
						"          EcEventTime_nxt = lead(EcEventTime),",
						"          typeDescription_nxt2 = lead(typeDescription,2),",
						"          EcEventTime_nxt2 = lead(EcEventTime,2),",
						"          unitIdName_nxt2 = lead(unitIdName,2)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(TTWaitTime = iif(cheID==cheID_nxt && cheID_nxt2==cheID_nxt && unitIdName==unitIdName_nxt \r",
						"&& unitIdName_nxt2==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') && (typeDescription_nxt=='AYDR'||typeDescription_nxt=='AVDR') \r",
						"&& typeDescription_nxt2=='CMPL', minus(EcEventTime_nxt2,EcEventTime_nxt)/60000,\r",
						"iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') \r",
						"&& typeDescription_nxt=='CMPL',(minus(EcEventTime_nxt,(EcEventTime+toInteger((travelDistance/(1000*20))*3600000)))/60000),toLong(0)))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'gold/ttwaittime',",
						"     truncate: true,",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTWaitTime_gti')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" ||typeDescription==\"AVDR\" || typeDescription==\"TVDR\"|| typeDescription==\"CMPL\") && (moveKind==\"DSCH\" || moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          cheID_nxt2 = lead(cheID,2),",
						"          EcEventTime_nxt = lead(EcEventTime),",
						"          typeDescription_nxt2 = lead(typeDescription,2),",
						"          EcEventTime_nxt2 = lead(EcEventTime,2),",
						"          unitIdName_nxt2 = lead(unitIdName,2)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(TTWaitTime = iif(cheID==cheID_nxt && cheID_nxt2==cheID_nxt && unitIdName==unitIdName_nxt \r",
						"&& unitIdName_nxt2==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') && (typeDescription_nxt=='AYDR'||typeDescription_nxt=='AVDR') \r",
						"&& typeDescription_nxt2=='CMPL', minus(EcEventTime_nxt2,EcEventTime_nxt)/60000,\r",
						"iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') \r",
						"&& typeDescription_nxt=='CMPL',(minus(EcEventTime_nxt,(EcEventTime+toInteger((travelDistance/(1000*20))*3600000)))/60000),toLong(0)))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'gold/ttwaittime',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTWaitTime_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" ||typeDescription==\"AVDR\" || typeDescription==\"TVDR\"|| typeDescription==\"CMPL\") && (moveKind==\"DSCH\" || moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          cheID_nxt2 = lead(cheID,2),",
						"          EcEventTime_nxt = lead(EcEventTime),",
						"          typeDescription_nxt2 = lead(typeDescription,2),",
						"          EcEventTime_nxt2 = lead(EcEventTime,2),",
						"          unitIdName_nxt2 = lead(unitIdName,2)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(TTWaitTime = iif(cheID==cheID_nxt && cheID_nxt2==cheID_nxt && unitIdName==unitIdName_nxt \r",
						"&& unitIdName_nxt2==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') && (typeDescription_nxt=='AYDR'||typeDescription_nxt=='AVDR') \r",
						"&& typeDescription_nxt2=='CMPL', minus(EcEventTime_nxt2,EcEventTime_nxt)/60000,\r",
						"iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') \r",
						"&& typeDescription_nxt=='CMPL',(minus(EcEventTime_nxt,(EcEventTime+toInteger((travelDistance/(1000*20))*3600000)))/60000),toLong(0)))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/ttwaittime',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TTWaitTime_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as long,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheShortName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as string,",
						"          ToCheIdName as string,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as integer,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as integer,",
						"          workAssignmentId as long,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" ||typeDescription==\"AVDR\" || typeDescription==\"TVDR\"|| typeDescription==\"CMPL\") && (moveKind==\"DSCH\" || moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          cheID_nxt2 = lead(cheID,2),",
						"          EcEventTime_nxt = lead(EcEventTime),",
						"          typeDescription_nxt2 = lead(typeDescription,2),",
						"          EcEventTime_nxt2 = lead(EcEventTime,2),",
						"          unitIdName_nxt2 = lead(unitIdName,2)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(TTWaitTime = iif(cheID==cheID_nxt && cheID_nxt2==cheID_nxt && unitIdName==unitIdName_nxt \r",
						"&& unitIdName_nxt2==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') && (typeDescription_nxt=='AYDR'||typeDescription_nxt=='AVDR') \r",
						"&& typeDescription_nxt2=='CMPL', minus(EcEventTime_nxt2,EcEventTime_nxt)/60000,\r",
						"iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && (typeDescription=='TYDR'||typeDescription=='TVDR') \r",
						"&& typeDescription_nxt=='CMPL',(minus(EcEventTime_nxt,(EcEventTime+toInteger((travelDistance/(1000*20))*3600000)))/60000),toLong(0)))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/ttwaittime',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TT_Prod')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as long,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tmve_gkey as long,\n\t\tufv_gkey as long,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as long,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Carry_CHE_Kind==\"ITV\") ~> Filter1\nFilter1 derive(Time = toString(t_carry_complete,'HH:mm:ss'),\n\t\tDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carry_CHE_Id,\n\t\tDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Date),0),\n\t\tMonth = iifNull(month(Date),0),\n\t\tWeek = iifNull(weekOfYear(Date),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'gold/tt_prod',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carry_CHE_Id','Date'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TT_Productivity_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "filter2",
							"description": "Filtering rows using expressions in columns 'pow'"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tHazardous_Flag as boolean,\n\t\tATD as timestamp,\n\t\tATA as timestamp,\n\t\tService_Id as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Carry_CHE_Kind==\"ITV\") ~> Filter1\nfilter2 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carry_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nFilter1 filter(like(pow, '%CR%')) ~> filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/tt_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carry_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TT_Productivity_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter2",
							"description": "Filtering rows using expressions in columns 'pow'"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Carry_CHE_Kind==\"ITV\") ~> Filter1\nFilter2 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carry_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nFilter1 filter(like(pow, '%QC%')) ~> Filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/tt_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carry_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TT_Productivity_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "Filter2",
							"description": "Filtering rows using expressions in columns 'pow'"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Carry_CHE_Kind==\"ITV\") ~> Filter1\nFilter2 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Carry_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nFilter1 filter(like(pow, '%QC%')) ~> Filter2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/tt_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carry_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TrkVstStg_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "CSV"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Aggregate1"
						},
						{
							"name": "Select2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "join1"
						},
						{
							"name": "flattenedTrkVst"
						},
						{
							"name": "precheckRows"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "completedGCTVisits"
						},
						{
							"name": "inspectionRows"
						},
						{
							"name": "renameInspectionStageColumns"
						},
						{
							"name": "TurnTime"
						},
						{
							"name": "dedupeTVStgKey"
						}
					],
					"script": "source(output(\n\t\tCarrier_Visit_Key as string,\n\t\tTV_Stg_Key as string,\n\t\tFacility_Id as string,\n\t\tGate_Stage_Id as string,\n\t\tTV_Stg_Seq as string,\n\t\tTruck_Visit_Status_Id as string,\n\t\tTrk_Yard_Entered_Time as string,\n\t\tTrk_Yard_Exited_Time as string,\n\t\tTV_Stg_Start_Time as string,\n\t\tTV_Stg_End_Time as string,\n\t\tqueue_time as long,\n\t\tTV_Stg_Trouble as boolean,\n\t\tTV_Stg_Trouble_Resolve_Time as long,\n\t\tTV_Stg_Extra_Time_Minute as long\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: false,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/trkvststg/load/','bronze/trkvststg/archive/'],\n\tformat: 'delimited',\n\tfileSystem: 'gpa',\n\tfolderPath: 'bronze/trkvststg/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tdateFormats: ['dd-MM-yyyy'],\n\ttimestampFormats: ['yyyy-MM-dd\\'T\\'HH:mm:ss.SSS\\'Z\\'','yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'']) ~> CSV\nTurnTime aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> Aggregate1\nCSV select(mapColumn(\n\t\tCarrier_Visit_Key,\n\t\tTV_Stg_Key,\n\t\tFacility_Id,\n\t\tGate_Stage_Id,\n\t\tTV_Stg_Seq,\n\t\tTruck_Visit_Status_Id,\n\t\tTrk_Yard_Entered_Time,\n\t\tTrk_Yard_Exited_Time,\n\t\tTV_Stg_Start_Time,\n\t\tTV_Stg_End_Time,\n\t\tQUEUE_TIME = queue_time,\n\t\tTV_Stg_Trouble,\n\t\tTV_Stg_Trouble_Resolve_Time,\n\t\tTV_Stg_Extra_Time_Minute\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nAggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nprecheckRows, renameInspectionStageColumns join(Carrier_Visit_Key == insp_Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> join1\njoin1 select(mapColumn(\n\t\tCarrier_Visit_Key,\n\t\tTV_Stg_Key,\n\t\tFacility_Id,\n\t\tGate_Stage_Id,\n\t\tTV_Stg_Seq,\n\t\tTruck_Visit_Status_Id,\n\t\tTrk_Yard_Entered_Time,\n\t\tTrk_Yard_Exited_Time,\n\t\tTV_Stg_Start_Time,\n\t\tTV_Stg_End_Time,\n\t\tQUEUE_TIME = insp_QUEUE_TIME,\n\t\tTV_Stg_Trouble,\n\t\tTV_Stg_Trouble_Resolve_Time,\n\t\tTV_Stg_Extra_Time_Minute,\n\t\tinsp_Carrier_Visit_Key,\n\t\tinsp_TV_Stg_Key,\n\t\tinsp_Facility_Id,\n\t\tinsp_Gate_Stage_Id,\n\t\tinsp_TV_Stg_Seq,\n\t\tinsp_Trk_Yard_Entered_Time,\n\t\tinsp_Trk_Yard_Exited_Time,\n\t\tinsp_TV_Stg_Start_Time,\n\t\tinsp_TV_Stg_End_Time\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> flattenedTrkVst\nderivedColumn1 filter(Gate_Stage_Id=='precheck'&&TV_Stg_Seq==1) ~> precheckRows\ndedupeTVStgKey derive(Carrier_Visit_Key = toLong(Carrier_Visit_Key),\n\t\tTV_Stg_Key = toLong(TV_Stg_Key),\n\t\tTV_Stg_Seq = toLong(TV_Stg_Seq),\n\t\tTrk_Yard_Entered_Time = toTimestamp(Trk_Yard_Entered_Time, 'MM/dd/yyyy HH:mm:ss'),\n\t\tTrk_Yard_Exited_Time = toTimestamp(Trk_Yard_Exited_Time,'MM/dd/yyyy HH:mm:ss'),\n\t\tTV_Stg_Start_Time = toTimestamp(TV_Stg_Start_Time,'MM/dd/yyyy HH:mm:ss'),\n\t\tTV_Stg_End_Time = toTimestamp(TV_Stg_End_Time,'MM/dd/yyyy HH:mm:ss')) ~> derivedColumn1\nSelect2 filter(Truck_Visit_Status_Id=='COMPLETE'&&Facility_Id=='GCT'&&(isNull(Trk_Yard_Exited_Time)==false())) ~> completedGCTVisits\nderivedColumn1 filter(Gate_Stage_Id=='inspection') ~> inspectionRows\ninspectionRows select(mapColumn(\n\t\tinsp_Carrier_Visit_Key = Carrier_Visit_Key,\n\t\tinsp_TV_Stg_Key = TV_Stg_Key,\n\t\tinsp_Facility_Id = Facility_Id,\n\t\tinsp_Gate_Stage_Id = Gate_Stage_Id,\n\t\tinsp_TV_Stg_Seq = TV_Stg_Seq,\n\t\tinsp_Trk_Yard_Entered_Time = Trk_Yard_Entered_Time,\n\t\tinsp_Trk_Yard_Exited_Time = Trk_Yard_Exited_Time,\n\t\tinsp_TV_Stg_Start_Time = TV_Stg_Start_Time,\n\t\tinsp_TV_Stg_End_Time = TV_Stg_End_Time,\n\t\tinsp_QUEUE_TIME = QUEUE_TIME\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> renameInspectionStageColumns\nflattenedTrkVst derive(TurnTimeSecond = round((minus(Trk_Yard_Exited_Time,coalesce(insp_TV_Stg_Start_Time,Trk_Yard_Entered_Time))/1000),0),\n\t\tYear = year(Trk_Yard_Exited_Time),\n\t\tMonth = month(Trk_Yard_Exited_Time),\n\t\tWeek = weekOfYear(Trk_Yard_Exited_Time)) ~> TurnTime\ncompletedGCTVisits aggregate(groupBy(TV_Stg_Key),\n\teach(match(name!='TV_Stg_Key'), $$ = first($$))) ~> dedupeTVStgKey\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/truckturntime',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCarrier_Visit_Key,\n\t\tTV_Stg_Key,\n\t\tFacility_Id,\n\t\tGate_Stage_Id,\n\t\tTV_Stg_Seq,\n\t\tTruck_Visit_Status_Id,\n\t\tTrk_Yard_Entered_Time,\n\t\tTrk_Yard_Exited_Time,\n\t\tTV_Stg_Start_Time,\n\t\tTV_Stg_End_Time,\n\t\tQUEUE_TIME,\n\t\tTV_Stg_Trouble,\n\t\tTV_Stg_Trouble_Resolve_Time,\n\t\tTV_Stg_Extra_Time_Minute,\n\t\tinsp_Carrier_Visit_Key,\n\t\tinsp_TV_Stg_Key,\n\t\tinsp_Facility_Id,\n\t\tinsp_Gate_Stage_Id,\n\t\tinsp_TV_Stg_Seq,\n\t\tinsp_Trk_Yard_Entered_Time,\n\t\tinsp_Trk_Yard_Exited_Time,\n\t\tinsp_TV_Stg_Start_Time,\n\t\tinsp_TV_Stg_End_Time,\n\t\tTurnTimeSecond,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as boolean,\n\t\t{Carrier Mode} as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as timestamp,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as timestamp,\n\t\t{Published ETD} as timestamp,\n\t\t{Start Work} as timestamp,\n\t\t{End Work} as timestamp,\n\t\t{Begin Receive_Date} as timestamp,\n\t\t{Cargo Cutoff Date} as timestamp,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as timestamp,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as short,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as short,\n\t\t{Est Discharge} as short,\n\t\t{Est Restow} as short,\n\t\t{Est Shift} as short,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as timestamp,\n\t\tvvFlexDate02 as timestamp,\n\t\tvvFlexDate03 as timestamp,\n\t\tvvFlexDate04 as timestamp,\n\t\tvvFlexDate05 as timestamp,\n\t\tvvFlexDate06 as timestamp,\n\t\tvvFlexDate07 as timestamp,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as short,\n\t\t{Lloyds Code} as integer\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vessel_visits','bronze/vessel_visits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'arica',\n\tfolderPath: 'bronze/vessel_visits',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\nColumnNameSpace alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'arica',\n\tfolderPath: 'silver/vessel_visits',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vessel_visits/load','bronze/vessel_visits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'bronze/vessel_visits/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/vessel_visits',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_GTI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "parameters{\n\tcustomer as string ('gti')\n}\nsource(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/bronze/vessel_visits','bronze/vessel_visits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gti',\n\tfolderPath: 'bronze/vessel_visits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss')),coalesce(currentTimestamp(),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss')),coalesce(currentTimestamp(),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss')),coalesce(currentTimestamp(),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\nDerivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'gti',\n\tfolderPath: 'silver/vesselvisits',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_Valencia')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits/','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'valencia',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'valencia',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_aarhus')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaarhus',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_aqaba')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'apmtaqaba',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce( toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tCarrier_Visit_Key as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'gpa',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce( toTimestamp(ATA,'MM/dd/yyyy HH:mm'), toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tPublished_ETA = coalesce(toTimestamp(Published_ETA,'MM/dd/yyyy HH:mm'),toTimestamp(Published_ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Published_ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(Published_ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(Published_ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tPublished_ETD = coalesce(toTimestamp(Published_ETD,'MM/dd/yyyy HH:mm'),toTimestamp(Published_ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Published_ETD,'dd-MM-yy HH:mm:ss'), toTimestamp(Published_ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Published_ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(Published_ETA,'MM/dd/yyyy HH:mm'),toTimestamp(Published_ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(Published_ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(Published_ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(Published_ETA,'MM/dd/yyyy HH:mm'),toTimestamp(Published_ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(Published_ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(Published_ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(Published_ETA,'MM/dd/yyyy HH:mm'),toTimestamp(Published_ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(Published_ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(Published_ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tVisit_Nbr = toShort(Visit_Nbr),\n\t\tCarrier_Visit_Key = toLong(Carrier_Visit_Key)) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key,\n\t\tFacility_Id),\n\teach(match(name!='Carrier_Visit_Key'&&name!='Facility_Id'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: true,\n\tformat: 'delta',\n\tfileSystem: 'gpa',\n\tfolderPath: 'silver/vesselvisits',\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key','Facility_Id'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCarrier_Visit_Key,\n\t\tFacility_Id,\n\t\tCarrier_Visit_Id,\n\t\tPhase,\n\t\tVisit_Nbr,\n\t\tCarrier_Mode,\n\t\tATA,\n\t\tATD,\n\t\tTime_First_Availabilty,\n\t\tTime_Discharge_Complete,\n\t\tService_Id,\n\t\tService_Name,\n\t\tVessel_Id,\n\t\tIB_VYG,\n\t\tOB_VYG,\n\t\tCarrier_Name,\n\t\tVessel_Class,\n\t\tPublished_ETA,\n\t\tPublished_ETD,\n\t\tStart_Work,\n\t\tEnd_Work,\n\t\tTimeFirstAvailabilty,\n\t\tStartWork,\n\t\tTimeDischargeComplete,\n\t\tEndWork,\n\t\tWeek,\n\t\tYear,\n\t\tMonth\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_haifa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'haifa',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Start_Work,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(End_Work,'dd/MM/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'haifa',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mict',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'), toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'yyyy-MM-dd HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'yyyy-MM-dd HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'yyyy-MM-dd HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'yyyy-MM-dd HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy/MM/dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/vesselvisits',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_pdports')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'pdports',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'pdports',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_plipdeco')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as integer,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true()),\n\tinsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'plipdeco',\n\tfolderPath: 'silver/vesselvisits',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0222,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_salalah')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as string,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['/bronze/vesselvisits/load','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'salalah',\n\tfolderPath: 'bronze/vesselvisits/load',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETA,'dd-MM-yy HH:mm'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yy HH:mm'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd-MM-yy HH:mm'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce(toTimestamp(Start_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd-MM-yy HH:mm'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'MM/dd/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd-MM-yy HH:mm'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce(toTimestamp(End_Work,'MM/dd/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd-MM-yy HH:mm'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce(toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'dd.MM.yy HH:mm:ss,SSS'),toTimestamp(ETA,'dd-MM-yy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'salalah',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VesselVisits_tdt')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "ColumnNameSpace"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate1"
						}
					],
					"script": "source(output(\n\t\t{Complex Id} as string,\n\t\t{Facility Id} as string,\n\t\t{Carrier Visit Id} as string,\n\t\tPhase as string,\n\t\t{Visit Nbr} as string,\n\t\t{Carrier Mode} as string,\n\t\tATA as string,\n\t\tATD as string,\n\t\tETA as string,\n\t\tETD as string,\n\t\t{Operator Line Id} as string,\n\t\t{Operator Line Role} as string,\n\t\t{Operator Line Name} as string,\n\t\t{Time First Availabilty} as string,\n\t\t{Time Discharge Complete} as string,\n\t\t{Service Id} as string,\n\t\t{Service Name} as string,\n\t\t{Vessel Id} as string,\n\t\t{IB VYG} as string,\n\t\t{OB VYG} as string,\n\t\t{Carrier Name} as string,\n\t\t{Vessel Class} as string,\n\t\t{Published ETA} as string,\n\t\t{Published ETD} as string,\n\t\t{Start Work} as string,\n\t\t{End Work} as string,\n\t\t{Begin Receive_Date} as string,\n\t\t{Cargo Cutoff Date} as string,\n\t\t{Hazard Cutoff Date} as string,\n\t\t{Reefer Cutoff Date} as string,\n\t\t{Labor On Board Date} as string,\n\t\t{Labor Off Board Date} as string,\n\t\t{Off Port Arrival Date} as string,\n\t\t{Off Port Departure} as string,\n\t\t{Pilot On Board Date} as string,\n\t\t{Pilot Off Board Date} as string,\n\t\t{Est BBK Discharge} as string,\n\t\t{Est BBK Load} as string,\n\t\t{Est Load} as string,\n\t\t{Est Discharge} as string,\n\t\t{Est Restow} as string,\n\t\t{Est Shift} as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\t{Carrier Visit Key} as long,\n\t\t{Vessel Classification} as string,\n\t\t{Vessel Class Length Overall cm} as integer,\n\t\t{Vessel Class Beam cm} as short,\n\t\t{Vessel TEU Capacity} as string,\n\t\t{Lloyds Code} as string\n\t),\n\tuseSchema: false,\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tmoveFiles: ['bronze/vesselvisits','bronze/vesselvisits/archive'],\n\tformat: 'delimited',\n\tfileSystem: 'tdt',\n\tfolderPath: 'bronze/vesselvisits',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> source1\nColumnNameSpace derive(ATA = coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),\n\t\tETA = coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tETD = coalesce(toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd.MM.yy HH:mm:ss'),toTimestamp(ETD,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ETD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETD,'dd-MM-yyyy HH:mm:ss')),\n\t\tATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yyyy HH:mm:ss')),\n\t\tTimeFirstAvailabilty = coalesce(toTimestamp(Time_First_Availabilty,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_First_Availabilty,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tStartWork = coalesce( toTimestamp(Start_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(Start_Work,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Start_Work,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Start_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(Start_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tTimeDischargeComplete = coalesce(toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd.MM.yy HH:mm:ss'),toTimestamp(Time_Discharge_Complete,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tEndWork = coalesce( toTimestamp(End_Work,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(End_Work,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(End_Work,'dd/MM/yyyy HH:mm:ss'),toTimestamp(End_Work,'dd.MM.yy HH:mm:ss'),toTimestamp(End_Work,'dd/MM/yyyy\\'T\\'HH:mm:ss')),\n\t\tWeek = weekOfYear(iifNull(coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce( toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss')))),\n\t\tYear = year(iifNull(coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce(toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss')))),\n\t\tMonth = month(iifNull(coalesce( toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss')),coalesce( toTimestamp(ETA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss:SSSSS'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ETA,'dd.MM.yy HH:mm:ss'),toTimestamp(ETA,'dd/MM/yyyy HH:mm:ss'))))) ~> DerivedColumn1\nsource1 select(mapColumn(\n\t\teach(match(true()),\n\t\t\tregexReplace($$,' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnNameSpace\naggregate1 alterRow(upsertIf(true())) ~> AlterRow1\nDerivedColumn1 aggregate(groupBy(Carrier_Visit_Key),\n\teach(match(name!='Carrier_Visit_Key'), $$ = first($$))) ~> aggregate1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'tdt',\n\tfolderPath: 'silver/vesselvisits',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['Carrier_Visit_Key'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Vessel_GMPH_CTB')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source2"
						},
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerbianalyticsdata-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1"
						},
						{
							"name": "Join1"
						},
						{
							"name": "Select1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "DerivedColumn5"
						},
						{
							"name": "DerivedColumn6"
						},
						{
							"name": "Filter3"
						},
						{
							"name": "Filter4"
						},
						{
							"name": "DerivedColumn7"
						},
						{
							"name": "Join2"
						},
						{
							"name": "DerivedColumn8"
						},
						{
							"name": "DerivedColumn9"
						},
						{
							"name": "Select2"
						},
						{
							"name": "Filter5"
						},
						{
							"name": "Select3"
						},
						{
							"name": "aggregate2"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/moves') ~> source1\nsource(output(\n\t\tComplex_Id as string,\n\t\tFacility_Id as string,\n\t\tCarrier_Visit_Id as string,\n\t\tPhase as string,\n\t\tVisit_Nbr as string,\n\t\tCarrier_Mode as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tETA as timestamp,\n\t\tETD as timestamp,\n\t\tOperator_Line_Id as string,\n\t\tOperator_Line_Role as string,\n\t\tOperator_Line_Name as string,\n\t\tTime_First_Availabilty as string,\n\t\tTime_Discharge_Complete as string,\n\t\tService_Id as string,\n\t\tService_Name as string,\n\t\tVessel_Id as string,\n\t\tIB_VYG as string,\n\t\tOB_VYG as string,\n\t\tCarrier_Name as string,\n\t\tVessel_Class as string,\n\t\tPublished_ETA as string,\n\t\tPublished_ETD as string,\n\t\tStart_Work as string,\n\t\tEnd_Work as string,\n\t\tBegin_Receive_Date as string,\n\t\tCargo_Cutoff_Date as string,\n\t\tHazard_Cutoff_Date as string,\n\t\tReefer_Cutoff_Date as string,\n\t\tLabor_On_Board_Date as string,\n\t\tLabor_Off_Board_Date as string,\n\t\tOff_Port_Arrival_Date as string,\n\t\tOff_Port_Departure as string,\n\t\tPilot_On_Board_Date as string,\n\t\tPilot_Off_Board_Date as string,\n\t\tEst_BBK_Discharge as string,\n\t\tEst_BBK_Load as string,\n\t\tEst_Load as string,\n\t\tEst_Discharge as string,\n\t\tEst_Restow as string,\n\t\tEst_Shift as string,\n\t\tvvFlexString01 as string,\n\t\tvvFlexString02 as string,\n\t\tvvFlexString03 as string,\n\t\tvvFlexString04 as string,\n\t\tvvFlexString05 as string,\n\t\tvvFlexString06 as string,\n\t\tvvFlexString07 as string,\n\t\tvvFlexString08 as string,\n\t\tvvFlexDate01 as string,\n\t\tvvFlexDate02 as string,\n\t\tvvFlexDate03 as string,\n\t\tvvFlexDate04 as string,\n\t\tvvFlexDate05 as string,\n\t\tvvFlexDate06 as string,\n\t\tvvFlexDate07 as string,\n\t\tvvFlexDate08 as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tVessel_Classification as string,\n\t\tVessel_Class_Length_Overall_cm as integer,\n\t\tVessel_Class_Beam_cm as short,\n\t\tVessel_TEU_Capacity as string,\n\t\tLloyds_Code as string,\n\t\tTimeFirstAvailabilty as timestamp,\n\t\tStartWork as timestamp,\n\t\tTimeDischargeComplete as timestamp,\n\t\tEndWork as timestamp,\n\t\tWeek as integer,\n\t\tYear as integer,\n\t\tMonth as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/vessel_visits') ~> source2\nsource(output(\n\t\tdate_of_gang as date,\n\t\tGang as short,\n\t\tCall_Sign as string,\n\t\tVessel_name as string,\n\t\tImp_Voy as string,\n\t\tExp_Voy as string,\n\t\tQuay_Crane as short,\n\t\tvessel_Ops as string,\n\t\tZeile as short,\n\t\tCategory as string,\n\t\tCategory_description as string,\n\t\tSite as string,\n\t\tID as integer,\n\t\tvon_Call_Sign as string,\n\t\t{von_Brücke} as short,\n\t\tTeam as string,\n\t\tCode as string,\n\t\tStart as string,\n\t\tStop as string,\n\t\tAccounting as string,\n\t\tAktiv_Stunden as double,\n\t\tZeitsteuerung as string,\n\t\tVerz as string,\n\t\tLabour_No as integer,\n\t\tDuration as double,\n\t\tTDR as string,\n\t\tOperation_Report as integer,\n\t\tSystem as string,\n\t\tReise as integer,\n\t\taktiv_von as string,\n\t\taktiv_bis as string,\n\t\tStatus as string,\n\t\tStapler_B as boolean,\n\t\tStd_Stapler_B as boolean,\n\t\t{Letzte_Änderung} as string,\n\t\tVA as short,\n\t\tAR as short,\n\t\tCB as boolean,\n\t\tVC as short,\n\t\tZM as boolean,\n\t\tST as boolean,\n\t\tRS as boolean,\n\t\tSpr as short,\n\t\tStd_VA as double,\n\t\tStd_AR as double,\n\t\tStd_CB as double,\n\t\tStd_VC as double,\n\t\tStd_ZM as boolean,\n\t\tStd_RS as boolean,\n\t\tST_Std as boolean,\n\t\tStd_Spr as double,\n\t\tBemerkung as string,\n\t\tBrutto_Zeit as short,\n\t\tNetto_Zeit as boolean,\n\t\tStammcode as string,\n\t\tTerminal as string,\n\t\tDokument_Nr as boolean,\n\t\tnew_category as string,\n\t\tdesription_of_activity as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'silver/delays') ~> source3\nsource1 filter(Event_Type_Id==\"UNIT_DISCH\" || Event_Type_Id == \"UNIT_LOAD\") ~> Filter1\nFilter1, source2 join(source1@Carrier_Visit_Key == source2@Carrier_Visit_Key,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> Join1\nJoin1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tFacility_Id = source1@Facility_Id,\n\t\tComplex_Id = source1@Complex_Id,\n\t\tYard_Id,\n\t\tCarrier_Visit_Key = source1@Carrier_Visit_Key,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Location,\n\t\tTo_Location,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tCarry_CHE_Operator_Id,\n\t\tFetch_CHE_Operator_Id,\n\t\tPut_CHE_Operator_Id,\n\t\tFetch_CHE_Id,\n\t\tFetch_CHE_Kind,\n\t\tCarry_CHE_Id,\n\t\tCarry_CHE_Kind,\n\t\tPut_CHE_Id,\n\t\tPut_CHE_Kind,\n\t\tQC_CHE_Id,\n\t\tQC_CHE_Kind,\n\t\tt_carry_complete,\n\t\tt_put,\n\t\tt_fetch,\n\t\tt_dispatch,\n\t\tt_discharge,\n\t\tt_carry_dispatch,\n\t\tt_carry_fetch_ready,\n\t\tt_carry_put_ready,\n\t\tdist_carry,\n\t\tdist_start,\n\t\tTwin_Fetch,\n\t\tTwin_Carry,\n\t\tTwin_Put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tto_pos_gkey,\n\t\tfm_pos_gkey,\n\t\tRestow_Reason,\n\t\tContainer_Line_Id,\n\t\tContainer_Line_Role,\n\t\tpow,\n\t\tufv_gkey,\n\t\tBerth_Id,\n\t\tGoods_And_Ctr_Wt_Kg,\n\t\tactive_ufv,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tShipper_Id,\n\t\tConsignee_Id,\n\t\tCommodity_Id,\n\t\tATA = source1@ATA,\n\t\tATD = source1@ATD,\n\t\tRehandles,\n\t\tYear = source1@Year,\n\t\tMonth = source1@Month,\n\t\tWeek = source1@Week,\n\t\tCarrier_Visit_Id,\n\t\tCarrier_Mode,\n\t\tOperator_Line_Id,\n\t\tOperator_Line_Name,\n\t\tService_Name,\n\t\tVessel_Id,\n\t\tCarrier_Name,\n\t\tVessel_Class,\n\t\tVessel_Classification,\n\t\tVisit_Nbr\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nSelect1 derive(Time_Completed_Date_Time = iif(Event_Type_Id== \"UNIT_LOAD\", iifNull(t_put,t_carry_complete),iifNull(t_fetch,t_discharge))) ~> DerivedColumn1\nDerivedColumn1 derive(Time = toString(Time_Completed_Date_Time,'HH:mm:ss'),\n\t\tDate = toDate(toString(Time_Completed_Date_Time,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn6 derive(Shift_Start_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','12:00:00')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','18:00:00')),\r\n                toTimestamp(concat(toString(subDays(Date,1)),' ','24:00:00'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','06:00:00')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','14:00:00')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','22:00:00')),\r\n\t\t\t\ttoTimestamp(concat(toString(subDays(Date,1)),' ','22:00:00')))))),\n\t\tShift_End_Time = iif(Day_Of_Week==1 || Day_Of_Week==7,\r\n    iif(Time>=toString('06:00:00') && Time<toString('12:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','11:59:59')),\r\n        iif(Time>=toString('12:00:00') && Time<toString('18:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','17:59:59')),\r\n            iif(Time>=toString('18:00:00') && Time<toString('24:00:00'),\r\n                toTimestamp(concat(toString(Date),' ','23:59:59')),\r\n                toTimestamp(concat(toString(Date),' ','05:59:59'))))),\r\n    iif(Time>=toString('06:00:00') && Time<toString('14:00:00'),\r\n        toTimestamp(concat(toString(Date),' ','13:59:59')),\r\n        iif(Time>=toString('14:00:00') && Time<toString('22:00:00'),\r\n            toTimestamp(concat(toString(Date),' ','21:59:59')),\r\n            iif(Time>=toString('22:00:00'),\r\n                toTimestamp(concat(toString(addDays(Date,1)),' ','05:59:59')),\r\n\t\t\t\ttoTimestamp(concat(toString(Date),' ','05:59:59'))))))) ~> DerivedColumn3\nDerivedColumn5 aggregate(groupBy(Carrier_Visit_Id,\n\t\tpow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift),\n\tFirst_Lift = min(Time_Completed_Date_Time),\n\t\tLast_Lift = max(Time_Completed_Date_Time),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nFilter4 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(Shift_Date),0),\n\t\tMonth = iifNull(month(Shift_Date),0),\n\t\tWeek = iifNull(weekOfYear(Shift_Date),0),\n\t\tPow_No = toInteger(iif(left(pow,2)=='SK',substring(pow, 3),iif(left(pow,1)=='M',substring(pow, 2),'0')))) ~> DerivedColumn4\nDerivedColumn3 derive(Shift = iif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('06:00:00'),1,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('14:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('12:00:00'),2,\r\niif(toString(Shift_Start_Time, 'HH:mm:ss')==toString('22:00:00')||toString(Shift_Start_Time, 'HH:mm:ss')==toString('18:00:00'),3,4)))) ~> DerivedColumn5\nDerivedColumn2 derive(Day_Of_Week = dayOfWeek(iif(Time<toString('06:00:00'),subDays(Date,1),Date)),\n\t\tShift_Date = iif(Time<toString('06:00:00'),subDays(Date,1),Date)) ~> DerivedColumn6\nsource3 filter(Code=='BKO' || Code=='MTG'|| Code=='OFF'||Code=='AIT'||Code=='BBK'||Code=='LBR'||Code=='AIL' || Code=='COS'|| Code=='DTW'||Code=='INC'||Code=='LCA'||Code=='MTW'\r\n|| Code=='OTL'||Code=='WCC'||Code=='WEA'||Code=='WTG'||Code=='WVL') ~> Filter3\nAggregate1 filter(pow!='') ~> Filter4\nFilter3 derive(Start_datetime = toTimestamp(concat(toString(date_of_gang),' ',Start)),\n\t\tStop_datetime = iif(Stop<Start,toTimestamp(concat(toString(addDays(date_of_gang,1)),' ',Stop)),toTimestamp(concat(toString(date_of_gang),' ',Stop)))) ~> DerivedColumn7\nFilter5, Select2 join(Pow_No == Quay_Crane\n\t&& First_Lift <= Start_datetime\n\t&& Last_Lift >= Start_datetime,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> Join2\nDerivedColumn7 derive(Delay = Stop_datetime-Start_datetime) ~> DerivedColumn8\naggregate2 derive(Final_WorkTime = WorkTime-iifNull(Delay,0)) ~> DerivedColumn9\nDerivedColumn8 select(mapColumn(\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select2\nDerivedColumn4 filter(Pow_No!=0) ~> Filter5\nJoin2 select(mapColumn(\n\t\tpow,\n\t\tCarrier_Visit_Id,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear = DerivedColumn4@Year,\n\t\tMonth = DerivedColumn4@Month,\n\t\tWeek = DerivedColumn4@Week,\n\t\tPow_No,\n\t\tdate_of_gang,\n\t\tVessel_name,\n\t\tQuay_Crane,\n\t\tCode,\n\t\tStart,\n\t\tStop,\n\t\tDuration,\n\t\tdesription_of_activity,\n\t\tStart_datetime,\n\t\tStop_datetime,\n\t\tDelay\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select3\nSelect3 aggregate(groupBy(Carrier_Visit_Id,\n\t\tpow,\n\t\tShift_Start_Time,\n\t\tShift_End_Time,\n\t\tShift_Date,\n\t\tShift,\n\t\tFirst_Lift,\n\t\tLast_Lift,\n\t\tMove_Count,\n\t\tWorkTime,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tPow_No),\n\tDelay = sum(Delay)) ~> aggregate2\nDerivedColumn9 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'eurogatectb',\n\tfolderPath: 'gold/vessel_gmph',\n\ttruncate: true,\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/powerbianalyticsdata-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/YardBlocks_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Yard_Id as string,",
						"          mdl_bin_subclass as string,",
						"          mdl_bin_level as short,",
						"          mdl_status as string,",
						"          mdl_pos_name as string,",
						"          mdl_pos_gkey as long,",
						"          blk_bin_subclass as string,",
						"          blk_bin_level as short,",
						"          blk_status as string,",
						"          blk_block_type as string,",
						"          label_scheme_full_position as string,",
						"          blk_pos_name as string,",
						"          blk_pos_gkey as long,",
						"          sect_bin_subclass as string,",
						"          sect_bin_level as short,",
						"          sect_status as string,",
						"          sect_pos_name as string,",
						"          sect_pos_gkey as long,",
						"          stk_bin_subclass as string,",
						"          stk_bin_level as short,",
						"          stk_status as string,",
						"          stk_pos_name as string,",
						"          stk_pos_gkey as long,",
						"          bin_type as string,",
						"          pos_gkey as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'bronze/yardblock',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source1 filter(Facility_Id=='GCT' && blk_status=='ACT') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'silver/yardblock',",
						"     truncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/YardInventory_gpa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "yardblock"
						},
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "vsl"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "invInYard"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ufv_gkey as long,",
						"          Facility_Id as string,",
						"          Unit_Nbr as string,",
						"          Freight_Kind_Id as string,",
						"          Category_Id as string,",
						"          Unit_Visit_State_Id as string,",
						"          Unit_Transit_State_Id as string,",
						"          Unit_In_Facility_Time as string,",
						"          Unit_Facility_Departed_Time as string,",
						"          Time_Of_Last_Move as string,",
						"          Unit_Facility_Visit_Retired as string,",
						"          Arrive_Pos_Loctype as string,",
						"          Last_Pos_Loctype as string,",
						"          LAST_POS_BIN as long,",
						"          Actual_Inbound_CV_Key as long,",
						"          Actual_Outbound_CV_Key as long,",
						"          Intended_Outbound_CV_Key as long,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          POD as string,",
						"          POL as string,",
						"          Damage_Flag as string,",
						"          Hazardous_Flag as string,",
						"          Requires_Power_Flag as short,",
						"          OOG_Flag as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'bronze/invInYard/load/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"source(output(",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Yard_Id as string,",
						"          mdl_bin_subclass as string,",
						"          mdl_bin_level as short,",
						"          mdl_status as string,",
						"          mdl_pos_name as string,",
						"          mdl_pos_gkey as long,",
						"          blk_bin_subclass as string,",
						"          blk_bin_level as short,",
						"          blk_status as string,",
						"          blk_block_type as string,",
						"          label_scheme_full_position as string,",
						"          blk_pos_name as string,",
						"          blk_pos_gkey as long,",
						"          sect_bin_subclass as string,",
						"          sect_bin_level as short,",
						"          sect_status as string,",
						"          sect_pos_name as string,",
						"          sect_pos_gkey as long,",
						"          stk_bin_subclass as string,",
						"          stk_bin_level as short,",
						"          stk_status as string,",
						"          stk_pos_name as string,",
						"          stk_pos_gkey as long,",
						"          bin_type as string,",
						"          pos_gkey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'silver/yardblock') ~> yardblock",
						"source(output(",
						"          Carrier_Visit_Key as long,",
						"          Facility_Id as string,",
						"          Carrier_Visit_Id as string,",
						"          Phase as string,",
						"          Visit_Nbr as short,",
						"          Carrier_Mode as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Time_First_Availabilty as string,",
						"          Time_Discharge_Complete as string,",
						"          Service_Id as string,",
						"          Service_Name as string,",
						"          Vessel_Id as string,",
						"          IB_VYG as string,",
						"          OB_VYG as string,",
						"          Carrier_Name as string,",
						"          Vessel_Class as string,",
						"          Published_ETA as timestamp,",
						"          Published_ETD as timestamp,",
						"          Start_Work as string,",
						"          End_Work as string,",
						"          TimeFirstAvailabilty as timestamp,",
						"          StartWork as timestamp,",
						"          TimeDischargeComplete as timestamp,",
						"          EndWork as timestamp,",
						"          Week as integer,",
						"          Year as integer,",
						"          Month as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'silver/vesselvisits') ~> vsl",
						"source1 filter(Facility_Id=='GCT') ~> filter1",
						"filter1, yardblock join(LAST_POS_BIN == pos_gkey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join2 select(mapColumn(",
						"          ufv_gkey,",
						"          Facility_Id = source1@Facility_Id,",
						"          Unit_Nbr,",
						"          Freight_Kind_Id,",
						"          Category_Id,",
						"          Unit_Visit_State_Id,",
						"          Unit_Transit_State_Id,",
						"          Unit_In_Facility_Time,",
						"          Unit_Facility_Departed_Time,",
						"          Time_Of_Last_Move,",
						"          Unit_Facility_Visit_Retired,",
						"          Arrive_Pos_Loctype,",
						"          Last_Pos_Loctype,",
						"          LAST_POS_BIN,",
						"          Actual_Inbound_CV_Key,",
						"          Actual_Outbound_CV_Key,",
						"          Intended_Outbound_CV_Key,",
						"          Goods_And_Ctr_Wt_Kg,",
						"          POD,",
						"          POL,",
						"          Damage_Flag,",
						"          Hazardous_Flag,",
						"          Requires_Power_Flag,",
						"          OOG_Flag,",
						"          Complex_Id,",
						"          mdl_status,",
						"          mdl_pos_name,",
						"          mdl_pos_gkey,",
						"          blk_bin_level,",
						"          blk_status,",
						"          blk_block_type,",
						"          label_scheme_full_position,",
						"          blk_pos_name,",
						"          blk_pos_gkey,",
						"          sect_bin_level,",
						"          sect_status,",
						"          sect_pos_name,",
						"          sect_pos_gkey,",
						"          stk_bin_level,",
						"          stk_status,",
						"          stk_pos_name,",
						"          stk_pos_gkey,",
						"          pos_gkey,",
						"          Carrier_Visit_Id,",
						"          Service_Id,",
						"          Carrier_Mode,",
						"          Vessel_Id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"select1 derive(SnapshotDate = currentDate()) ~> derivedColumn1",
						"vsl select(mapColumn(",
						"          Carrier_Visit_Key,",
						"          Facility_Id,",
						"          Carrier_Visit_Id,",
						"          Phase,",
						"          Visit_Nbr,",
						"          Carrier_Mode,",
						"          Service_Id,",
						"          Service_Name,",
						"          Vessel_Id,",
						"          Carrier_Name,",
						"          Vessel_Class,",
						"          Published_ETA,",
						"          Published_ETD",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"join1, select2 join(Intended_Outbound_CV_Key == Carrier_Visit_Key,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> join2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Complex_Id as string,",
						"          Facility_Id as string,",
						"          Yard_Id as string,",
						"          mdl_bin_subclass as string,",
						"          mdl_bin_level as short,",
						"          mdl_status as string,",
						"          mdl_pos_name as string,",
						"          mdl_pos_gkey as long,",
						"          blk_bin_subclass as string,",
						"          blk_bin_level as short,",
						"          blk_status as string,",
						"          blk_block_type as string,",
						"          label_scheme_full_position as string,",
						"          blk_pos_name as string,",
						"          blk_pos_gkey as long,",
						"          sect_bin_subclass as string,",
						"          sect_bin_level as short,",
						"          sect_status as string,",
						"          sect_pos_name as string,",
						"          sect_pos_gkey as long,",
						"          stk_bin_subclass as string,",
						"          stk_bin_level as short,",
						"          stk_status as string,",
						"          stk_pos_name as string,",
						"          stk_pos_gkey as long,",
						"          bin_type as string,",
						"          pos_gkey as long",
						"     ),",
						"     format: 'delta',",
						"     fileSystem: 'gpa',",
						"     folderPath: 'silver/invInYard',",
						"     truncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> invInYard"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Yard_che_productivity_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1",
							"description": "Filtering rows using expressions on columns 'Fetch_CHE_Kind' and 'Put_CHE_Kind' "
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Fetch_CHE_Kind==\"RTG\" || Put_CHE_Kind==\"RTG\") ~> Filter1\nFilter1 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Fetch_CHE_Id,\n\t\tPut_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/yard_che_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Fetch_CHE_Id','Put_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Yard_che_productivity_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1",
							"description": "Filtering rows using expressions on columns 'Fetch_CHE_Kind' and 'Put_CHE_Kind' "
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Fetch_CHE_Kind==\"RTG\" || Put_CHE_Kind==\"RTG\") ~> Filter1\nFilter1 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Fetch_CHE_Id,\n\t\tPut_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mict',\n\tfolderPath: 'gold/yard_che_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Fetch_CHE_Id','Put_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Yard_che_productivity_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Using Moves as source data",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filter1",
							"description": "Filtering rows using expressions on columns 'Fetch_CHE_Kind' and 'Put_CHE_Kind' "
						},
						{
							"name": "DerivedColumn2"
						},
						{
							"name": "Aggregate1"
						},
						{
							"name": "DerivedColumn4"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as short,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as integer,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as double,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as string,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: true,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'silver/moves') ~> source1\nsource1 filter(Fetch_CHE_Kind==\"RTG\" || Put_CHE_Kind==\"RTG\") ~> Filter1\nFilter1 derive(CarryCompleteTime = toString(t_carry_complete,'HH:mm:ss'),\n\t\tCarryCompleteDate = toDate(toString(t_carry_complete,'yyyy-MM-dd'))) ~> DerivedColumn2\nDerivedColumn2 aggregate(groupBy(Fetch_CHE_Id,\n\t\tPut_CHE_Id,\n\t\tCarryCompleteDate),\n\tFirst_Lift = min(t_carry_complete),\n\t\tLast_Lift = max(t_carry_complete),\n\t\tMove_Count = countDistinct(mve_gkey)) ~> Aggregate1\nAggregate1 derive(WorkTime = Last_Lift-First_Lift,\n\t\tYear = iifNull(year(CarryCompleteDate),0),\n\t\tMonth = iifNull(month(CarryCompleteDate),0),\n\t\tWeek = iifNull(weekOfYear(CarryCompleteDate),0)) ~> DerivedColumn4\nDerivedColumn4 alterRow(upsertIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'mnhpi',\n\tfolderPath: 'gold/yard_che_productivity',\n\tmergeSchema: true,\n\tautoCompact: true,\n\toptimizedWrite: true,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: false,\n\tupdateable: false,\n\tupsertable: true,\n\tkeys:['Fetch_CHE_Id','Put_CHE_Id','CarryCompleteDate'],\n\tumask: 0777,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('key',\n\t\t0,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_violations')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "deckingfile"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RemoveExtraColumns"
						},
						{
							"name": "DHDeckingPos"
						},
						{
							"name": "DH4",
							"description": "RemoveTOPOSNameANDTimeStamp\n\nRemove TOPOSName\nand \nTimeStamp"
						},
						{
							"name": "MH2",
							"description": "MERemoveExtraColumns\nRenaming MoveHistory to MH2 with columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH4",
							"description": "TPutDate\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH5",
							"description": "SortUnitId\nSorting rows on columns 'Unit Nbr, t_put'"
						},
						{
							"name": "MH6",
							"description": "MHDeckingPosName\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name'"
						},
						{
							"name": "DH6"
						},
						{
							"name": "DH7"
						},
						{
							"name": "DH8"
						},
						{
							"name": "DH9a"
						},
						{
							"name": "DH11"
						},
						{
							"name": "MH3"
						},
						{
							"name": "DH5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as string,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as string,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as string,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as integer,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as string,",
						"          to_pos_tier as short,",
						"          total_score as short,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-decking/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> deckingfile",
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as string,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as string,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as string,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as string,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as string,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as string,",
						"          t_put as string,",
						"          t_fetch as string,",
						"          t_dispatch as string,",
						"          t_discharge as string,",
						"          t_carry_dispatch as string,",
						"          t_carry_fetch_ready as string,",
						"          t_carry_put_ready as string,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as string,",
						"          fm_pos_gkey as string,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as string,",
						"          ATD as string,",
						"          Rehandles as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-moves/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"deckingfile select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          time_stamp,",
						"          decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveExtraColumns",
						"RemoveExtraColumns derive(DeckingPosName = substring(to_pos_name,8),",
						"          DeckingDateTime = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS'),",
						"          Decking_Time_Outer_Limit = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS') + hours(5)) ~> DHDeckingPos",
						"DHDeckingPos select(mapColumn(",
						"          Gkey = gkey,",
						"          Unit_Id = unit_id,",
						"          Decking_Date_Time = DeckingDateTime,",
						"          Decking_Type = decking_type,",
						"          Decking_Pos_Name = DeckingPosName,",
						"          Decking_Time_Outer_Limit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DH4",
						"MoveHistory select(mapColumn(",
						"          Unit_Nbr = {Unit Nbr},",
						"          T_Put = t_put,",
						"          Event_Type_Id = {Event Type Id},",
						"          Move_Kind = {Move Kind},",
						"          From_Position_Name = {From Position Name},",
						"          To_Position_Name = {To Position Name},",
						"          Put_CHE_Operator_Id = {Put CHE Operator Id},",
						"          Put_CHE_Id = {Put CHE Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MH2",
						"MH3 derive(MH_Date = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS'),",
						"          MH_Date_Less_3_Hours = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS') - hours(3)) ~> MH4",
						"MH4 sort(asc(Unit_Nbr, true),",
						"     asc(MH_Date, true)) ~> MH5",
						"MH5 derive(To_Position_Name = substring(To_Position_Name,8)) ~> MH6",
						"DH5, MH6 join(Unit_Id == Unit_Nbr,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> DH6",
						"DH6 select(mapColumn(",
						"          Gkey,",
						"          Unit_Id,",
						"          Decking_Date_Time,",
						"          Decking_Type,",
						"          Decking_Pos_Name,",
						"          Decking_Time_Outer_Limit,",
						"          Unit_Nbr,",
						"          T_Put,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Put_CHE_Operator_Id,",
						"          Put_CHE_Id,",
						"          MH_Date,",
						"          MH_Date_Less_3_Hours",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DH7",
						"DH7 window(over({Unit Id} = Unit_Id),",
						"     asc(Unit_Id, true),",
						"     asc(Decking_Date_Time, true),",
						"     Unit_Id_Row_Num = rowNumber()) ~> DH8",
						"DH8 derive(Time_Gap_in_Minutes = round((MH_Date-Decking_Date_Time)/(1000*60),2),",
						"          Pass_01_POS_Name_Match = iif(Decking_Pos_Name==To_Position_Name, 'PASS', 'FAIL'),",
						"          Decking_Type_To_be_Used_or_Not = iif(\r",
						"Decking_Type=='Vessel Discharge' && Move_Kind=='RECV', 'FAIL', \r",
						"     iif(\r",
						"     Decking_Type=='Vessel Discharge' && Move_Kind=='DSCH', 'PASS',\r",
						"          iif(\r",
						"          Decking_Type=='XD Rehandle Request' && Move_Kind=='RECV', 'FAIL', \r",
						"               iif(\r",
						"               Decking_Type=='XD Rehandle Request' && Move_Kind=='RECV', 'FAIL',\r",
						"                    iif(\r",
						"                    Decking_Type=='Gate Receival Assign Position' && Move_Kind=='RECV', 'PASS',\r",
						"                         iif(\r",
						"                         Decking_Type=='Gate Receival Assign Position' && Move_Kind=='RECV', 'FAIL', \r",
						"                              iif(\r",
						"                              Decking_Type=='XD Refine Request' && Move_Kind=='RECV', 'PASS', \r",
						"                                   iif(\r",
						"                                   Decking_Type=='XD Refine Request' && Move_Kind=='RECV', 'PASS',\r",
						"                                        iif(\r",
						"                                        Decking_Type=='XD Drop if Floating Refinen' && Move_Kind=='RECV', 'PASS',\r",
						"                                             iif(\r",
						"                                             Decking_Type=='XD Drop if Floating Refine' && Move_Kind=='RECV', 'PASS',\r",
						"                                                  iif(\r",
						"                                                  Decking_Type=='Bump Intruder' && Move_Kind=='RECV', 'PASS',\r",
						"                                                       iif(\r",
						"                                                       Decking_Type=='Bump Intruder' && Move_Kind=='RECV', 'PASS',\r",
						"                                                            iif(\r",
						"                                                            Decking_Type=='User <Ctrl>-A' && Move_Kind=='RECV', 'FAIL',\r",
						"                                                                 iif(\r",
						"                                                                 Decking_Type=='User <Ctrl>-A' && Move_Kind=='RECV', 'FAIL'\r",
						"                                                                      ,'FAIL'\r",
						"                                                                      )\r",
						"                                                                 )\r",
						"                                                            )\r",
						"                                                       )\r",
						"                                                  )\r",
						"                                             )\r",
						"                                        )\r",
						"                                   )     \r",
						"                              )\r",
						"                         )\r",
						"                    )\r",
						"               )\r",
						"          )\r",
						"     ),",
						"          DH_To_Pos_Name = substring(Decking_Pos_Name, 1, 5),",
						"          MH_To_POS_Name = substring(To_Position_Name, 1, 5)) ~> DH9a",
						"DH9a alterRow(insertIf(true())) ~> DH11",
						"MH2 filter((Move_Kind == 'RECV' || Move_Kind == 'DSCH')) ~> MH3",
						"DH4 filter(Decking_Pos_Name!='FLD') ~> DH5",
						"DH11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'silver/cmsa-violations-output',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['gkey'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Gkey,",
						"          Unit_Id,",
						"          Decking_Date_Time,",
						"          Decking_Type,",
						"          Decking_Pos_Name,",
						"          Decking_Time_Outer_Limit,",
						"          Unit_Nbr,",
						"          T_Put,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Put_CHE_Operator_Id,",
						"          Put_CHE_Id,",
						"          MH_Date,",
						"          MH_Date_Less_3_Hours,",
						"          Unit_Id_Row_Num,",
						"          Time_Gap_in_Minutes,",
						"          Pass_01_POS_Name_Match,",
						"          Decking_Type_To_be_Used_or_Not,",
						"          DH_To_Pos_Name,",
						"          MH_To_POS_Name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_violations__upto_merge')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "deckingfile"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "DHSink",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MHSink",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RemoveExtraColumns"
						},
						{
							"name": "DHDeckingPos"
						},
						{
							"name": "DH4",
							"description": "RemoveTOPOSNameANDTimeStamp\n\nRemove TOPOSName\nand \nTimeStamp"
						},
						{
							"name": "MH2",
							"description": "MERemoveExtraColumns\nRenaming MoveHistory to MH2 with columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH4",
							"description": "TPutDate\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH5",
							"description": "SortUnitId\nSorting rows on columns 'Unit Nbr, t_put'"
						},
						{
							"name": "MH6",
							"description": "MHDeckingPosName\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name'"
						},
						{
							"name": "DH6"
						},
						{
							"name": "DH7"
						},
						{
							"name": "DH11"
						},
						{
							"name": "MH3"
						},
						{
							"name": "DH5"
						},
						{
							"name": "MH7Alter"
						}
					],
					"scriptLines": [
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as string,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as string,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as string,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as integer,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as string,",
						"          to_pos_tier as short,",
						"          total_score as short,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-decking/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> deckingfile",
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as string,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as string,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as string,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as string,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as string,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as string,",
						"          t_put as string,",
						"          t_fetch as string,",
						"          t_dispatch as string,",
						"          t_discharge as string,",
						"          t_carry_dispatch as string,",
						"          t_carry_fetch_ready as string,",
						"          t_carry_put_ready as string,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as string,",
						"          fm_pos_gkey as string,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as string,",
						"          ATD as string,",
						"          Rehandles as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-moves/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"deckingfile select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          time_stamp,",
						"          decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveExtraColumns",
						"RemoveExtraColumns derive(DeckingPosName = substring(to_pos_name,8),",
						"          DeckingDateTime = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS'),",
						"          Decking_Time_Outer_Limit = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS') + hours(5)) ~> DHDeckingPos",
						"DHDeckingPos select(mapColumn(",
						"          Gkey = gkey,",
						"          Unit_Id = unit_id,",
						"          Decking_Date_Time = DeckingDateTime,",
						"          Decking_Type = decking_type,",
						"          Decking_Pos_Name = DeckingPosName,",
						"          Decking_Time_Outer_Limit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DH4",
						"MoveHistory select(mapColumn(",
						"          Unit_Nbr = {Unit Nbr},",
						"          T_Put = t_put,",
						"          Event_Type_Id = {Event Type Id},",
						"          Move_Kind = {Move Kind},",
						"          From_Position_Name = {From Position Name},",
						"          To_Position_Name = {To Position Name},",
						"          Put_CHE_Operator_Id = {Put CHE Operator Id},",
						"          Put_CHE_Id = {Put CHE Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MH2",
						"MH3 derive(MH_Date = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS'),",
						"          MH_Date_Less_3_Hours = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS') - hours(3)) ~> MH4",
						"MH4 sort(asc(Unit_Nbr, true),",
						"     asc(MH_Date, true)) ~> MH5",
						"MH5 derive(To_Position_Name = substring(To_Position_Name,8)) ~> MH6",
						"DH5, MH6 join(Unit_Id == Unit_Nbr,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> DH6",
						"DH6 select(mapColumn(",
						"          Gkey,",
						"          Unit_Id,",
						"          Decking_Date_Time,",
						"          Decking_Type,",
						"          Decking_Pos_Name,",
						"          Decking_Time_Outer_Limit,",
						"          Unit_Nbr,",
						"          T_Put,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Put_CHE_Operator_Id,",
						"          Put_CHE_Id,",
						"          MH_Date,",
						"          MH_Date_Less_3_Hours",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DH7",
						"DH7 alterRow(insertIf(true())) ~> DH11",
						"MH2 filter((Move_Kind == 'RECV' || Move_Kind == 'DSCH')) ~> MH3",
						"DH4 filter(Decking_Pos_Name!='FLD') ~> DH5",
						"MH6 alterRow(upsertIf(true())) ~> MH7Alter",
						"DH11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          gkey as integer,",
						"          Unit_Id as string,",
						"          Decking_Date_Time as timestamp,",
						"          Decking_Type as string,",
						"          DH_To_Pos_Name as string,",
						"          MH_Move_Kind as string,",
						"          MH_To_POS_Name as string,",
						"          Previous_Row_Decking_Date_Time as timestamp,",
						"          Unit_Id_Row_Num as integer,",
						"          Time_Gap_in_Minutes as double,",
						"          Pass_01_POS_Name_Match as string,",
						"          Decking_Type_To_be_Used_or_Not as string",
						"     ),",
						"     format: 'delta',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'silver/cmsa-violations-output',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['gkey'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DHSink",
						"MH7Alter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'silver/cmsa-violations-output',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MHSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/cmsa_violations_test_DH6')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "deckingfile"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "RemoveExtraColumns"
						},
						{
							"name": "DHDeckingPos"
						},
						{
							"name": "DH4",
							"description": "RemoveTOPOSNameANDTimeStamp\n\nRemove TOPOSName\nand \nTimeStamp"
						},
						{
							"name": "MH2",
							"description": "MERemoveExtraColumns\nRenaming MoveHistory to MH2 with columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH4",
							"description": "TPutDate\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name, Put CHE Operator Id, Put CHE Id'"
						},
						{
							"name": "MH5",
							"description": "SortUnitId\nSorting rows on columns 'Unit Nbr, t_put'"
						},
						{
							"name": "MH6",
							"description": "MHDeckingPosName\nCreating/updating the columns 'Unit Nbr, t_put, Event Type Id, Move Kind, From Position Name, To Position Name'"
						},
						{
							"name": "DH6"
						},
						{
							"name": "DH11"
						},
						{
							"name": "MH3"
						},
						{
							"name": "DH5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as string,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as string,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as string,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as integer,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as string,",
						"          to_pos_tier as short,",
						"          total_score as short,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-decking/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> deckingfile",
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as string,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as string,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as string,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as string,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as string,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as string,",
						"          t_put as string,",
						"          t_fetch as string,",
						"          t_dispatch as string,",
						"          t_discharge as string,",
						"          t_carry_dispatch as string,",
						"          t_carry_fetch_ready as string,",
						"          t_carry_put_ready as string,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as string,",
						"          fm_pos_gkey as string,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as string,",
						"          ATD as string,",
						"          Rehandles as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'bronze/violations-moves/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"deckingfile select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          time_stamp,",
						"          decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveExtraColumns",
						"RemoveExtraColumns derive(DeckingPosName = substring(to_pos_name,8),",
						"          DeckingDateTime = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS'),",
						"          Decking_Time_Outer_Limit = toTimestamp(time_stamp,'yyyy mm dd HH:mm:ss.SSS') + hours(5)) ~> DHDeckingPos",
						"DHDeckingPos select(mapColumn(",
						"          Gkey = gkey,",
						"          Unit_Id = unit_id,",
						"          Decking_Date_Time = DeckingDateTime,",
						"          Decking_Type = decking_type,",
						"          Decking_Pos_Name = DeckingPosName,",
						"          Decking_Time_Outer_Limit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DH4",
						"MoveHistory select(mapColumn(",
						"          Unit_Nbr = {Unit Nbr},",
						"          T_Put = t_put,",
						"          Event_Type_Id = {Event Type Id},",
						"          Move_Kind = {Move Kind},",
						"          From_Position_Name = {From Position Name},",
						"          To_Position_Name = {To Position Name},",
						"          Put_CHE_Operator_Id = {Put CHE Operator Id},",
						"          Put_CHE_Id = {Put CHE Id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MH2",
						"MH3 derive(MH_Date = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS'),",
						"          MH_Date_Less_3_Hours = toTimestamp(T_Put,'yyyy mm dd HH:mm:ss.SSS') - hours(3)) ~> MH4",
						"MH4 sort(asc(Unit_Nbr, true),",
						"     asc(MH_Date, true)) ~> MH5",
						"MH5 derive(To_Position_Name = substring(To_Position_Name,8)) ~> MH6",
						"DH5, MH6 join(Unit_Id == Unit_Nbr",
						"     && Decking_Date_Time >= MH_Date_Less_3_Hours",
						"     && Decking_Date_Time <= MH_Date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> DH6",
						"DH6 alterRow(insertIf(true())) ~> DH11",
						"MH2 filter((Move_Kind == 'RECV' || Move_Kind == 'DSCH')) ~> MH3",
						"DH4 filter(Decking_Pos_Name!='FLD') ~> DH5",
						"DH11 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa-violations',",
						"     folderPath: 'silver/DH6Test',",
						"     deltaTruncate: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['gkey'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Gkey,",
						"          Unit_Id,",
						"          Decking_Date_Time,",
						"          Decking_Type,",
						"          Decking_Pos_Name,",
						"          Decking_Time_Outer_Limit,",
						"          Unit_Nbr,",
						"          T_Put,",
						"          Event_Type_Id,",
						"          Move_Kind,",
						"          From_Position_Name,",
						"          To_Position_Name,",
						"          Put_CHE_Operator_Id,",
						"          Put_CHE_Id,",
						"          MH_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jobstepping_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" || typeDescription==\"AYCO\" || typeDescription==\"TYCO\" || typeDescription==\"AVDR\" || typeDescription==\"TVDR\" || typeDescription==\"AVCO\" || typeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(jobStep = iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYCO' && typeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVDR' && typeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYDR' && typeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVCO' && typeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'gold/jobstep',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          Year,",
						"          Month,",
						"          Week",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jobstepping_gti')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" || typeDescription==\"AYCO\" || typeDescription==\"TYCO\" || typeDescription==\"AVDR\" || typeDescription==\"TVDR\" || typeDescription==\"AVCO\" || typeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(jobStep = iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYCO' && typeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVDR' && typeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYDR' && typeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVCO' && typeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gti',",
						"     folderPath: 'gold/jobstep',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          Year,",
						"          Month,",
						"          Week",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jobstepping_kssp')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "aggregate2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'kssp',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" || typeDescription==\"AYCO\" || typeDescription==\"TYCO\" || typeDescription==\"AVDR\" || typeDescription==\"TVDR\" || typeDescription==\"AVCO\" || typeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
						"aggregate2 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(jobStep = iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYCO' && typeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVDR' && typeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYDR' && typeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVCO' && typeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"filter1 aggregate(groupBy(ecEventGkey),",
						"     each(match(name!='ecEventGkey'), $$ = first($$))) ~> aggregate2",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'kssp',",
						"     folderPath: 'gold/jobstep',",
						"     deltaTruncate: true,",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          Year,",
						"          Month,",
						"          Week",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jobstepping_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" || typeDescription==\"AYCO\" || typeDescription==\"TYCO\" || typeDescription==\"AVDR\" || typeDescription==\"TVDR\" || typeDescription==\"AVCO\" || typeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(jobStep = iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYCO' && typeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVDR' && typeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYDR' && typeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVCO' && typeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/jobstep',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          Year,",
						"          Month,",
						"          Week",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/jobstepping_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "window1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ecEventGkey as long,",
						"          yardGkey as short,",
						"          YardID as string,",
						"          FcyID as string,",
						"          cheKind as string,",
						"          cheName as string,",
						"          cheID as long,",
						"          EcEventTime as timestamp,",
						"          type as short,",
						"          subType as short,",
						"          typeDescription as string,",
						"          fromCheIdName as boolean,",
						"          ToCheIdName as boolean,",
						"          unitIdName as string,",
						"          powName as string,",
						"          poolName as string,",
						"          workQueue as string,",
						"          travelDistance as short,",
						"          moveKind as string,",
						"          isTwinMove as boolean,",
						"          startDistance as short,",
						"          workAssignmentId as double,",
						"          unitReference as string,",
						"          tranId as string,",
						"          locType as string,",
						"          locId as string,",
						"          locSlot as string,",
						"          opsPosId as string,",
						"          unladenLoctype as string,",
						"          unladenLocid as string,",
						"          unladenLocSlot as string,",
						"          ladenLoctype as string,",
						"          ladenLocid as string,",
						"          ladenLocSlot as string,",
						"          lastEstMoveTime as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'silver/ecevents') ~> source1",
						"source1 filter(cheKind==\"ITV\" && (typeDescription==\"AYDR\" || typeDescription==\"TYDR\" || typeDescription==\"AYCO\" || typeDescription==\"TYCO\" || typeDescription==\"AVDR\" || typeDescription==\"TVDR\" || typeDescription==\"AVCO\" || typeDescription==\"TVCO\") && (moveKind==\"DSCH\"||moveKind==\"LOAD\")) ~> filter1",
						"sort1 window(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true),",
						"     startRowOffset: 1L,",
						"     endRowOffset: 1L,",
						"     typeDescription_nxt = lead(typeDescription),",
						"          unitIdName_nxt = lead(unitIdName),",
						"          cheID_nxt = lead(cheID),",
						"          EcEventTime_nxt = lead(EcEventTime)) ~> window1",
						"filter1 sort(asc(cheID, true),",
						"     asc(EcEventTime, true),",
						"     asc(ecEventGkey, true)) ~> sort1",
						"window1 derive(jobStep = iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYCO' && typeDescription_nxt=='AYCO', 1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVDR' && typeDescription_nxt=='AVDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TYDR' && typeDescription_nxt=='AYDR',1,iif(cheID==cheID_nxt && unitIdName==unitIdName_nxt && typeDescription=='TVCO' && typeDescription_nxt=='AVCO',1,0))))) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/jobstep',",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['ecEventGkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          Year,",
						"          Month,",
						"          Week",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/movesPerUfv_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Move counts Grouping by UFV to be used for Unproductive Moves report",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Sort2"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select2"
						}
					],
					"script": "parameters{\n\tcustomer as string ('cmsa')\n}\nsource(output(\n\t\tmve_gkey as integer,\n\t\tUnit_Nbr as string,\n\t\tFacility_Id as string,\n\t\tComplex_Id as string,\n\t\tYard_Id as string,\n\t\tCarrier_Visit_Key as integer,\n\t\tEvent_Type_Id as string,\n\t\tMove_Kind as string,\n\t\tFrom_Location as string,\n\t\tTo_Location as string,\n\t\tFrom_Position_Name as string,\n\t\tTo_Position_Name as string,\n\t\tCarry_CHE_Operator_Id as string,\n\t\tFetch_CHE_Operator_Id as string,\n\t\tPut_CHE_Operator_Id as string,\n\t\tFetch_CHE_Id as long,\n\t\tFetch_CHE_Kind as string,\n\t\tCarry_CHE_Id as long,\n\t\tCarry_CHE_Kind as string,\n\t\tPut_CHE_Id as long,\n\t\tPut_CHE_Kind as string,\n\t\tQC_CHE_Id as long,\n\t\tQC_CHE_Kind as string,\n\t\tt_carry_complete as timestamp,\n\t\tt_put as timestamp,\n\t\tt_fetch as timestamp,\n\t\tt_dispatch as timestamp,\n\t\tt_discharge as timestamp,\n\t\tt_carry_dispatch as timestamp,\n\t\tt_carry_fetch_ready as timestamp,\n\t\tt_carry_put_ready as timestamp,\n\t\tdist_carry as short,\n\t\tdist_start as short,\n\t\tTwin_Fetch as string,\n\t\tTwin_Carry as string,\n\t\tTwin_Put as string,\n\t\tCategory_Id as string,\n\t\tFreight_Kind_Id as string,\n\t\tto_pos_gkey as integer,\n\t\tfm_pos_gkey as integer,\n\t\tRestow_Reason as string,\n\t\tContainer_Line_Id as string,\n\t\tContainer_Line_Role as string,\n\t\tpow as string,\n\t\tufv_gkey as integer,\n\t\tBerth_Id as string,\n\t\tGoods_And_Ctr_Wt_Kg as string,\n\t\tactive_ufv as integer,\n\t\tRequires_Power_Flag as string,\n\t\tOOG_Flag as string,\n\t\tShipper_Id as long,\n\t\tConsignee_Id as string,\n\t\tCommodity_Id as string,\n\t\tATA as timestamp,\n\t\tATD as timestamp,\n\t\tRehandles as short,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tWeek as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'silver/moves',\n\tmode: 'read') ~> source1\nselect2 sort(asc(ufv_gkey, true),\n\tasc(t_put, true)) ~> Sort2\nwindow1 alterRow(upsertIf(true())) ~> AlterRow1\nSort2 window(over(ufv_gkey),\n\tasc(t_put, true),\n\tasc(mve_gkey, true),\n\tRNumber = rowNumber(),\n\t\tMovesPerFcyVisit = count(mve_gkey)) ~> window1\nsource1 select(mapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select2\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delta',\n\tfileSystem: 'cmsa',\n\tfolderPath: 'gold/movesPerUfv',\n\ttruncate: true,\n\tmergeSchema: false,\n\tautoCompact: false,\n\toptimizedWrite: false,\n\tvacuum: 0,\n\tdeletable: false,\n\tinsertable: true,\n\tupdateable: false,\n\tupsertable: false,\n\tkeys:['ufv_gkey','mve_gkey'],\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmve_gkey,\n\t\tUnit_Nbr,\n\t\tEvent_Type_Id,\n\t\tMove_Kind,\n\t\tFrom_Position_Name,\n\t\tTo_Position_Name,\n\t\tt_put,\n\t\tCategory_Id,\n\t\tFreight_Kind_Id,\n\t\tufv_gkey,\n\t\tRequires_Power_Flag,\n\t\tOOG_Flag,\n\t\tYear,\n\t\tMonth,\n\t\tWeek,\n\t\tRNumber,\n\t\tMovesPerFcyVisit\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/moves_cmsa')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "navispowerbidata2-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "navispowerbidata2-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as string,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as string,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as string,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as string,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as string,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as string,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as string,",
						"          t_put as string,",
						"          t_fetch as string,",
						"          t_dispatch as string,",
						"          t_discharge as string,",
						"          t_carry_dispatch as string,",
						"          t_carry_fetch_ready as string,",
						"          t_carry_put_ready as string,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          Twin_Fetch as boolean,",
						"          Twin_Carry as boolean,",
						"          Twin_Put as boolean,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as string,",
						"          fm_pos_gkey as string,",
						"          pow as string,",
						"          mve_gkey as string,",
						"          ufv_gkey as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Hazardous_Flag as string,",
						"          ATA as string,",
						"          ATD as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'bronze/moves/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> source1",
						"derivedColumn1 select(mapColumn(",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1 derive(Carrier_Visit_Key = toLong(Carrier_Visit_Key),",
						"          mve_gkey = toLong(mve_gkey),",
						"          ufv_gkey = toLong(ufv_gkey),",
						"          t_put = coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss')),",
						"          t_fetch = coalesce(toTimestamp(t_fetch,'yyyy-MM-dd HH:mm:ss.SSS'), toTimestamp(t_fetch,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_fetch,'dd.MM.yy HH:mm:ss'),toTimestamp(t_fetch,'dd-MM-yyyy HH:mm:ss')),",
						"          ATD = coalesce(toTimestamp(ATD,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATD,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(ATD,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATD,'dd-MM-yy HH:mm:ss'),toTimestamp(ATD,'dd.MM.yy HH:mm:ss'),toTimestamp(ATD,'dd/MM/yyyy\\'T\\'HH:mm:ss')),",
						"          ATA = coalesce(toTimestamp(ATA,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(ATA,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(ATA,'MM/dd/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yy HH:mm:ss'),toTimestamp(ATA,'dd.MM.yy HH:mm:ss'),toTimestamp(ATA,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(ATA,'dd/MM/yyyy HH:mm:ss'),toTimestamp(ATA,'dd-MM-yyyy HH:mm:ss')),",
						"          Year = year(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),",
						"          Month = month(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),",
						"          Week = weekOfYear(coalesce(toTimestamp(t_put,'yyyy-MM-dd HH:mm:ss.SSS'),toTimestamp(t_put,'yyyy/MM/dd HH:mm:ss.SSS'), toTimestamp(t_put,'MM/dd/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yy HH:mm:ss'),toTimestamp(t_put,'dd.MM.yy HH:mm:ss'),toTimestamp(t_put,'dd/MM/yyyy\\'T\\'HH:mm:ss'), toTimestamp(t_put,'dd/MM/yyyy HH:mm:ss'),toTimestamp(t_put,'dd-MM-yyyy HH:mm:ss'))),",
						"          QC_CHE_Id = toShort(QC_CHE_Id),",
						"          Fetch_CHE_Id = toShort(Fetch_CHE_Id),",
						"          Put_CHE_Id = toShort(Put_CHE_Id),",
						"          Carry_CHE_Id = toShort(Carry_CHE_Id)) ~> derivedColumn1",
						"select1 aggregate(groupBy(mve_gkey),",
						"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate1",
						"aggregate1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'cmsa',",
						"     folderPath: 'silver/moves',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/navispowerbidata2-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/moves_delete')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService1",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          mve_gkey as integer,",
						"          Unit_Nbr as string,",
						"          Facility_Id as string,",
						"          Complex_Id as string,",
						"          Yard_Id as string,",
						"          Carrier_Visit_Key as integer,",
						"          Event_Type_Id as string,",
						"          Move_Kind as string,",
						"          From_Location as string,",
						"          To_Location as string,",
						"          From_Position_Name as string,",
						"          To_Position_Name as string,",
						"          Carry_CHE_Operator_Id as short,",
						"          Fetch_CHE_Operator_Id as string,",
						"          Put_CHE_Operator_Id as string,",
						"          Fetch_CHE_Id as long,",
						"          Fetch_CHE_Kind as string,",
						"          Carry_CHE_Id as long,",
						"          Carry_CHE_Kind as string,",
						"          Put_CHE_Id as long,",
						"          Put_CHE_Kind as string,",
						"          QC_CHE_Id as long,",
						"          QC_CHE_Kind as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as integer,",
						"          dist_start as short,",
						"          Twin_Fetch as string,",
						"          Twin_Carry as string,",
						"          Twin_Put as string,",
						"          Category_Id as string,",
						"          Freight_Kind_Id as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          Restow_Reason as string,",
						"          Container_Line_Id as string,",
						"          Container_Line_Role as string,",
						"          pow as string,",
						"          ufv_gkey as integer,",
						"          Berth_Id as string,",
						"          Goods_And_Ctr_Wt_Kg as double,",
						"          active_ufv as integer,",
						"          Requires_Power_Flag as string,",
						"          OOG_Flag as string,",
						"          Shipper_Id as string,",
						"          Consignee_Id as string,",
						"          Commodity_Id as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string,",
						"          Year as integer,",
						"          Month as integer,",
						"          Week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'eurogatectb',",
						"     folderPath: 'silver/moves') ~> source1",
						"source1 filter(isNull(t_put)==true()) ~> filter1",
						"filter1 alterRow(deleteIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'eurogatectb',",
						"     folderPath: 'silver/moves',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: true,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['t_put'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stack_confirmity_MICT')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConfirmity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConformity"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Container No.} as string,",
						"          {Stacking Factor} as string,",
						"          CHE as string,",
						"          {Blk Typ} as string,",
						"          Type as string,",
						"          {Current position} as string,",
						"          {Yard Row} as string,",
						"          Cat as string,",
						"          Sts as string,",
						"          {Section Factor} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     rowUrlColumn: 'FileDate',",
						"     format: 'delimited',",
						"     fileSystem: 'mict-stack-conformity',",
						"     columnDelimiter: '\\t',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     skipLines: -2) ~> StackConfirmity",
						"StackConfirmity derive(Pos_WO_Tier = iif(isInteger(right({Current position}, 1)), left({Current position}, length({Current position}) - 1), {Current position}),",
						"          Date = toDate(substring(FileDate, 2, 8), 'yyyyMMdd'),",
						"          Week = iif(dayOfWeek(toDate(substring(FileDate, 2, 8), 'yyyyMMdd')) == 1,  weekOfYear(toDate(substring(FileDate, 2, 8), 'yyyyMMdd')) + 1, weekOfYear(toDate(substring(FileDate, 2, 8), 'yyyyMMdd'))),",
						"          stacking_array := split({Stacking Factor}, '/')) ~> derivedColumn1",
						"derivedColumn1 window(over(Date,",
						"          Pos_WO_Tier),",
						"     asc({Stacking Factor}, true),",
						"     stackrank = rank()) ~> window1",
						"window1 aggregate(groupBy(Date,",
						"          Pos_WO_Tier),",
						"     Stack_confirmty = iif(max(stackrank) > 1, 'Mix', 'Pure')) ~> aggregate1",
						"window1, aggregate1 join(derivedColumn1@Date == aggregate1@Date",
						"     && derivedColumn1@Pos_WO_Tier == aggregate1@Pos_WO_Tier,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"filter1 select(mapColumn(",
						"          {Container No.},",
						"          {Stacking Factor},",
						"          CHE,",
						"          {Blk Typ},",
						"          Type,",
						"          {Current position},",
						"          {Yard Row},",
						"          Cat,",
						"          Sts,",
						"          {Section Factor},",
						"          Pos_WO_Tier = derivedColumn1@Pos_WO_Tier,",
						"          Date = derivedColumn1@Date,",
						"          Week,",
						"          Stack_confirmty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sort(asc(Date, true),",
						"     asc({Container No.}, true)) ~> sort1",
						"join1 filter(not(isDate({Container No.})) && not(isNull({Container No.})) && {Container No.} != '') ~> filter1",
						"select2 alterRow(upsertIf(true())) ~> alterRow1",
						"sort1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/stack_confirmity',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['Date','Container No.'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StackConformity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stack_confirmity_MNHPI')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConfirmity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConformity"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Equipment ID} as string,",
						"          {Stacking Factor} as string,",
						"          CHE as string,",
						"          {Blk Typ} as boolean,",
						"          Type as string,",
						"          {Current Position} as string,",
						"          {Yard Row} as string,",
						"          Cat as string,",
						"          Sts as string,",
						"          {Section Factor} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     rowUrlColumn: 'FileDate',",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-stack-conformity',",
						"     columnDelimiter: '\\t',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true,",
						"     skipLines: -2) ~> StackConfirmity",
						"StackConfirmity derive(Pos_WO_Tier = iif(isInteger(right({Current Position}, 1)), left({Current Position}, length({Current Position}) - 1), {Current Position}),",
						"          Date = toDate(substring(FileDate, -12, 8), 'yyyyMMdd'),",
						"          Week = iif(dayOfWeek(toDate(substring(FileDate, -12, 8), 'yyyyMMdd')) == 1,  weekOfYear(toDate(substring(FileDate, -12, 8), 'yyyyMMdd')) + 1, weekOfYear(toDate(substring(FileDate, -12, 8), 'yyyyMMdd'))),",
						"          stacking_array := split({Stacking Factor}, '/')) ~> derivedColumn1",
						"derivedColumn1 window(over(Date,",
						"          Pos_WO_Tier),",
						"     asc({Stacking Factor}, true),",
						"     stackrank = rank()) ~> window1",
						"window1 aggregate(groupBy(Date,",
						"          Pos_WO_Tier),",
						"     Stack_confirmty = iif(max(stackrank) > 1, 'Mix', 'Pure')) ~> aggregate1",
						"window1, aggregate1 join(derivedColumn1@Date == aggregate1@Date",
						"     && derivedColumn1@Pos_WO_Tier == aggregate1@Pos_WO_Tier,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"filter1 select(mapColumn(",
						"          {Container No.} = {Equipment ID},",
						"          {Stacking Factor},",
						"          CHE,",
						"          {Blk Typ},",
						"          Type,",
						"          {Current position} = {Current Position},",
						"          {Yard Row},",
						"          Cat,",
						"          Sts,",
						"          {Section Factor},",
						"          Pos_WO_Tier = derivedColumn1@Pos_WO_Tier,",
						"          Date = derivedColumn1@Date,",
						"          Week,",
						"          Stack_confirmty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sort(asc(Date, true),",
						"     asc({Container No.}, true)) ~> sort1",
						"join1 filter(not(isDate({Equipment ID})) && not(isNull({Equipment ID})) && {Equipment ID} != '') ~> filter1",
						"select2 alterRow(upsertIf(true())) ~> alterRow1",
						"sort1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/stack_confirmity',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['Date','Container No.'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StackConformity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/stack_confirmity_TEAGTL')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConfirmity"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "StackConformity"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "window1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Equipment ID} as string,",
						"          {Stacking Factor} as string,",
						"          CHE as string,",
						"          {Blk Typ} as string,",
						"          Type as string,",
						"          {Current Position} as string,",
						"          {Yard Row} as string,",
						"          Cat as string,",
						"          Sts as string,",
						"          {Section Factor} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: true,",
						"     moveFiles: ['/bronze/stackconformity/load','bronze/stackconformity/archive'],",
						"     rowUrlColumn: 'FileDate',",
						"     format: 'delimited',",
						"     fileSystem: 'teagtl',",
						"     folderPath: 'bronze/stackconformity/load',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: true) ~> StackConfirmity",
						"StackConfirmity derive(Pos_WO_Tier = iif(isInteger(right({Current Position}, 1)), left({Current Position}, length({Current Position}) - 1), {Current Position}),",
						"          Date = toDate(substring(FileDate, -12, 8), 'yyyyMMdd'),",
						"          Week = iif(dayOfWeek(toDate(substring(FileDate, -12, 8), 'yyyyMMdd')) == 1,  weekOfYear(toDate(substring(FileDate, -12, 8), 'yyyyMMdd')) + 1, weekOfYear(toDate(substring(FileDate, -12, 8), 'yyyyMMdd'))),",
						"          Stacking_Factor = iif(size(:stacking_array) >= 4,\r",
						"dropLeft(toString(reduce(slice(:stacking_array, 1, 3) + slice(:stacking_array, 5), '', #acc + '/' + #item, #result)), 1),\r",
						"{Stacking Factor}),",
						"          stacking_array := split({Stacking Factor}, '/')) ~> derivedColumn1",
						"derivedColumn1 window(over(Date,",
						"          Pos_WO_Tier),",
						"     asc(Stacking_Factor, true),",
						"     stackrank = rank()) ~> window1",
						"window1 aggregate(groupBy(Date,",
						"          Pos_WO_Tier),",
						"     Stack_confirmty = iif(max(stackrank) > 1, 'Mix', 'Pure')) ~> aggregate1",
						"window1, aggregate1 join(derivedColumn1@Date == aggregate1@Date",
						"     && derivedColumn1@Pos_WO_Tier == aggregate1@Pos_WO_Tier,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"filter1 select(mapColumn(",
						"          Date = derivedColumn1@Date,",
						"          {Container No.} = {Equipment ID},",
						"          {Stacking Factor},",
						"          CHE,",
						"          {Blk Typ},",
						"          Type,",
						"          {Current Position},",
						"          {Yard Row},",
						"          Cat,",
						"          Sts,",
						"          {Section Factor},",
						"          Pos_WO_Tier = derivedColumn1@Pos_WO_Tier,",
						"          Stack_confirmty,",
						"          Week",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sort(asc(Date, true),",
						"     asc({Container No.}, true)) ~> sort1",
						"join1 filter(not(isDate({Equipment ID})) && not(isNull({Equipment ID})) && {Equipment ID} != '') ~> filter1",
						"select2 alterRow(upsertIf(true())) ~> alterRow1",
						"sort1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'teagtl',",
						"     folderPath: 'gold/stack_confirmity',",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['Date','Container No.'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> StackConformity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/violations_TEAGTL')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "DeckingHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftData"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftInfo"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "XpsEcUser"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "violation"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "decking"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "move"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select4"
						},
						{
							"name": "join6"
						},
						{
							"name": "select5"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "select6"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "filter4"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "filter5"
						},
						{
							"name": "derivedColumn6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as integer,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as short,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as short,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as short,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as short,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-movehistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as timestamp,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as boolean,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as integer,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as boolean,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as integer,",
						"          to_pos_tier as boolean,",
						"          total_score as integer,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-deckinghistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> DeckingHistory",
						"source(output(",
						"          {Shift Id} as string,",
						"          Hour as integer,",
						"          Minute as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-shift-data',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftData",
						"source(output(",
						"          {Shift Name} as string,",
						"          {Shift Start Hour} as integer,",
						"          {Shift Start Minute} as integer,",
						"          {Shift Start} as string,",
						"          {Shift End Hour} as integer,",
						"          {Shift End Minute} as integer,",
						"          {Shift End} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-shift-info',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftInfo",
						"source(output(",
						"          gkey as short,",
						"          user_id as string,",
						"          name as string,",
						"          yard as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-xps-ecuser',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> XpsEcUser",
						"MoveHistory select(mapColumn(",
						"          mve_gkey,",
						"          {Unit Nbr},",
						"          {Event Type Id},",
						"          {Move Kind},",
						"          {From Location},",
						"          {To Position Name},",
						"          {Put CHE Operator Id},",
						"          {Put CHE Id},",
						"          {MH T_Put DateTime} = t_put,",
						"          {Freight Kind Id},",
						"          {Category Id},",
						"          ufv_gkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate3 derive(Year_Month = (year({MH T_Put DateTime}) * 100) + month({MH T_Put DateTime}),",
						"          Year_Week = (year({MH T_Put DateTime}) * 100) + weekOfYear({MH T_Put DateTime})) ~> derivedColumn1",
						"DeckingHistory select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          {DH TimeStamp} = time_stamp,",
						"          Decking_Type = decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate2 filter(Decking_Type == 'Bump Intruder' || Decking_Type == 'Vessel Discharge' || Decking_Type == 'Vessel Discharge - Twin' || Decking_Type == 'XD Drop if Floating Refine' || Decking_Type == 'XD Refine Request' || Decking_Type == 'XD Rehandle Request') ~> filter1",
						"filter1 derive(Year_Month = (year({DH TimeStamp}) * 100) + month({DH TimeStamp}),",
						"          Year_Week = (year({DH TimeStamp}) * 100) + weekOfYear({DH TimeStamp})) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 join({Unit Nbr} == unit_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter({From Location} != 'YARD' && unit_id != '' && not(isNull(unit_id)) && !startsWith(split({To Position Name}, \"-\")[3], 'CR') && {MH T_Put DateTime} > addDays({DH TimeStamp}, -15)) ~> filter2",
						"filter2 derive({MH TPut Less 4 hours} = add({MH T_Put DateTime} , -4*60*60*1000),",
						"          {DH TimeStamp Within 4 Hours} = iif(({DH TimeStamp} >= add({MH T_Put DateTime} , -4*60*60*1000)) && ({DH TimeStamp} <= {MH T_Put DateTime}), 1, 0),",
						"          {MH ToPosName Short} = split({To Position Name}, \"-\")[3],",
						"          {MH ToPosName Short 5Char} = iif(length(split({To Position Name}, \"-\")[3]) == 6, substring(split({To Position Name}, \"-\")[3], 0, 5), split({To Position Name}, \"-\")[3]),",
						"          {DH ToPosName Shorrt} = split(to_pos_name, \"-\")[3],",
						"          {DH ToPosName Short 5Char} = iif(length(split(to_pos_name, \"-\")[3]) == 6, substring(split(to_pos_name, \"-\")[3], 0, 5), split(to_pos_name, \"-\")[3])) ~> derivedColumn3",
						"derivedColumn3 filter({DH TimeStamp Within 4 Hours} == 1 && {DH ToPosName Short 5Char} != \"FLD\") ~> filter3",
						"filter3 aggregate(groupBy({Unit Nbr},",
						"          {Move Kind},",
						"          {Category Id},",
						"          {MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime},",
						"          {Put CHE Operator Id},",
						"          mve_gkey,",
						"          {Put CHE Id},",
						"          {Freight Kind Id}),",
						"     MaxDHTime = max({DH TimeStamp})) ~> aggregate1",
						"filter3, aggregate1 join(aggregate3@{Unit Nbr} == aggregate1@{Unit Nbr}",
						"     && aggregate3@{Move Kind} == aggregate1@{Move Kind}",
						"     && aggregate3@{Category Id} == aggregate1@{Category Id}",
						"     && derivedColumn3@{MH ToPosName Short 5Char} == aggregate1@{MH ToPosName Short 5Char}",
						"     && aggregate3@{MH T_Put DateTime} == aggregate1@{MH T_Put DateTime}",
						"     && aggregate3@{Put CHE Operator Id} == aggregate1@{Put CHE Operator Id}",
						"     && aggregate3@mve_gkey == aggregate1@mve_gkey",
						"     && aggregate3@{Put CHE Id} == aggregate1@{Put CHE Id}",
						"     && aggregate3@{Freight Kind Id} == aggregate1@{Freight Kind Id}",
						"     && {DH TimeStamp} == MaxDHTime,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {MH Event Type Id} = {Event Type Id},",
						"          {From Location},",
						"          {MH To Position Name} = {To Position Name},",
						"          ufv_gkey,",
						"          gkey,",
						"          unit_id,",
						"          {D H TimeStamp} = {DH TimeStamp},",
						"          {D H Decking Type} = Decking_Type,",
						"          {D H To Pos Name} = to_pos_name,",
						"          Year_Month = derivedColumn2@Year_Month,",
						"          Year_Week = derivedColumn2@Year_Week,",
						"          {MH TPut Less 4 hours},",
						"          {DH TimeStamp Within 4 Hours},",
						"          {MH ToPosName Short},",
						"          {MH ToPosName Short 5Char} = derivedColumn3@{MH ToPosName Short 5Char},",
						"          {DH ToPosName Shorrt},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr} = aggregate1@{Unit Nbr},",
						"          {MH Move Kind} = aggregate1@{Move Kind},",
						"          {Category Id} = aggregate1@{Category Id},",
						"          {MH ToPosName Short 5Char} = aggregate1@{MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime} = aggregate1@{MH T_Put DateTime},",
						"          {MH Put CHE Operator Id} = aggregate1@{Put CHE Operator Id},",
						"          mve_gkey = aggregate1@mve_gkey,",
						"          {MH Put CHE Id} = aggregate1@{Put CHE Id},",
						"          {Freight Kind Id} = aggregate1@{Freight Kind Id},",
						"          MaxDHTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive({Location Match or Not} = iif({MH ToPosName Short 5Char} == {DH ToPosName Short 5Char}, 'Position Followed', 'Position Not Followed'),",
						"          Shift_Date = toDate({MH T_Put DateTime}),",
						"          {T Put Time} = MaxDHTime,",
						"          {T Put Hour} = hour(MaxDHTime),",
						"          {T Put Minute} = minute(MaxDHTime),",
						"          {T Put Second} = second(MaxDHTime)) ~> derivedColumn4",
						"derivedColumn4, ShiftData join({T Put Hour} == Hour",
						"     && {T Put Minute} == Minute,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, ShiftInfo join({Shift Id} == {Shift Name},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive({Shift Date} = iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date),",
						"          Week_of_Year = year(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))*100 + weekOfYear(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))) ~> derivedColumn5",
						"derivedColumn6 select(mapColumn(",
						"          {D H Decking Type},",
						"          {MH ToPosName Short 5Char},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr},",
						"          {MH Move Kind},",
						"          {Category Id},",
						"          {MH T_Put DateTime},",
						"          {MH Put CHE Operator Id},",
						"          mve_gkey,",
						"          {MH Put CHE Id},",
						"          {Freight Kind Id},",
						"          MaxDHTime,",
						"          {Location Match or Not},",
						"          {Shift Id},",
						"          {Shift Date},",
						"          Week_of_Year,",
						"          {XPS_ECUser.name} = name,",
						"          Block_To_Block_Violation,",
						"          Same_Block_Violation,",
						"          Stack_Violation",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn5, XpsEcUser join({MH Put CHE Operator Id} == user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"select4 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 alterRow(upsertIf(true())) ~> alterRow1",
						"select6 alterRow(upsertIf(true())) ~> AlterRow2",
						"select7 alterRow(upsertIf(true())) ~> alterRow3",
						"derivedColumn2 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"derivedColumn1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"filter5 aggregate(groupBy(gkey),",
						"     each(match(name!='gkey'), $$ = first($$))) ~> aggregate2",
						"select1 filter(not(isNull(mve_gkey))) ~> filter4",
						"filter4 aggregate(groupBy(mve_gkey),",
						"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate3",
						"select2 filter(not(isNull(gkey))) ~> filter5",
						"join6 derive(Block_To_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 2) != substring({DH ToPosName Short 5Char}, 1, 2), true(), false()),",
						"          Same_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 4) != substring({DH ToPosName Short 5Char}, 1, 4), true(), false()),",
						"          Stack_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 7) != substring({DH ToPosName Short 5Char}, 1, 7), true(), false())) ~> derivedColumn6",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/violation',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> violation",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/decking',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> decking",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/move',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> move"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/violations_mict')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "DeckingHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftData"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftInfo"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "XpsEcUser"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "violation"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "decking"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "move"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select4"
						},
						{
							"name": "join6"
						},
						{
							"name": "select5"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "select6"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "filter4"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "filter5"
						},
						{
							"name": "derivedColumn6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as integer,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as short,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as short,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as short,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as short,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-movehistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as timestamp,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as boolean,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as integer,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as boolean,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as integer,",
						"          to_pos_tier as boolean,",
						"          total_score as integer,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-deckinghistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> DeckingHistory",
						"source(output(",
						"          {Shift Id} as string,",
						"          Hour as integer,",
						"          Minute as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-shift-data',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftData",
						"source(output(",
						"          {Shift Name} as string,",
						"          {Shift Start Hour} as integer,",
						"          {Shift Start Minute} as integer,",
						"          {Shift Start} as string,",
						"          {Shift End Hour} as integer,",
						"          {Shift End Minute} as integer,",
						"          {Shift End} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-shift-info',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftInfo",
						"source(output(",
						"          gkey as short,",
						"          user_id as string,",
						"          name as string,",
						"          yard as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mict-xps-ecuser',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> XpsEcUser",
						"MoveHistory select(mapColumn(",
						"          mve_gkey,",
						"          {Unit Nbr},",
						"          {Event Type Id},",
						"          {Move Kind},",
						"          {From Location},",
						"          {To Position Name},",
						"          {Put CHE Operator Id},",
						"          {Put CHE Id},",
						"          {MH T_Put DateTime} = t_put,",
						"          {Freight Kind Id},",
						"          {Category Id},",
						"          ufv_gkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate3 derive(Year_Month = (year({MH T_Put DateTime}) * 100) + month({MH T_Put DateTime}),",
						"          Year_Week = (year({MH T_Put DateTime}) * 100) + weekOfYear({MH T_Put DateTime})) ~> derivedColumn1",
						"DeckingHistory select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          {DH TimeStamp} = time_stamp,",
						"          Decking_Type = decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate2 filter(Decking_Type == 'Bump Intruder' || Decking_Type == 'Vessel Discharge' || Decking_Type == 'Vessel Discharge - Twin' || Decking_Type == 'XD Drop if Floating Refine' || Decking_Type == 'XD Refine Request' || Decking_Type == 'XD Rehandle Request') ~> filter1",
						"filter1 derive(Year_Month = (year({DH TimeStamp}) * 100) + month({DH TimeStamp}),",
						"          Year_Week = (year({DH TimeStamp}) * 100) + weekOfYear({DH TimeStamp})) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 join({Unit Nbr} == unit_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter({From Location} != 'YARD' && unit_id != '' && not(isNull(unit_id)) && !startsWith(split({To Position Name}, \"-\")[3], 'CR') && {MH T_Put DateTime} > addDays({DH TimeStamp}, -15)) ~> filter2",
						"filter2 derive({MH TPut Less 4 hours} = add({MH T_Put DateTime} , -4*60*60*1000),",
						"          {DH TimeStamp Within 4 Hours} = iif(({DH TimeStamp} >= add({MH T_Put DateTime} , -4*60*60*1000)) && ({DH TimeStamp} <= {MH T_Put DateTime}), 1, 0),",
						"          {MH ToPosName Short} = split({To Position Name}, \"-\")[3],",
						"          {MH ToPosName Short 5Char} = iif(length(split({To Position Name}, \"-\")[3]) == 6, substring(split({To Position Name}, \"-\")[3], 0, 5), split({To Position Name}, \"-\")[3]),",
						"          {DH ToPosName Shorrt} = split(to_pos_name, \"-\")[3],",
						"          {DH ToPosName Short 5Char} = iif(length(split(to_pos_name, \"-\")[3]) == 6, substring(split(to_pos_name, \"-\")[3], 0, 5), split(to_pos_name, \"-\")[3])) ~> derivedColumn3",
						"derivedColumn3 filter({DH TimeStamp Within 4 Hours} == 1 && {DH ToPosName Short 5Char} != \"FLD\") ~> filter3",
						"filter3 aggregate(groupBy({Unit Nbr},",
						"          {Move Kind},",
						"          {Category Id},",
						"          {MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime},",
						"          {Put CHE Operator Id},",
						"          mve_gkey,",
						"          {Put CHE Id},",
						"          {Freight Kind Id}),",
						"     MaxDHTime = max({DH TimeStamp})) ~> aggregate1",
						"filter3, aggregate1 join(aggregate3@{Unit Nbr} == aggregate1@{Unit Nbr}",
						"     && aggregate3@{Move Kind} == aggregate1@{Move Kind}",
						"     && aggregate3@{Category Id} == aggregate1@{Category Id}",
						"     && derivedColumn3@{MH ToPosName Short 5Char} == aggregate1@{MH ToPosName Short 5Char}",
						"     && aggregate3@{MH T_Put DateTime} == aggregate1@{MH T_Put DateTime}",
						"     && aggregate3@{Put CHE Operator Id} == aggregate1@{Put CHE Operator Id}",
						"     && aggregate3@mve_gkey == aggregate1@mve_gkey",
						"     && aggregate3@{Put CHE Id} == aggregate1@{Put CHE Id}",
						"     && aggregate3@{Freight Kind Id} == aggregate1@{Freight Kind Id}",
						"     && {DH TimeStamp} == MaxDHTime,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {MH Event Type Id} = {Event Type Id},",
						"          {From Location},",
						"          {MH To Position Name} = {To Position Name},",
						"          ufv_gkey,",
						"          gkey,",
						"          unit_id,",
						"          {D H TimeStamp} = {DH TimeStamp},",
						"          {D H Decking Type} = Decking_Type,",
						"          {D H To Pos Name} = to_pos_name,",
						"          Year_Month = derivedColumn2@Year_Month,",
						"          Year_Week = derivedColumn2@Year_Week,",
						"          {MH TPut Less 4 hours},",
						"          {DH TimeStamp Within 4 Hours},",
						"          {MH ToPosName Short},",
						"          {MH ToPosName Short 5Char} = derivedColumn3@{MH ToPosName Short 5Char},",
						"          {DH ToPosName Shorrt},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr} = aggregate1@{Unit Nbr},",
						"          {MH Move Kind} = aggregate1@{Move Kind},",
						"          {Category Id} = aggregate1@{Category Id},",
						"          {MH ToPosName Short 5Char} = aggregate1@{MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime} = aggregate1@{MH T_Put DateTime},",
						"          {MH Put CHE Operator Id} = aggregate1@{Put CHE Operator Id},",
						"          mve_gkey = aggregate1@mve_gkey,",
						"          {MH Put CHE Id} = aggregate1@{Put CHE Id},",
						"          {Freight Kind Id} = aggregate1@{Freight Kind Id},",
						"          MaxDHTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive({Location Match or Not} = iif({MH ToPosName Short 5Char} == {DH ToPosName Short 5Char}, 'Position Followed', 'Position Not Followed'),",
						"          Shift_Date = toDate({MH T_Put DateTime}),",
						"          {T Put Time} = MaxDHTime,",
						"          {T Put Hour} = hour(MaxDHTime),",
						"          {T Put Minute} = minute(MaxDHTime),",
						"          {T Put Second} = second(MaxDHTime)) ~> derivedColumn4",
						"derivedColumn4, ShiftData join({T Put Hour} == Hour",
						"     && {T Put Minute} == Minute,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, ShiftInfo join({Shift Id} == {Shift Name},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive({Shift Date} = iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date),",
						"          Week_of_Year = year(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))*100 + weekOfYear(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))) ~> derivedColumn5",
						"derivedColumn6 select(mapColumn(",
						"          {D H Decking Type},",
						"          {MH ToPosName Short 5Char},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr},",
						"          {MH Move Kind},",
						"          {Category Id},",
						"          {MH T_Put DateTime},",
						"          {MH Put CHE Operator Id},",
						"          mve_gkey,",
						"          {MH Put CHE Id},",
						"          {Freight Kind Id},",
						"          MaxDHTime,",
						"          {Location Match or Not},",
						"          {Shift Id},",
						"          {Shift Date},",
						"          Week_of_Year,",
						"          {XPS_ECUser.name} = name,",
						"          Block_To_Block_Violation,",
						"          Same_Block_Violation,",
						"          Stack_Violation",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn5, XpsEcUser join({MH Put CHE Operator Id} == user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"select4 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 alterRow(upsertIf(true())) ~> alterRow1",
						"select6 alterRow(upsertIf(true())) ~> AlterRow2",
						"select7 alterRow(upsertIf(true())) ~> alterRow3",
						"derivedColumn2 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"derivedColumn1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"filter5 aggregate(groupBy(gkey),",
						"     each(match(name!='gkey'), $$ = first($$))) ~> aggregate2",
						"select1 filter(not(isNull(mve_gkey))) ~> filter4",
						"filter4 aggregate(groupBy(mve_gkey),",
						"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate3",
						"select2 filter(not(isNull(gkey))) ~> filter5",
						"join6 derive(Block_To_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 2) != substring({DH ToPosName Short 5Char}, 1, 2), true(), false()),",
						"          Same_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 4) != substring({DH ToPosName Short 5Char}, 1, 4), true(), false()),",
						"          Stack_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 7) != substring({DH ToPosName Short 5Char}, 1, 7), true(), false())) ~> derivedColumn6",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/violation',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> violation",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/decking',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> decking",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mict',",
						"     folderPath: 'gold/move',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> move"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/violations_mnhpi')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "MoveHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "DeckingHistory"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftData"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "ShiftInfo"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "XpsEcUser"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "violation"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "decking"
						},
						{
							"linkedService": {
								"referenceName": "linkedService2",
								"type": "LinkedServiceReference"
							},
							"name": "move"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "join1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select4"
						},
						{
							"name": "join6"
						},
						{
							"name": "select5"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "AlterRow2"
						},
						{
							"name": "alterRow3"
						},
						{
							"name": "select6"
						},
						{
							"name": "select7"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "filter4"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "filter5"
						},
						{
							"name": "derivedColumn6"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Unit Nbr} as string,",
						"          {Facility Id} as string,",
						"          {Complex Id} as string,",
						"          {Yard Id} as string,",
						"          {Carrier Visit Key} as integer,",
						"          {Event Type Id} as string,",
						"          {Move Kind} as string,",
						"          {From Location} as string,",
						"          {To Location} as string,",
						"          {From Position Name} as string,",
						"          {To Position Name} as string,",
						"          {Carry CHE Operator Id} as string,",
						"          {Fetch CHE Operator Id} as string,",
						"          {Put CHE Operator Id} as string,",
						"          {Fetch CHE Id} as short,",
						"          {Fetch CHE Kind} as string,",
						"          {Carry CHE Id} as short,",
						"          {Carry CHE Kind} as string,",
						"          {Put CHE Id} as short,",
						"          {Put CHE Kind} as string,",
						"          {QC CHE Id} as short,",
						"          {QC CHE Kind} as string,",
						"          t_carry_complete as timestamp,",
						"          t_put as timestamp,",
						"          t_fetch as timestamp,",
						"          t_dispatch as timestamp,",
						"          t_discharge as timestamp,",
						"          t_carry_dispatch as timestamp,",
						"          t_carry_fetch_ready as timestamp,",
						"          t_carry_put_ready as timestamp,",
						"          dist_carry as short,",
						"          dist_start as short,",
						"          {Twin Fetch} as boolean,",
						"          {Twin Carry} as boolean,",
						"          {Twin Put} as boolean,",
						"          {Category Id} as string,",
						"          {Freight Kind Id} as string,",
						"          to_pos_gkey as integer,",
						"          fm_pos_gkey as integer,",
						"          {Restow Reason} as string,",
						"          {Container Line Id} as string,",
						"          {Container Line Role} as string,",
						"          pow as string,",
						"          mve_gkey as integer,",
						"          ufv_gkey as integer,",
						"          {Berth Id} as string,",
						"          {Goods And Ctr Wt Kg} as double,",
						"          active_ufv as integer,",
						"          {Requires Power Flag} as boolean,",
						"          {OOG Flag} as boolean,",
						"          {Shipper Id} as string,",
						"          {Consignee Id} as string,",
						"          {Commodity Id} as string,",
						"          ATA as timestamp,",
						"          ATD as timestamp,",
						"          Rehandles as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-movehistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> MoveHistory",
						"source(output(",
						"          gkey as integer,",
						"          uyv_gkey as integer,",
						"          unit_id as string,",
						"          time_stamp as timestamp,",
						"          decking_type as string,",
						"          node_id as string,",
						"          yard as boolean,",
						"          from_pos_loctype as string,",
						"          from_pos_locid as string,",
						"          from_pos_loc_gkey as integer,",
						"          from_pos_slot as string,",
						"          from_pos_name as string,",
						"          from_pos_bin as integer,",
						"          from_pos_tier as short,",
						"          to_pos_loctype as string,",
						"          to_pos_locid as string,",
						"          to_pos_loc_gkey as boolean,",
						"          to_pos_slot as string,",
						"          to_pos_name as string,",
						"          to_pos_bin as integer,",
						"          to_pos_tier as boolean,",
						"          total_score as integer,",
						"          execution_time as short,",
						"          details as string,",
						"          phase as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-deckinghistory',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> DeckingHistory",
						"source(output(",
						"          {Shift Id} as string,",
						"          Hour as integer,",
						"          Minute as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-shiftinfo',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftData",
						"source(output(",
						"          {Shift Name} as string,",
						"          {Shift Start Hour} as integer,",
						"          {Shift Start Minute} as integer,",
						"          {Shift Start} as string,",
						"          {Shift End Hour} as integer,",
						"          {Shift End Minute} as integer,",
						"          {Shift End} as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-shiftdata',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> ShiftInfo",
						"source(output(",
						"          gkey as short,",
						"          user_id as string,",
						"          name as string,",
						"          yard as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     fileSystem: 'mnhpi-xpsuser',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> XpsEcUser",
						"MoveHistory select(mapColumn(",
						"          mve_gkey,",
						"          {Unit Nbr},",
						"          {Event Type Id},",
						"          {Move Kind},",
						"          {From Location},",
						"          {To Position Name},",
						"          {Put CHE Operator Id},",
						"          {Put CHE Id},",
						"          {MH T_Put DateTime} = t_put,",
						"          {Freight Kind Id},",
						"          {Category Id},",
						"          ufv_gkey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"aggregate3 derive(Year_Month = (year({MH T_Put DateTime}) * 100) + month({MH T_Put DateTime}),",
						"          Year_Week = (year({MH T_Put DateTime}) * 100) + weekOfYear({MH T_Put DateTime})) ~> derivedColumn1",
						"DeckingHistory select(mapColumn(",
						"          gkey,",
						"          unit_id,",
						"          {DH TimeStamp} = time_stamp,",
						"          Decking_Type = decking_type,",
						"          to_pos_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"aggregate2 filter(Decking_Type == 'Bump Intruder' || Decking_Type == 'Vessel Discharge' || Decking_Type == 'Vessel Discharge - Twin' || Decking_Type == 'XD Drop if Floating Refine' || Decking_Type == 'XD Refine Request' || Decking_Type == 'XD Rehandle Request') ~> filter1",
						"filter1 derive(Year_Month = (year({DH TimeStamp}) * 100) + month({DH TimeStamp}),",
						"          Year_Week = (year({DH TimeStamp}) * 100) + weekOfYear({DH TimeStamp})) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 join({Unit Nbr} == unit_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 filter({From Location} != 'YARD' && unit_id != '' && not(isNull(unit_id)) && !startsWith(split({To Position Name}, \"-\")[3], 'CR') && {MH T_Put DateTime} > addDays({DH TimeStamp}, -15)) ~> filter2",
						"filter2 derive({MH TPut Less 4 hours} = add({MH T_Put DateTime} , -4*60*60*1000),",
						"          {DH TimeStamp Within 4 Hours} = iif(({DH TimeStamp} >= add({MH T_Put DateTime} , -4*60*60*1000)) && ({DH TimeStamp} <= {MH T_Put DateTime}), 1, 0),",
						"          {MH ToPosName Short} = split({To Position Name}, \"-\")[3],",
						"          {MH ToPosName Short 5Char} = iif(length(split({To Position Name}, \"-\")[3]) == 6, substring(split({To Position Name}, \"-\")[3], 0, 5), split({To Position Name}, \"-\")[3]),",
						"          {DH ToPosName Shorrt} = split(to_pos_name, \"-\")[3],",
						"          {DH ToPosName Short 5Char} = iif(length(split(to_pos_name, \"-\")[3]) == 6, substring(split(to_pos_name, \"-\")[3], 0, 5), split(to_pos_name, \"-\")[3])) ~> derivedColumn3",
						"derivedColumn3 filter({DH TimeStamp Within 4 Hours} == 1 && {DH ToPosName Short 5Char} != \"FLD\") ~> filter3",
						"filter3 aggregate(groupBy({Unit Nbr},",
						"          {Move Kind},",
						"          {Category Id},",
						"          {MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime},",
						"          {Put CHE Operator Id},",
						"          mve_gkey,",
						"          {Put CHE Id},",
						"          {Freight Kind Id}),",
						"     MaxDHTime = max({DH TimeStamp})) ~> aggregate1",
						"filter3, aggregate1 join(aggregate3@{Unit Nbr} == aggregate1@{Unit Nbr}",
						"     && aggregate3@{Move Kind} == aggregate1@{Move Kind}",
						"     && aggregate3@{Category Id} == aggregate1@{Category Id}",
						"     && derivedColumn3@{MH ToPosName Short 5Char} == aggregate1@{MH ToPosName Short 5Char}",
						"     && aggregate3@{MH T_Put DateTime} == aggregate1@{MH T_Put DateTime}",
						"     && aggregate3@{Put CHE Operator Id} == aggregate1@{Put CHE Operator Id}",
						"     && aggregate3@mve_gkey == aggregate1@mve_gkey",
						"     && aggregate3@{Put CHE Id} == aggregate1@{Put CHE Id}",
						"     && aggregate3@{Freight Kind Id} == aggregate1@{Freight Kind Id}",
						"     && {DH TimeStamp} == MaxDHTime,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          {MH Event Type Id} = {Event Type Id},",
						"          {From Location},",
						"          {MH To Position Name} = {To Position Name},",
						"          ufv_gkey,",
						"          gkey,",
						"          unit_id,",
						"          {D H TimeStamp} = {DH TimeStamp},",
						"          {D H Decking Type} = Decking_Type,",
						"          {D H To Pos Name} = to_pos_name,",
						"          Year_Month = derivedColumn2@Year_Month,",
						"          Year_Week = derivedColumn2@Year_Week,",
						"          {MH TPut Less 4 hours},",
						"          {DH TimeStamp Within 4 Hours},",
						"          {MH ToPosName Short},",
						"          {MH ToPosName Short 5Char} = derivedColumn3@{MH ToPosName Short 5Char},",
						"          {DH ToPosName Shorrt},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr} = aggregate1@{Unit Nbr},",
						"          {MH Move Kind} = aggregate1@{Move Kind},",
						"          {Category Id} = aggregate1@{Category Id},",
						"          {MH ToPosName Short 5Char} = aggregate1@{MH ToPosName Short 5Char},",
						"          {MH T_Put DateTime} = aggregate1@{MH T_Put DateTime},",
						"          {MH Put CHE Operator Id} = aggregate1@{Put CHE Operator Id},",
						"          mve_gkey = aggregate1@mve_gkey,",
						"          {MH Put CHE Id} = aggregate1@{Put CHE Id},",
						"          {Freight Kind Id} = aggregate1@{Freight Kind Id},",
						"          MaxDHTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select3 derive({Location Match or Not} = iif({MH ToPosName Short 5Char} == {DH ToPosName Short 5Char}, 'Position Followed', 'Position Not Followed'),",
						"          Shift_Date = toDate({MH T_Put DateTime}),",
						"          {T Put Time} = MaxDHTime,",
						"          {T Put Hour} = hour(MaxDHTime),",
						"          {T Put Minute} = minute(MaxDHTime),",
						"          {T Put Second} = second(MaxDHTime)) ~> derivedColumn4",
						"derivedColumn4, ShiftData join({T Put Hour} == Hour",
						"     && {T Put Minute} == Minute,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, ShiftInfo join({Shift Id} == {Shift Name},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive({Shift Date} = iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date),",
						"          Week_of_Year = year(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))*100 + weekOfYear(iif({MH T_Put DateTime} - toTimestamp(toString(Shift_Date) + {Shift End}) > 0, addDays(Shift_Date, -1), Shift_Date))) ~> derivedColumn5",
						"derivedColumn6 select(mapColumn(",
						"          {D H Decking Type},",
						"          {MH ToPosName Short 5Char},",
						"          {DH ToPosName Short 5Char},",
						"          {MH Unit Nbr},",
						"          {MH Move Kind},",
						"          {Category Id},",
						"          {MH T_Put DateTime},",
						"          {MH Put CHE Operator Id},",
						"          mve_gkey,",
						"          {MH Put CHE Id},",
						"          {Freight Kind Id},",
						"          MaxDHTime,",
						"          {Location Match or Not},",
						"          {Shift Id},",
						"          {Shift Date},",
						"          Week_of_Year,",
						"          {XPS_ECUser.name} = name,",
						"          Block_To_Block_Violation,",
						"          Same_Block_Violation,",
						"          Stack_Violation",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"derivedColumn5, XpsEcUser join({MH Put CHE Operator Id} == user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"select4 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"select5 alterRow(upsertIf(true())) ~> alterRow1",
						"select6 alterRow(upsertIf(true())) ~> AlterRow2",
						"select7 alterRow(upsertIf(true())) ~> alterRow3",
						"derivedColumn2 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"derivedColumn1 select(mapColumn(",
						"          each(match(true()),",
						"               regexReplace($$,' ','_') = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select7",
						"filter5 aggregate(groupBy(gkey),",
						"     each(match(name!='gkey'), $$ = first($$))) ~> aggregate2",
						"select1 filter(not(isNull(mve_gkey))) ~> filter4",
						"filter4 aggregate(groupBy(mve_gkey),",
						"     each(match(name!='mve_gkey'), $$ = first($$))) ~> aggregate3",
						"select2 filter(not(isNull(gkey))) ~> filter5",
						"join6 derive(Block_To_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 3) != substring({DH ToPosName Short 5Char}, 1, 3), true(), false()),",
						"          Same_Block_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 5) != substring({DH ToPosName Short 5Char}, 1, 5), true(), false()),",
						"          Stack_Violation = iif(substring({MH ToPosName Short 5Char}, 1, 6) != substring({DH ToPosName Short 5Char}, 1, 6), true(), false())) ~> derivedColumn6",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/violation',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> violation",
						"AlterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/decking',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> decking",
						"alterRow3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'mnhpi',",
						"     folderPath: 'gold/move',",
						"     mergeSchema: false,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     keys:['mve_gkey'],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> move"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/linkedService2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Aarhus views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT count([ecEventGkey])   \n --, min([EcEventTime])  ,  max(EcEventTime)\n FROM [dbo].[ecevents]\n where  [moveKind] = 'LOAD' and typeDescription='CMPL' \n \n SELECT count(distinct [unitIdName])   \n FROM [dbo].[ecevents]\n where  [moveKind] = 'LOAD' and typeDescription='CMPL' \n \n\n\nselect  Top 20 *   FROM [dbo].[ecevents] where  [moveKind] = 'LOAD'\n\n SELECT   count([ecEventGkey]) \n FROM [dbo].[ecevents] where [Event_Type_Id] IN ( 'UNIT_LOAD' ,'UNIT_PAYLOAD_LOAD' ) \n group by [Event_Type_Id]\n order by 2",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "aarhus",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Create View')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create view MoveSrc\nAS\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'https://powerbianalyticsdata.dfs.core.windows.net/ptpbianalyticsdata/RawData/MoveSrc/2021/202110/',\n        FORMAT='PARQUET'\n    ) AS [result]\n\nCREATE DATABASE \"PTP\"",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "PTP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/External Table Creation')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDeltaFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDeltaFormat] \n\tWITH ( FORMAT_TYPE = DELTA)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'congo_powerbianalyticsdata_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [congo_powerbianalyticsdata_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION = 'abfss://congo@powerbianalyticsdata.dfs.core.windows.net' \n\t)\nGO\n\ndrop EXTERNAL table EcEvents_t\n\nCREATE EXTERNAL TABLE EcEvents_t (\n\t[ecEventGkey] bigint,\n\t[yardGkey] nvarchar(4000),\n\t[YardID] nvarchar(4000),\n\t[FcyID] nvarchar(4000),\n\t[cheKind] nvarchar(4000),\n\t[cheShortName] nvarchar(4000),\n\t[cheID] bigint,\n\t[EcEventTime] datetime2(7),\n\t[type] smallint,\n\t[subType] smallint,\n\t[typeDescription] nvarchar(4000),\n\t[fromCheIdName] nvarchar(4000),\n\t[ToCheIdName] nvarchar(4000),\n\t[unitIdName] nvarchar(4000),\n\t[powName] nvarchar(4000),\n\t[poolName] nvarchar(4000),\n\t[workQueue] nvarchar(4000),\n\t[travelDistance] nvarchar(4000),\n\t[moveKind] nvarchar(4000),\n\t[isTwinMove] nvarchar(4000),\n\t[startDistance] nvarchar(4000),\n\t[workAssignmentGkey] nvarchar(4000),\n\t[workAssignmentId] float,\n\t[unitReference] nvarchar(4000),\n\t[tranId] nvarchar(4000),\n\t[locType] nvarchar(4000),\n\t[locId] nvarchar(4000),\n\t[locSlot] nvarchar(4000),\n\t[opsPosId] nvarchar(4000),\n\t[unladenLoctype] nvarchar(4000),\n\t[unladenLocid] nvarchar(4000),\n\t[unladenLocSlot] nvarchar(4000),\n\t[ladenLoctype] nvarchar(4000),\n\t[ladenLocid] nvarchar(4000),\n\t[ladenLocSlot] nvarchar(4000),\n\t[lastEstMoveTime] nvarchar(4000),\n\t[waMovePurpose] nvarchar(4000),\n\t[waErrorDetails] nvarchar(4000)\n\t)\n\tWITH (\n\tLOCATION = 'silver/ecevents',\n\tDATA_SOURCE = [congo_powerbianalyticsdata_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseDeltaFormat]\n\t)\nGO\n\n\nSELECT TOP 100 * FROM dbo.EcEvents_t\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Congo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/External Table')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'pdports') \n\tCREATE EXTERNAL DATA SOURCE [pdports] \n\tWITH (\n\t\tLOCATION   = 'https://navispowerbidatastorage1.dfs.core.windows.net/pdports', \n\t)\nGo\n\nCREATE EXTERNAL TABLE EcEvents (\n\t[ecEventGkey] varchar(8000),\n\t[yardGkey] varchar(8000),\n\t[pKey] varchar(8000),\n\t[TimeStamp] varchar(8000),\n\t[eventType] varchar(8000),\n\t[CHE_ID] varchar(8000),\n\t[CHE_Name] varchar(8000),\n\t[Operator] varchar(8000),\n\t[eventSubType] varchar(8000),\n\t[eventTypeDescription] varchar(8000),\n\t[fromCheIdName] varchar(8000),\n\t[toCheIdName] varchar(8000),\n\t[unit] varchar(8000),\n\t[Pow] varchar(8000),\n\t[Pool] varchar(8000),\n\t[workQueue] varchar(8000),\n\t[travelDistance] varchar(8000),\n\t[moveKind] varchar(8000),\n\t[isTwin] varchar(8000),\n\t[startDistance] varchar(8000),\n\t[waGkey] varchar(8000),\n\t[workAssignment] varchar(8000),\n\t[unitRef] varchar(8000),\n\t[train_ID] varchar(8000),\n\t[locType] varchar(8000),\n\t[LocID] varchar(8000),\n\t[locSlot] varchar(8000),\n\t[opsPosID] varchar(8000),\n\t[unladenLocType] varchar(8000),\n\t[unladenLocID] varchar(8000),\n\t[unladenLocSlot] varchar(8000),\n\t[ladenLocType] varchar(8000),\n\t[ladenLocID] varchar(8000),\n\t[laden_LocSlot] varchar(8000),\n\t[lastEstMoveTime] varchar(8000),\n\t[waMovePurpose] varchar(8000),\n\t[waError_details] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'RawData/EcEvents/2021/202110/EcEvents_1.parquet',\n\tDATA_SOURCE = [ptpbianalyticsdata_powerbianalyticsdata_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nCREATE EXTERNAL TABLE EcEvents_Final  \nWITH (  \n       LOCATION = 'RawData/EcEvents/2021/202110/EcEvents_1.parquet',\n\tDATA_SOURCE = [ptpbianalyticsdata_powerbianalyticsdata_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]  \n) AS SELECT DISTINCT(ecEventGkey),[yardGkey]\n,[TimeStamp]\n,[eventType]\n,[CHE_ID]\n,[CHE_Name]\n,[eventTypeDescription]\n,[unit]\n,[moveKind]\n,[locSlot]\n,[unladenLocSlot]\n,[laden_LocSlot] FROM dbo.EcEvents;  \n\nselec\n\nSELECT TOP 100 * FROM EcEvents_Final\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "pdports",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ITV')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\ndrop view RTG_EcEvents\n\ncreate view RTG_EcEvents\nas \n\nSELECT\n DISTINCT Week\nFROM\n    OPENROWSET(\n        BULK 'PTP/silver/EcEvents',\n        FORMAT = 'DELTA',\n        data_source='ptpbianalyticsdata_powerbianalyticsdata_dfs_core_windows_net'\n    ) AS [result]\nWHERE [cheKind]='ITV'\nAND [moveKind] = 'DSCH'\nAND ([eventTypeDescription] = 'AYDR' or [eventTypeDescription] = 'CMPL')\nand [Week] in (47,46,45,44)\nGROUP by [ecEventGkey]\nhaving count(*)>1\n\nselect \n--top 10 *\nmax(([TimeStamp])),MIN((TimeStamp))\nfrom OPENROWSET(\n        BULK 'https://powerbianalyticsdata.dfs.core.windows.net/ptpbianalyticsdata/PTP/silver/EcEvents/Year=2021/Month=10/Week=43/*.parquet',\n        FORMAT = 'PARQUET'\n    ) AS [result]\nWHERE [cheKind]='RTG'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "PTP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Malta_EcEvents')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'malta_powerbianalyticsdata_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [malta_powerbianalyticsdata_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://powerbianalyticsdata.dfs.core.windows.net/malta', \n\t)\nGo\n\nCREATE EXTERNAL TABLE EcEvents (\n\t[ecEventGkey] bigint,\n\t[yardGkey] varchar(8000),\n\t[YARDID] varchar(8000),\n\t[FCYID] varchar(8000),\n\t[cheKind] varchar(8000),\n\t[cheShortName] varchar(8000),\n\t[cheID] bigint,\n\t[EcEventTime] datetime2(7),\n\t[type] varchar(8000),\n\t[subType] varchar(8000),\n\t[typeDescription] varchar(8000),\n\t[fromCheIdName] varchar(8000),\n\t[ToCheIdName] varchar(8000),\n\t[unitIdName] varchar(8000),\n\t[powName] varchar(8000),\n\t[poolName] varchar(8000),\n\t[workQueue] varchar(8000),\n\t[travelDistance] varchar(8000),\n\t[moveKind] varchar(8000),\n\t[isTwinMove] varchar(8000),\n\t[startDistance] varchar(8000),\n\t[workAssignmentId] varchar(8000),\n\t[unitReference] varchar(8000),\n\t[tranId] varchar(8000),\n\t[locType] varchar(8000),\n\t[locId] varchar(8000),\n\t[locSlot] varchar(8000),\n\t[opsPosId] varchar(8000),\n\t[unladenLoctype] varchar(8000),\n\t[unladenLocid] varchar(8000),\n\t[unladenLocSlot] varchar(8000),\n\t[ladenLoctype] varchar(8000),\n\t[ladenLocid] varchar(8000),\n\t[ladenLocSlot] varchar(8000),\n\t[lastEstMoveTime] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'EcEvents/2021/202110/*.snappy.parquet',\n\tDATA_SOURCE = [malta_powerbianalyticsdata_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM EcEvents\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Malta",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Malta_MoveSrc')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "IF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseParquetFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseParquetFormat] \n\tWITH ( FORMAT_TYPE = PARQUET)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'malta_powerbianalyticsdata_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [malta_powerbianalyticsdata_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://powerbianalyticsdata.dfs.core.windows.net/malta', \n\t)\nGo\n\nCREATE EXTERNAL TABLE MoveSrc (\n\t[UnitNbr] varchar(8000),\n\t[FacilityId] varchar(8000),\n\t[ComplexId] varchar(8000),\n\t[YardId] varchar(8000),\n\t[CarrierVisitKey] varchar(8000),\n\t[EventTypeId] varchar(8000),\n\t[MoveKind] varchar(8000),\n\t[FromLocation] varchar(8000),\n\t[ToLocation] varchar(8000),\n\t[FromPositionName] varchar(8000),\n\t[ToPositionName] varchar(8000),\n\t[CarryCHEOperatorId] varchar(8000),\n\t[FetchCHEOperatorId] varchar(8000),\n\t[PutCHEOperatorId] varchar(8000),\n\t[FetchCHEId] bigint,\n\t[FetchCHEKind] varchar(8000),\n\t[CarryCHEId] bigint,\n\t[CarryCHEKind] varchar(8000),\n\t[PutCHEId] bigint,\n\t[PutCHEKind] varchar(8000),\n\t[QCCHEId] bigint,\n\t[QCCHEKind] varchar(8000),\n\t[t_carry_complete] datetime2(7),\n\t[t_put] datetime2(7),\n\t[t_fetch] datetime2(7),\n\t[t_dispatch] varchar(8000),\n\t[t_discharge] datetime2(7),\n\t[t_carry_dispatch] varchar(8000),\n\t[t_carry_fetch_ready] varchar(8000),\n\t[t_carry_put_ready] varchar(8000),\n\t[dist_carry] varchar(8000),\n\t[dist_start] varchar(8000),\n\t[TwinFetch] varchar(8000),\n\t[TwinCarry] varchar(8000),\n\t[TwinPut] varchar(8000),\n\t[CategoryId] varchar(8000),\n\t[FreightKindId] varchar(8000),\n\t[to_pos_gkey] varchar(8000),\n\t[fm_pos_gkey] varchar(8000),\n\t[RestowReason] varchar(8000),\n\t[ContainerLineId] varchar(8000),\n\t[ContainerLineRole] varchar(8000),\n\t[pow] varchar(8000),\n\t[mve_gkey] varchar(8000),\n\t[ufv_gkey] varchar(8000),\n\t[BerthId] varchar(8000),\n\t[GoodsAndCtrWtKg] varchar(8000),\n\t[active_ufv] varchar(8000),\n\t[RequiresPowerFlag] varchar(8000),\n\t[OOGFlag] varchar(8000),\n\t[ShipperId] varchar(8000),\n\t[ConsigneeId] varchar(8000),\n\t[CommodityId] varchar(8000),\n\t[ATD] varchar(8000),\n\t[Rehandles] varchar(8000)\n\t)\n\tWITH (\n\tLOCATION = 'MoveSrc/2021/202110/*.snappy.parquet',\n\tDATA_SOURCE = [malta_powerbianalyticsdata_dfs_core_windows_net],\n\tFILE_FORMAT = [SynapseParquetFormat]\n\t)\nGO\n\nSELECT TOP 100 * FROM MoveSrc\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Malta",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Moves_EcEvents View Creation Script')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "if db_name() = 'master'\n    throw 50001, 'This script cannot be executed in master database. Create new database and run the script there.', 1;\n\nif SERVERPROPERTY('EngineEdition') <> 11\n    throw 50001, 'This script must be executed on Azure Synapse - SQL serverless endpoint.', 1;\n\n\nIF NOT EXISTS (SELECT * FROM sys.external_file_formats WHERE name = 'SynapseDeltaFormat') \n\tCREATE EXTERNAL FILE FORMAT [SynapseDeltaFormat] \n\tWITH ( FORMAT_TYPE = DELTA)\nGO\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'congo_powerbianalyticsdata_dfs_core_windows_net') \n\tCREATE EXTERNAL DATA SOURCE [congo_powerbianalyticsdata_dfs_core_windows_net] \n\tWITH (\n\t\tLOCATION   = 'https://powerbianalyticsdata.dfs.core.windows.net/congo', \n\t)\nGo\n\n\ncreate or alter view Moves\nas\nselect *\nfrom openrowset(\n           bulk 'silver/movesrc',\n           data_source = 'congo_powerbianalyticsdata_dfs_core_windows_net',\n           FORMAT = 'DELTA'\n    ) as moves\n\ncreate or alter view EcEvents\nas\nselect *\nfrom openrowset(\n           bulk 'silver/ecevents',\n           data_source = 'congo_powerbianalyticsdata_dfs_core_windows_net',\n           FORMAT = 'DELTA'\n    ) as ecevents\n\n\nSELECT TOP 100 * FROM Moves\n\nSELECT TOP 100 * FROM EcEvents\nGO\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "Congo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PTP_RTG')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code\ncreate or alter view rtg_ecevents\nas\nselect max(Week)\nFROM\n    OPENROWSET(\n        BULK 'PTP/gold/rtg_ecevents_v2',\n        data_source = 'ptpbianalyticsdata_powerbianalyticsdata_dfs_core_windows_net',\n        FORMAT = 'DELTA'\n    ) AS [rtg_ecevents]\n\nselect top 10* from rtg_ecevents\n\ncreate or alter view rtg_workhours\nas\nselect *\nfrom openrowset(\n           bulk 'PTP/gold/rtg_workhours_v2',\n           data_source = 'ptpbianalyticsdata_powerbianalyticsdata_dfs_core_windows_net',\n           FORMAT = 'DELTA'\n    ) as rtg_workhours\n\nselect top 10 * from rtg_workhours\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "PTP",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create or alter view rehandle\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/rehandle',\n        data_source = 'mict',\n        FORMAT = 'DELTA'\n    ) AS [rehandle];\n\ncreate or alter view tt_productivity\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/tt_productivity',\n        data_source = 'mict',\n        FORMAT = 'DELTA'\n    ) AS [tt_productivity];\n\ncreate or alter view yard_che_productivity\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/yard_che_productivity',\n        data_source = 'mict',\n        FORMAT = 'DELTA'\n    ) AS [yard_che_productivity];\n ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mict",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE OR ALTER VIEW vesselvisits_t\nAS SELECT *\nFROM  \n    OPENROWSET(\n        BULK 'silver/vessel_visits',\n        data_source='eurogatectb',\n        FORMAT='DELTA'\n    ) vesselvisits_t\n\n\n    select * from vesselvisits_t\n\n    CREATE EXTERNAL DATA SOURCE [eurogatectb] \n\tWITH (\n\t\tLOCATION   = 'https://navispowerbidatastorage1.dfs.core.windows.net/eurogatectb', \n\t)",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "eurogatectb",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": " CREATE EXTERNAL DATA SOURCE [transnet] \n   WITH (\n       LOCATION  = 'https://navispowerbidatastorage2.dfs.core.windows.net/transnet', \n   )\nGo",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "transnet",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create or alter view itv_workhours\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/itv_workhours',\n        data_source = 'mnhpi',\n        FORMAT = 'DELTA'\n    ) AS [itv_workhours];\n\nIF NOT EXISTS (SELECT * FROM sys.external_data_sources WHERE name = 'teagtl')  \n\n    CREATE EXTERNAL DATA SOURCE [teagtl]  \n\n    WITH ( \n\n        LOCATION   = 'https://navispowerbidatastorage2.dfs.core.windows.net/teagtl',  \n\n    ) \n\nGo \n\nDrop view stack_confirmity\n\ncreate or alter view stack_confirmity\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/stack_confirmity',\n        data_source = 'teagtl',\n        FORMAT = 'DELTA'\n    ) AS [stack_confirmity];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "teagtl",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 5')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create or ALTER  view  rehandle\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/rehandle',\n        data_source = 'mnhpi',\n        FORMAT = 'DELTA'\n    ) AS [rehandle]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mnhpi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 6')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [mve_gkey]\n,[Unit_Nbr]\n,[Yard_Id]\n,[Event_Type_Id]\n,[Move_Kind]\n,[t_carry_complete]\n,[Year]\n,[Month]\n,[Week]\n,[Date]\n,[Year_Week]\n,[t_put]\n,[Category_Id]\n,[Freight_Kind_Id]\n,[pow]\n,[active_ufv]\n,[Rehandles]\n FROM [dbo].[rehandle]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mnhpi",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 7')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT OBJECT_DEFINITION(OBJECT_ID('[dbo].[stack_confirmity]')) AS ViewDefinition;\n\ncreate view stack_confirmity\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/stack_confirmity',\n        data_source = 'mict',\n        FORMAT = 'DELTA'\n    ) AS [stack_confirmity];",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mict",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/eurogatectb')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "-- This is auto-generated code \ncreate or alter view  rehandle_rdsc_export\nas\nselect *\nFROM\n    OPENROWSET(\n        BULK 'gold/rehandle_rdsc_export',\n        data_source = 'gpa',\n        FORMAT = 'DELTA'\n    ) AS [rehandle_rdsc_export]   \nwhere t_put is NULL\nand MONTH(t_put)=09\nand DAY(t_put)=25\norder by t_put DESC\n    GROUP by ecEventGkey\n    having count(*)>1\n\nselect   count(mve_gkey),  Requires_Power_Flag, Year,Month, Week\n from moves where Move_Kind='RECV' and Category_Id='EXPRT' and Freight_Kind_Id='FCL'\n group by  Requires_Power_Flag, Year,Month, Week\n order by Week\n\nselect count(mve_gkey),count(DISTINCT mve_gkey)  from rehandle_export where Year=2023 and Move_Kind='LOAD'\n\nselect top 5 *  from moves where move_kind='RDSC' and year=2022\nselect top 20 *  from rehandle_export where Unit_Nbr='BSIU9921765' order by IB_mve_gkey,RNumber  --APHU6563570  AMFU8783903 APHU6563570 ACLU9729899\nselect * from moves where Unit_Nbr ='MRKU7614004' and Category_Id='EXPRT' order by t_put --BSIU9921765 , GMCU3062480 ,'UACU5213095'  GAOU6031329\nselect * from ecevents where unitIdName='MRKU7614004'   order by EcEventTime \nselect * from rehandle_rdsc_export where Unit_Nbr ='ACSU2965389'\norder by Unit_Nbr ,t_put\n-- create view without Year, Month, Week fields to get around nvarchar to int conversion\ncreate or alter view laden_unladen\nAS \nSELECt [Yard_Id]\n,[Carrier_Visit_Key]\n,[Event_Type_Id]\n,[Move_Kind]\n,[From_Location]\n,[To_Location]\n,[Carry_CHE_Id]\n,[Carry_CHE_Kind]\n,[Unladen]\n,[Laden]\n,[Carrier_Name]\n,[Unit_Nbr]\n,[mve_gkey]\n,[Put_CHE_Id]\n,[Put_CHE_Kind]\n,[Fetch_CHE_Id]\n,[Fetch_CHE_Kind]\n,[t_fetch]\n,[t_dispatch]\n,[t_discharge]\n,[pow]\n,[From_Position_Name]\n,[To_Position_Name]\n,[QC_CHE_Id]\n,[QC_CHE_Kind]\n,[t_carry_complete]\n,[t_put]\nFROM\n    OPENROWSET(\n        BULK 'gold/laden_unladen',\n        data_source = 'valencia',\n        FORMAT = 'DELTA'\n    ) AS [laden_unladen] \n\nselect TOP 3 t_put\nFROM\n    OPENROWSET(\n        BULK 'silver/moves',\n        data_source = 'valencia',\n        FORMAT = 'DELTA'\n    ) AS [moves]\norder by  t_put  DESC    \n\nselect TOP 3  EcEventTime\nFROM\n    OPENROWSET(\n        BULK 'silver/ecevents',\n        data_source = 'valencia',\n        FORMAT = 'DELTA'\n    ) AS [ecevents]\norder by  EcEventTime DESC\n\nselect  DISTINCT cheID,cheName,FcyID\nFROM\n    OPENROWSET(\n        BULK 'silver/ecevents',\n        data_source = 'gpa',\n        FORMAT = 'DELTA'\n    ) AS [ecevents] \n    where cheKind='RTG' order by 3,1 \n\nselect  count(*), ecEventGkey\nFROM\n    OPENROWSET(\n        BULK 'silver/ecevents',\n        data_source = 'gpa',\n        FORMAT = 'DELTA'\n    ) AS [ecevents]\ngroup by  ecEventGkey having count(*) > 1   \n\nselect count(*)  from \n  OPENROWSET(\n        BULK 'silver/cranedelays',\n        data_source = 'valencia',\n        FORMAT = 'DELTA'\n    ) AS [cranedelays]\n\nselect * from moves\nwhere week=31\nwhere ecEventGkey<>587\nwhere year=2022 and Month=8\n--where mve_gkey=2147467606\nwhere ecEventGkey=2177318184\nwhere year=2021\nand month =9\n--order by year, month\n\nselect count(*), week,year from truckturntime group by week,year order by year, week\n\nselect top 10 * from  truckturntime  where carrier_Visit_Key IN (3076046590,3076048349, 3076056090, 2940853576,3065675895 )  order by Trk_Yard_Entered_Time\n\n    select distinct cheName from ecevents\n    where cheKind = 'RTG'\n    where unitIdName='HLXU8312630'\n\nselect distinct month(ATA) from vesselvisits    where year(ATA)=2022\n\nselect Top 10* from  qc_idle_time a\nselect  count(*) , month, IDle_time_Range  from  qc_idle_time where month in (11,10) group by month , IDle_time_Range  order by 2 ,3\n\nselect DISTINCT LEN(From_Position_Name) from moves\nwhere event_type_id='UNIT_YARD_SHIFT'\ncreate or alter view moves\nas\nselect *\nfrom openrowset(\n           bulk 'silver/moves',\n           data_source = 'eurogatectb_powerbianalyticsdata_dfs_core_windows_net',\n           FORMAT = 'DELTA'\n    ) as moves",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "gpa",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/test')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create or alter view vessel_visits\n AS \nselect *\nfrom \n    OPENROWSET(\n        BULK 'silver/vessel_visits',\n        data_source = 'arica_powerbianalyticsdata_dfs_core_windows_net',\n        FORMAT = 'DELTA'\n    ) AS [vessel_visits]\nGROUP by carrier_visit_key\nhaving count(*)>1\n\n    where carrier_visit_key=null\n    order by date_of_gang\nwhere \nEcEventTime>'2021-07-01T00:00:00.0000000'\n\n--and \nWeek=49\nand event_type_id='UNIT_DISCH'\n\n    group by ecEventGkey\n    having count(*)>1\n\n\n    where year=2022 and Week=1\n    where move_kind<>'DSCH' and EVENT_TYPE_ID='UNIT_LOAD'\n    \nselect mve_gkey,count(*) from dbo.moves\ngroup by mve_gkey\nhaving count(*)>1\n2396477\n\n\nDual Cycle\n2021-11-16T12:59:47.0000000\n2021-01-19T03:38:45.0000000",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ARICA",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Getting Started with Delta Lake')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "f598f1b5-652f-423a-a571-7d6e2804f468"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					}
				},
				"cells": [
					{
						"cell_type": "markdown",
						"source": [
							"# Hitchhiker's Guide to Delta Lake (Python)\n",
							"\n",
							"This tutorial has been adapted for more clarity from its original counterpart [here](https://docs.delta.io/latest/quick-start.html). This notebook helps you quickly explore the main features of [Delta Lake](https://github.com/delta-io/delta). It provides code snippets that show how to read from and write to Delta Lake tables from interactive, batch, and streaming queries.\n",
							"\n",
							"Here's what we will cover:\n",
							"* Create a table\n",
							"* Understanding meta-data\n",
							"* Read data\n",
							"* Update table data\n",
							"* Overwrite table data\n",
							"* Conditional update without overwrite\n",
							"* Read older versions of data using Time Travel\n",
							"* Write a stream of data to a table\n",
							"* Read a stream of changes from a table"
						],
						"attachments": null
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Configuration\n",
							"Make sure you modify this as appropriate."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"import random\n",
							"\n",
							"session_id = random.randint(0,1000000)\n",
							"delta_table_path = \"/delta/delta-table-{0}\".format(session_id)\n",
							"\n",
							"delta_table_path"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Create a table\n",
							"To create a Delta Lake table, write a DataFrame out in the **delta** format. You can use existing Spark SQL code and change the format from parquet, csv, json, and so on, to delta.\n",
							"\n",
							"These operations create a new Delta Lake table using the schema that was inferred from your DataFrame. For the full set of options available when you create a new Delta Lake table, see Create a table and Write to a table (subsequent cells in this notebook)."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"data = spark.range(0,5)\n",
							"data.show()\n",
							"data.write.format(\"delta\").save(delta_table_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Understanding Meta-data\n",
							"\n",
							"In Delta Lake, meta-data is no different from data i.e., it is stored next to the data. Therefore, an interesting side-effect here is that you can peek into meta-data using regular Spark APIs. "
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read data\n",
							"\n",
							"You read data in your Delta Lake table by specifying the path to the files."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"delta\").load(delta_table_path)\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Update table data\n",
							"\n",
							"Delta Lake supports several operations to modify tables using standard DataFrame APIs. This example runs a batch job to overwrite the data in the table.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"data = spark.range(5,10)\n",
							"data.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "markdown",
						"source": [
							"When you now inspect the meta-data, what you will notice is that the original data is over-written. Well, not in a true sense but appropriate entries are added to Delta's transaction log so it can provide an \"illusion\" that the original data was deleted. We can verify this by re-inspecting the meta-data. You will see several entries indicating reference removal to the original data."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"[log_line.value for log_line in spark.read.text(delta_table_path + \"/_delta_log/\").collect()]"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Save as catalog tables\n",
							"\n",
							"Delta Lake can write to managed or external catalog tables."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"# Write data to a new managed catalog table.\n",
							"data.write.format(\"delta\").saveAsTable(\"ManagedDeltaTable\")"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"source": [
							"# Define an external catalog table that points to the existing Delta Lake data in storage.\n",
							"spark.sql(\"CREATE TABLE ExternalDeltaTable USING DELTA LOCATION '{0}'\".format(delta_table_path))"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"source": [
							"# List the 2 new tables.\n",
							"spark.sql(\"SHOW TABLES\").show()\n",
							"\n",
							"# Explore their properties.\n",
							"spark.sql(\"DESCRIBE EXTENDED ManagedDeltaTable\").show(truncate=False)\n",
							"spark.sql(\"DESCRIBE EXTENDED ExternalDeltaTable\").show(truncate=False)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Conditional update without overwrite\n",
							"\n",
							"Delta Lake provides programmatic APIs to conditional update, delete, and merge (upsert) data into tables. For more information on these operations, see [Table Deletes, Updates, and Merges](https://docs.delta.io/latest/delta-update.html)."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"from delta.tables import *\n",
							"from pyspark.sql.functions import *\n",
							"\n",
							"delta_table = DeltaTable.forPath(spark, delta_table_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"source": [
							"# Update every even value by adding 100 to it\n",
							"delta_table.update(\n",
							"  condition = expr(\"id % 2 == 0\"),\n",
							"  set = { \"id\": expr(\"id + 100\") })\n",
							"delta_table.toDF().show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"source": [
							"# Delete every even value\n",
							"delta_table.delete(\"id % 2 == 0\")\n",
							"delta_table.toDF().show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"source": [
							"# Upsert (merge) new data\n",
							"new_data = spark.range(0,20).alias(\"newData\")\n",
							"\n",
							"delta_table.alias(\"oldData\")\\\n",
							"    .merge(new_data.alias(\"newData\"), \"oldData.id = newData.id\")\\\n",
							"    .whenMatchedUpdate(set = { \"id\": lit(\"-1\")})\\\n",
							"    .whenNotMatchedInsert(values = { \"id\": col(\"newData.id\") })\\\n",
							"    .execute()\n",
							"\n",
							"delta_table.toDF().show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "markdown",
						"source": [
							"## History\n",
							"Delta's most powerful feature is the ability to allow looking into history i.e., the changes that were made to the underlying Delta Table. The cell below shows how simple it is to inspect the history."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().show(20, 1000, False)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read older versions of data using Time Travel\n",
							"\n",
							"You can query previous snapshots of your Delta Lake table by using a feature called Time Travel. If you want to access the data that you overwrote, you can query a snapshot of the table before you overwrote the first set of data using the versionAsOf option.\n",
							"\n",
							"Once you run the cell below, you should see the first set of data, from before you overwrote it. Time Travel is an extremely powerful feature that takes advantage of the power of the Delta Lake transaction log to access data that is no longer in the table. Removing the version 0 option (or specifying version 1) would let you see the newer data again. For more information, see [Query an older snapshot of a table (time travel)](https://docs.delta.io/latest/delta-batch.html#deltatimetravel)."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(delta_table_path)\n",
							"df.show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Write a stream of data to a table\n",
							"\n",
							"You can also write to a Delta Lake table using Spark's Structured Streaming. The Delta Lake transaction log guarantees exactly-once processing, even when there are other streams or batch queries running concurrently against the table. By default, streams run in append mode, which adds new records to the table.\n",
							"\n",
							"For more information about Delta Lake integration with Structured Streaming, see [Table Streaming Reads and Writes](https://docs.delta.io/latest/delta-streaming.html).\n",
							"\n",
							"In the cells below, here's what we are doing:\n",
							"\n",
							"1. *Cell 28* Setup a simple Spark Structured Streaming job to generate a sequence and make the job write into our Delta Table\n",
							"2. *Cell 30* Show the newly appended data\n",
							"3. *Cell 31* Inspect history\n",
							"4. *Cell 32* Stop the structured streaming job\n",
							"5. *Cell 33* Inspect history <-- You'll notice appends have stopped"
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"streaming_df = spark.readStream.format(\"rate\").load()\n",
							"stream = streaming_df\\\n",
							"    .selectExpr(\"value as id\")\\\n",
							"    .writeStream\\\n",
							"    .format(\"delta\")\\\n",
							"    .option(\"checkpointLocation\", \"/tmp/checkpoint-{0}\".format(session_id))\\\n",
							"    .start(delta_table_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Read a stream of changes from a table\n",
							"\n",
							"While the stream is writing to the Delta Lake table, you can also read from that table as streaming source. For example, you can start another streaming query that prints all the changes made to the Delta Lake table."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.toDF().sort(col(\"id\").desc()).show(100)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(20, 1000, False)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"source": [
							"stream.stop()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"source": [
							"delta_table.history().drop(\"userId\", \"userName\", \"job\", \"notebook\", \"clusterId\", \"isolationLevel\", \"isBlindAppend\").show(100, 1000, False)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Compaction\n",
							"\n",
							"If a Delta Table is growing too large, you can compact it by repartitioning into a smaller number of files.\n",
							"\n",
							"The option `dataChange = false` is an optimization that tells Delta Lake to do the repartition without marking the underlying data as \"modified\". This ensures that any other concurrent operations (such as streaming reads/writes) aren't negatively impacted.\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"partition_count = 2\n",
							"\n",
							"spark.read\\\n",
							"    .format(\"delta\")\\\n",
							"    .load(delta_table_path)\\\n",
							"    .repartition(partition_count)\\\n",
							"    .write.option(\"dataChange\", \"false\")\\\n",
							"    .format(\"delta\")\\\n",
							"    .mode(\"overwrite\")\\\n",
							"    .save(delta_table_path)    "
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "markdown",
						"source": [
							"## Convert Parquet to Delta\n",
							"You can do an in-place conversion from the Parquet format to Delta."
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_path = \"/parquet/parquet-table-{0}\".format(session_id)\n",
							"\n",
							"data = spark.range(0,5)\n",
							"data.write.parquet(parquet_path)\n",
							"\n",
							"# Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"source": [
							"DeltaTable.convertToDelta(spark, \"parquet.`{0}`\".format(parquet_path))\n",
							"\n",
							"# Confirm that the converted data is now in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "markdown",
						"source": [
							"## SQL Support\n",
							"Delta supports table utility commands through SQL.  You can use SQL to:\n",
							"* Get a DeltaTable's history\n",
							"* Vacuum a DeltaTable\n",
							"* Convert a Parquet file to Delta\n",
							""
						],
						"attachments": null
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"DESCRIBE HISTORY delta.`{0}`\".format(delta_table_path)).show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"source": [
							"spark.sql(\"VACUUM delta.`{0}`\".format(delta_table_path)).show()"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"source": [
							"parquet_id = random.randint(0,1000)\n",
							"parquet_path = \"/parquet/parquet-table-{0}-{1}\".format(session_id, parquet_path)\n",
							"\n",
							"data = spark.range(0,5)\n",
							"data.write.parquet(parquet_path)\n",
							"\n",
							"# Confirm that the data isn't in the Delta format\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)\n",
							"\n",
							"# Use SQL to convert the parquet table to Delta\n",
							"spark.sql(\"CONVERT TO DELTA parquet.`{0}`\".format(parquet_path))\n",
							"\n",
							"DeltaTable.isDeltaTable(spark, parquet_path)"
						],
						"attachments": null,
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pbixpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 6,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus"
		}
	]
}